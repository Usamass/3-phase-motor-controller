CCS PCD C Compiler, Version 5.112, 5967               24-Apr-24 13:16

               Filename:   C:\Users\eelab\Documents\motor_controller\20242422 1721 dspic202_timer1.lst

               ROM used:   4808 bytes (21%)
                           Largest free fragment is 17720
               RAM used:   1428 (70%) at main() level
                           1635 (80%) worst case
               Stack used: 96 locations (46 in main + 50 for interrupts)
               Stack size: 128

*
0000:  GOTO    1134
*
0014:  DATA    60,02,00
*
001A:  DATA    6E,03,00
*
0022:  DATA    80,02,00
*
002A:  DATA    00,02,00
002C:  DATA    20,02,00
*
0086:  DATA    A2,02,00
*
0096:  DATA    40,02,00
.................... //!#include <pwm_3.h>
.................... #include <33FJ32MC202.h>
.................... //////////// Standard Header file for the DSPIC33FJ32MC202 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ32MC202
*
032C:  MOV     W5,[W15++]
032E:  MOV     #C,W5
0330:  REPEAT  #3
0332:  MOV     [W5++],[W15++]
0334:  MUL.UU  W0,W2,W4
0336:  BTSS    W3.F
0338:  BRA     33E
033A:  MUL.SS  W0,W3,W6
033C:  BRA     340
033E:  MUL.UU  W0,W3,W6
0340:  BCLR.B  42.0
0342:  ADD     W6,W5,W5
0344:  ADDC    W7,#0,W8
0346:  BTSS    W1.F
0348:  BRA     34E
034A:  MUL.SS  W1,W2,W6
034C:  BRA     350
034E:  MUL.UU  W1,W2,W6
0350:  ADDC    W6,W5,W5
0352:  ADDC    W7,W8,W8
0354:  ADDC    #0,W9
0356:  MUL.SS  W1,W3,W6
0358:  ADDC    W6,W8,W8
035A:  ADDC    W9,W7,W7
035C:  MOV     W7,W3
035E:  MOV     W8,W2
0360:  MOV     W5,W1
0362:  MOV     W4,W0
0364:  MOV     #12,W5
0366:  REPEAT  #3
0368:  MOV     [--W15],[W5--]
036A:  MOV     [--W15],W5
036C:  RETURN  
*
057C:  MOV     W5,[W15++]
057E:  MOV     #C,W5
0580:  REPEAT  #3
0582:  MOV     [W5++],[W15++]
0584:  MOV     W0,W4
0586:  MOV     W1,W5
0588:  MOV     W2,W6
058A:  MOV     W3,W7
058C:  CLR     W0
058E:  CLR     W1
0590:  CLR     W2
0592:  CLR     W3
0594:  BCLR    W8.0
0596:  BTSS    W7.F
0598:  BRA     5AA
059A:  BSET    W8.0
059C:  COM     W7,W7
059E:  COM     W6,W6
05A0:  COM     W5,W5
05A2:  NEG     W4,W4
05A4:  ADDC    W5,#0,W5
05A6:  ADDC    W6,#0,W6
05A8:  ADDC    W7,#0,W7
05AA:  IOR      W4,  W5,W9
05AC:  BRA     NZ,5B2
05AE:  IOR      W6,  W7,W9
05B0:  BRA     Z,5DC
05B2:  MOV     #473,W9
05B4:  BTSC    W3.4
05B6:  BRA     5CE
05B8:  BCLR.B  42.0
05BA:  RLC     W4,W4
05BC:  RLC     W5,W5
05BE:  RLC     W6,W6
05C0:  RLC     W7,W7
05C2:  RLC     W0,W0
05C4:  RLC     W1,W1
05C6:  RLC     W2,W2
05C8:  RLC     W3,W3
05CA:  DEC     W9,W9
05CC:  BRA     NZ,5B4
05CE:  SL      W9,#4,W9
05D0:  BCLR.B  42.0
05D2:  BCLR    W9.F
05D4:  BCLR    W3.4
05D6:  XOR     W9,W3,W3
05D8:  BTSC    W8.0
05DA:  BSET    W3.F
05DC:  MOV     #12,W5
05DE:  REPEAT  #3
05E0:  MOV     [--W15],[W5--]
05E2:  MOV     [--W15],W5
05E4:  RETURN  
05E6:  MOV     W8,[W15++]
05E8:  MOV     #12,W8
05EA:  REPEAT  #4
05EC:  MOV     [W8++],[W15++]
05EE:  XOR     W3,W7,W13
05F0:  MOV     W3,W8
05F2:  MOV     W7,W9
05F4:  MOV     #7FF,W10
05F6:  BCLR.B  42.0
05F8:  BCLR.B  42.1
05FA:  ASR     W8,#4,W8
05FC:  AND     W10,W8,W8
05FE:  CP0     W8
0600:  BRA     Z,6DA
0602:  BCLR.B  42.0
0604:  BCLR.B  42.1
0606:  ASR     W9,#4,W9
0608:  AND     W10,W9,W9
060A:  CP0     W9
060C:  BRA     Z,6DA
060E:  CLR     W10
0610:  SUB     W8,W9,W12
0612:  BRA     NC,61A
0614:  ADD     #3FF,W12
0616:  BRA     C,6DA
0618:  BRA     622
061A:  MOV     #401,W11
061C:  SUB     W12,W11,W12
061E:  BRA     NC,6DA
0620:  BRA     Z,6DA
0622:  CLR     W8
0624:  CLR     W9
0626:  CLR     W10
0628:  CLR     W11
062A:  AND     #1F,W3
062C:  BSET    W3.4
062E:  AND     #1F,W7
0630:  BSET    W7.4
0632:  MOV     W12,[W15++]
0634:  MOV     #36,W12
0636:  SUB     W0,W4,W0
0638:  SUBB    W1,W5,W1
063A:  SUBB    W2,W6,W2
063C:  SUBB    W3,W7,W3
063E:  BRA     N,644
0640:  BRA     C,64E
0642:  BRA     NZ,650
0644:  ADD     W0,W4,W0
0646:  ADDC    W1,W5,W1
0648:  ADDC    W2,W6,W2
064A:  ADDC    W3,W7,W3
064C:  BRA     650
064E:  BSET    W8.0
0650:  DEC     W12,W12
0652:  BRA     Z,66A
0654:  BCLR.B  42.0
0656:  RLC     W0,W0
0658:  RLC     W1,W1
065A:  RLC     W2,W2
065C:  RLC     W3,W3
065E:  BCLR.B  42.0
0660:  RLC     W8,W8
0662:  RLC     W9,W9
0664:  RLC     W10,W10
0666:  RLC     W11,W11
0668:  BRA     636
066A:  MOV     [--W15],W12
066C:  BTSC    W11.5
066E:  BRA     672
0670:  BRA     67E
0672:  BCLR.B  42.0
0674:  RRC     W11,W11
0676:  RRC     W10,W10
0678:  RRC     W9,W9
067A:  RRC     W8,W8
067C:  BRA     684
067E:  DEC     W12,W12
0680:  BCLR.B  42.0
0682:  BRA     Z,6DA
0684:  BTSC.B  42.0
0686:  BRA     69A
0688:  RLC     W0,W0
068A:  RLC     W1,W1
068C:  RLC     W2,W2
068E:  RLC     W3,W3
0690:  SUB     W0,W4,W4
0692:  SUBB    W1,W5,W5
0694:  SUBB    W2,W6,W6
0696:  SUBB    W3,W7,W7
0698:  BRA     NC,6C4
069A:  INC     W8,W8
069C:  BRA     NZ,6C4
069E:  INC     W9,W9
06A0:  BRA     NZ,6C4
06A2:  INC     W10,W10
06A4:  BRA     NZ,6C4
06A6:  INC     W11,W11
06A8:  BRA     NZ,6C4
06AA:  INC     W12,W12
06AC:  BRA     Z,6DA
06AE:  BRA     6C4
06B0:  DEC     W12,W12
06B2:  BRA     Z,6DA
06B4:  BTSC    W11.4
06B6:  BRA     6C4
06B8:  BCLR.B  42.0
06BA:  RLC     W8,W8
06BC:  RLC     W9,W9
06BE:  RLC     W10,W10
06C0:  RLC     W11,W11
06C2:  BRA     6B4
06C4:  SL      W12,#4,W12
06C6:  BCLR.B  42.0
06C8:  BCLR    W12.F
06CA:  BTSC    W13.F
06CC:  BSET    W12.F
06CE:  BCLR    W11.4
06D0:  XOR     W12,W11,W3
06D2:  MOV     W10,W2
06D4:  MOV     W9,W1
06D6:  MOV     W8,W0
06D8:  BRA     6E4
06DA:  MOV     #0,W0
06DC:  MOV     #0,W1
06DE:  MOV     #0,W2
06E0:  MOV     #0,W3
06E2:  BRA     6E4
06E4:  MOV     #1A,W8
06E6:  REPEAT  #4
06E8:  MOV     [--W15],[W8--]
06EA:  MOV     [--W15],W8
06EC:  RETURN  
06EE:  MOV     W8,[W15++]
06F0:  MOV     #12,W8
06F2:  REPEAT  #4
06F4:  MOV     [W8++],[W15++]
06F6:  CLR     W11
06F8:  MUL.UU  W12,#0,W12
06FA:  MOV     W3,W8
06FC:  MOV     W7,W9
06FE:  MOV     #7FF,W10
0700:  BCLR.B  42.0
0702:  BCLR.B  42.1
0704:  ASR     W8,#4,W8
0706:  AND     W10,W8,W8
0708:  CP0     W8
070A:  BRA     Z,7EE
070C:  BCLR.B  42.0
070E:  BCLR.B  42.1
0710:  ASR     W9,#4,W9
0712:  AND     W10,W9,W9
0714:  CP0     W9
0716:  BRA     Z,7EE
0718:  ADD     W9,W8,W8
071A:  BTSC    W9.B
071C:  BRA     726
071E:  SUB     #3FF,W8
0720:  BRA     Z,7EE
0722:  BRA     NC,7EE
0724:  BRA     72C
0726:  MOV     #401,W10
0728:  ADD.B   W10L,W5L,W5L
072A:  BRA     C,7EE
072C:  XOR     W3,W7,W13
072E:  BCLR.B  42.0
0730:  BCLR.B  42.1
0732:  AND     #F,W3
0734:  BSET    W3.4
0736:  AND     #F,W7
0738:  BSET    W7.4
073A:  MOV     W8,[W15++]
073C:  MUL.UU  W4,W1,W8
073E:  MUL.UU  W5,W0,W10
0740:  ADD     W8,W10,W10
0742:  ADDC    W9,W11,W11
0744:  ADDC    #0,W12
0746:  MUL.UU  W4,W2,W8
0748:  ADD     W8,W11,W11
074A:  ADDC    W9,W12,W12
074C:  MUL.UU  W5,W1,W8
074E:  CLR     W10
0750:  ADD     W8,W11,W11
0752:  ADDC    W9,W12,W12
0754:  ADDC    #0,W10
0756:  MUL.UU  W6,W0,W8
0758:  ADD     W8,W11,W11
075A:  ADDC    W9,W12,W12
075C:  ADDC    #0,W10
075E:  CLR     W11
0760:  MUL.UU  W4,W3,W8
0762:  ADD     W8,W12,W12
0764:  ADDC    W9,W10,W10
0766:  ADDC    #0,W11
0768:  MUL.UU  W5,W2,W8
076A:  ADD     W8,W12,W12
076C:  ADDC    W9,W10,W10
076E:  ADDC    #0,W11
0770:  MUL.UU  W6,W1,W8
0772:  ADD     W8,W12,W12
0774:  ADDC    W9,W10,W10
0776:  ADDC    #0,W11
0778:  MUL.UU  W7,W0,W8
077A:  ADD     W8,W12,W12
077C:  ADDC    W9,W10,W10
077E:  ADDC    #0,W11
0780:  MOV     W12,W0
0782:  CLR     W12
0784:  MUL.UU  W5,W3,W8
0786:  ADD     W8,W10,W10
0788:  ADDC    W9,W11,W11
078A:  ADDC    #0,W12
078C:  MUL.UU  W6,W2,W8
078E:  ADD     W8,W10,W10
0790:  ADDC    W9,W11,W11
0792:  ADDC    #0,W12
0794:  MUL.UU  W6,W3,W8
0796:  ADD     W8,W11,W11
0798:  ADDC    W9,W12,W12
079A:  MUL.UU  W7,W1,W8
079C:  ADD     W8,W10,W10
079E:  ADDC    W9,W11,W11
07A0:  ADDC    #0,W12
07A2:  MUL.UU  W7,W2,W8
07A4:  ADD     W8,W11,W11
07A6:  ADDC    W9,W12,W12
07A8:  MUL.UU  W7,W3,W8
07AA:  ADD     W8,W12,W12
07AC:  MOV     W10,W1
07AE:  MOV     W11,W2
07B0:  MOV     W12,W3
07B2:  MOV     #5,W4
07B4:  BCLR.B  42.0
07B6:  RRC     W3,W3
07B8:  RRC     W2,W2
07BA:  RRC     W1,W1
07BC:  RRC     W0,W0
07BE:  DEC     W4,W4
07C0:  BRA     NZ,7B4
07C2:  MOV     [--W15],W8
07C4:  INC     W8,W8
07C6:  IOR      W0,  W1,W6
07C8:  BRA     Z,7CC
07CA:  BRA     7D0
07CC:  IOR      W2,  W3,W6
07CE:  BRA     Z,7E0
07D0:  BTSC    W3.4
07D2:  BRA     7E0
07D4:  BCLR.B  42.0
07D6:  RLC     W0,W0
07D8:  RLC     W1,W1
07DA:  RLC     W2,W2
07DC:  RLC     W3,W3
07DE:  DEC     W8,W8
07E0:  SL      W8,#4,W8
07E2:  BCLR    W3.F
07E4:  BTSC    W13.F
07E6:  BSET    W3.F
07E8:  BCLR    W3.4
07EA:  XOR     W8,W3,W3
07EC:  BRA     7F4
07EE:  MUL.UU  W0,#0,W0
07F0:  MUL.UU  W0,#0,W2
07F2:  BRA     7F4
07F4:  MOV     #1A,W8
07F6:  REPEAT  #4
07F8:  MOV     [--W15],[W8--]
07FA:  MOV     [--W15],W8
07FC:  RETURN  
07FE:  MOV     W5,[W15++]
0800:  MOV     #C,W5
0802:  REPEAT  #5
0804:  MOV     [W5++],[W15++]
0806:  MOV     W3,W8
0808:  MOV     W2,W7
080A:  MOV     W1,W6
080C:  MOV     W0,W5
080E:  MOV     W3,W9
0810:  MOV     #473,W11
0812:  ASR     W3,#4,W3
0814:  MOV     #7FF,W10
0816:  AND     W10,W3,W3
0818:  SUB     W11,W3,W11
081A:  AND     #1F,W8
081C:  BSET    W8.4
081E:  CLR     W0
0820:  CLR     W1
0822:  CLR     W2
0824:  CLR     W3
0826:  BCLR.B  42.0
0828:  RRC     W8,W8
082A:  RRC     W7,W7
082C:  RRC     W6,W6
082E:  RRC     W5,W5
0830:  RRC     W3,W3
0832:  RRC     W2,W2
0834:  RRC     W1,W1
0836:  RRC     W0,W0
0838:  DEC     W11,W11
083A:  BRA     NZ,826
083C:  BTSS    W9.F
083E:  BRA     852
0840:  COM     W0,W0
0842:  COM     W1,W1
0844:  COM     W2,W2
0846:  COM     W3,W3
0848:  INC     W0,W0
084A:  ADDC    #0,W1
084C:  ADDC    #0,W2
084E:  ADDC    #0,W3
0850:  BRA     852
0852:  MOV     #16,W5
0854:  REPEAT  #5
0856:  MOV     [--W15],[W5--]
0858:  MOV     [--W15],W5
085A:  RETURN  
*
092C:  MOV     W8,[W15++]
092E:  MOV     #12,W8
0930:  REPEAT  #4
0932:  MOV     [W8++],[W15++]
0934:  MOV     #8000,W8
0936:  BTSC.B  43.0
0938:  XOR     W8,W7,W7
093A:  CP0     W0
093C:  BRA     NZ,94C
093E:  CP0     W1
0940:  BRA     NZ,94C
0942:  CP0     W2
0944:  BRA     NZ,94C
0946:  MOV     #7FFF,W10
0948:  AND     W3,W10,W10
094A:  BTSS.B  42.1
094C:  MOV     W3,W10
094E:  XOR     W7,W10,W11
0950:  MOV     W3,W8
0952:  MOV     W7,W9
0954:  MOV     W7,W12
0956:  MOV     #7FF,W13
0958:  BCLR.B  42.1
095A:  BCLR.B  42.0
095C:  ASR     W8,#4,W8
095E:  AND     W13,W8,W8
0960:  CP0     W8
0962:  BRA     Z,ADC
0964:  BCLR.B  42.1
0966:  BCLR.B  42.0
0968:  ASR     W9,#4,W9
096A:  AND     W13,W9,W9
096C:  CP0     W9
096E:  BRA     Z,AEC
0970:  CLR     W13
0972:  BCLR.B  42.1
0974:  BCLR.B  42.0
0976:  CP      W9,W8
0978:  BRA     Z,AEE
097A:  BRA     N,AFE
097C:  BCLR    W13.0
097E:  BSET    W13.1
0980:  SUB     W9,W8,W8
0982:  AND     #F,W3
0984:  BSET    W3.4
0986:  AND     #F,W7
0988:  BSET    W7.4
098A:  SUB     #34,W8
098C:  BRA     NN,9BA
098E:  ADD     #34,W8
0990:  BCLR.B  42.1
0992:  BCLR.B  42.0
0994:  RRC     W3,W3
0996:  RRC     W2,W2
0998:  RRC     W1,W1
099A:  RRC     W0,W0
099C:  DEC     W8,W8
099E:  BRA     NZ,990
09A0:  BRA     9CA
09A2:  SUB     #34,W8
09A4:  BRA     NN,9C4
09A6:  ADD     #34,W8
09A8:  BCLR.B  42.1
09AA:  BCLR.B  42.0
09AC:  RRC     W7,W7
09AE:  RRC     W6,W6
09B0:  RRC     W5,W5
09B2:  RRC     W4,W4
09B4:  DEC     W8,W8
09B6:  BRA     NZ,9A8
09B8:  BRA     9F0
09BA:  MOV     W4,W0
09BC:  MOV     W5,W1
09BE:  MOV     W6,W2
09C0:  MOV     W7,W3
09C2:  XOR     W11,W12,W12
09C4:  BTSC    W12.F
09C6:  BTG     W11.F
09C8:  BRA     ABC
09CA:  BTSS    W11.F
09CC:  BRA     A0C
09CE:  BTSC    W13.4
09D0:  MOV     W12,W11
09D2:  COM     W0,W0
09D4:  COM     W1,W1
09D6:  COM     W2,W2
09D8:  COM.B   W3L,W3L
09DA:  AND.B   #1F,W3L
09DC:  INC     W0,W0
09DE:  BRA     NZ,9EA
09E0:  INC     W1,W1
09E2:  BRA     NZ,9EA
09E4:  INC     W2,W2
09E6:  BRA     NZ,9EA
09E8:  INC.B   W3L,W3L
09EA:  BTSC    W13.4
09EC:  BRA     A52
09EE:  BRA     A0C
09F0:  BTSS    W11.F
09F2:  BRA     A0C
09F4:  COM     W4,W4
09F6:  COM     W5,W5
09F8:  COM     W6,W6
09FA:  COM.B   W7L,W7L
09FC:  AND.B   #1F,W7L
09FE:  INC     W4,W4
0A00:  BRA     NZ,A0C
0A02:  INC     W5,W5
0A04:  BRA     NZ,A0C
0A06:  INC     W6,W6
0A08:  BRA     NZ,A0C
0A0A:  INC.B   W7L,W7L
0A0C:  BCLR.B  42.1
0A0E:  BCLR.B  42.0
0A10:  ADD     W0,W4,W0
0A12:  ADDC    W1,W5,W1
0A14:  ADDC    W2,W6,W2
0A16:  ADDC.B  W3L,W7L,W3L
0A18:  BTSC    W3.5
0A1A:  BSET    W13.3
0A1C:  BTSC    W13.0
0A1E:  BRA     A32
0A20:  BTSC    W13.1
0A22:  BRA     A26
0A24:  BRA     A3C
0A26:  BTSC    W11.F
0A28:  BRA     A52
0A2A:  BTSC    W13.3
0A2C:  BRA     A80
0A2E:  BSET    W13.6
0A30:  BRA     A74
0A32:  BTSC    W11.F
0A34:  BRA     A52
0A36:  BTSC    W13.3
0A38:  BRA     A80
0A3A:  BRA     A74
0A3C:  BTSC    W11.F
0A3E:  BRA     A48
0A40:  MOV     W10,W11
0A42:  BTSC    W13.3
0A44:  BRA     A80
0A46:  BRA     ABC
0A48:  BSET    W13.4
0A4A:  XOR.B   #10,W3L
0A4C:  BTSC    W3.4
0A4E:  BRA     9CE
0A50:  MOV     W10,W11
0A52:  AND     #1F,W3
0A54:  IOR      W3,  W2,W8
0A56:  BRA     NZ,A5C
0A58:  IOR      W1,  W0,W8
0A5A:  BRA     Z,A74
0A5C:  BTSC    W3.4
0A5E:  BRA     A74
0A60:  BCLR.B  42.1
0A62:  BCLR.B  42.0
0A64:  RLC     W0,W0
0A66:  RLC     W1,W1
0A68:  RLC     W2,W2
0A6A:  RLC     W3,W3
0A6C:  DEC     W9,W9
0A6E:  BTSC.B  42.1
0A70:  BRA     AD6
0A72:  BRA     A5C
0A74:  BTSC    W13.0
0A76:  MOV     W10,W11
0A78:  BTSC    W13.1
0A7A:  MOV     W12,W11
0A7C:  BTSS    W13.5
0A7E:  BRA     ABC
0A80:  BCLR.B  42.0
0A82:  RRC.B   W3L,W3L
0A84:  RRC     W2,W2
0A86:  RRC     W1,W1
0A88:  RRC     W0,W0
0A8A:  BTSC.B  42.0
0A8C:  BSET    W13.5
0A8E:  INC     W9,W9
0A90:  BTSC.B  42.1
0A92:  BRA     AD6
0A94:  BTSS    W13.5
0A96:  BRA     AB4
0A98:  INC     W0,W0
0A9A:  BRA     NZ,AB4
0A9C:  INC     W1,W1
0A9E:  BRA     NZ,AB4
0AA0:  INC     W2,W2
0AA2:  BRA     NZ,AB4
0AA4:  INC     W3,W3
0AA6:  BRA     NZ,AB4
0AA8:  RRC.B   W3L,W3L
0AAA:  RRC     W2,W2
0AAC:  RRC     W1,W1
0AAE:  RRC     W0,W0
0AB0:  INC     W9,W9
0AB2:  BRA     Z,AD6
0AB4:  BTSC    W13.0
0AB6:  MOV     W10,W11
0AB8:  BTSC    W13.1
0ABA:  MOV     W12,W11
0ABC:  IOR      W0,  W1,W4
0ABE:  BRA     NZ,AC4
0AC0:  IOR      W2,  W3,W4
0AC2:  BRA     Z,B10
0AC4:  BCLR    W3.4
0AC6:  BCLR.B  42.1
0AC8:  BCLR.B  42.0
0ACA:  SL      W9,#4,W9
0ACC:  XOR     W9,W3,W3
0ACE:  BSET    W3.F
0AD0:  BTSS    W11.F
0AD2:  BCLR    W3.F
0AD4:  BRA     B10
0AD6:  MUL.UU  W0,#0,W0
0AD8:  MUL.UU  W2,#0,W2
0ADA:  BRA     B10
0ADC:  MOV     #8000,W8
0ADE:  BTSC    W10.F
0AE0:  XOR     W8,W7,W7
0AE2:  MOV     W5,W1
0AE4:  MOV     W4,W0
0AE6:  MOV     W6,W2
0AE8:  MOV     W7,W3
0AEA:  BRA     B10
0AEC:  BRA     B10
0AEE:  AND     #F,W7
0AF0:  BSET    W7.4
0AF2:  AND     #F,W3
0AF4:  BSET    W3.4
0AF6:  BTSC    W11.F
0AF8:  BCLR    W7.4
0AFA:  BSET    W13.2
0AFC:  BRA     9F0
0AFE:  AND     #F,W3
0B00:  BSET    W3.4
0B02:  AND     #F,W7
0B04:  BSET    W7.4
0B06:  SUB     W8,W9,W8
0B08:  ADD     W8,W9,W9
0B0A:  BCLR    W13.1
0B0C:  BSET    W13.0
0B0E:  BRA     9A2
0B10:  MOV     #1A,W8
0B12:  REPEAT  #4
0B14:  MOV     [--W15],[W8--]
0B16:  MOV     [--W15],W8
0B18:  RETURN  
*
0BE2:  MOV     W5,[W15++]
0BE4:  MOV     #C,W5
0BE6:  REPEAT  #3
0BE8:  MOV     [W5++],[W15++]
0BEA:  MOV     W0,W4
0BEC:  MOV     W1,W5
0BEE:  MOV     W2,W6
0BF0:  MOV     W3,W7
0BF2:  CLR     W0
0BF4:  CLR     W1
0BF6:  CLR     W2
0BF8:  CLR     W3
0BFA:  BCLR    W8.0
0BFC:  BTSS    W7.F
0BFE:  BRA     C10
0C00:  BSET    W8.0
0C02:  COM     W7,W7
0C04:  COM     W6,W6
0C06:  COM     W5,W5
0C08:  NEG     W4,W4
0C0A:  ADDC    W5,#0,W5
0C0C:  ADDC    W6,#0,W6
0C0E:  ADDC    W7,#0,W7
0C10:  IOR      W4,  W5,W9
0C12:  BRA     NZ,C18
0C14:  IOR      W6,  W7,W9
0C16:  BRA     Z,C42
0C18:  MOV     #473,W9
0C1A:  BTSC    W3.4
0C1C:  BRA     C34
0C1E:  BCLR.B  42.0
0C20:  RLC     W4,W4
0C22:  RLC     W5,W5
0C24:  RLC     W6,W6
0C26:  RLC     W7,W7
0C28:  RLC     W0,W0
0C2A:  RLC     W1,W1
0C2C:  RLC     W2,W2
0C2E:  RLC     W3,W3
0C30:  DEC     W9,W9
0C32:  BRA     NZ,C1A
0C34:  SL      W9,#4,W9
0C36:  BCLR.B  42.0
0C38:  BCLR    W9.F
0C3A:  BCLR    W3.4
0C3C:  XOR     W9,W3,W3
0C3E:  BTSC    W8.0
0C40:  BSET    W3.F
0C42:  MOV     #12,W5
0C44:  REPEAT  #3
0C46:  MOV     [--W15],[W5--]
0C48:  MOV     [--W15],W5
0C4A:  RETURN  
0C4C:  MOV     W8,[W15++]
0C4E:  MOV     W9,[W15++]
0C50:  MOV     W10,[W15++]
0C52:  XOR     W3,W7,W9
0C54:  BTSS    W9.F
0C56:  BRA     C64
0C58:  BCLR.B  42.0
0C5A:  BCLR.B  42.1
0C5C:  BTSS    W3.F
0C5E:  BRA     CC8
0C60:  BSET.B  42.0
0C62:  BRA     CC8
0C64:  MOV     #7FF,W10
0C66:  MOV     W3,W8
0C68:  MOV     W7,W9
0C6A:  ASR     W8,#4,W8
0C6C:  AND     W10,W8,W8
0C6E:  ASR     W9,#4,W9
0C70:  AND     W10,W9,W9
0C72:  SUB     W9,W8,W10
0C74:  BRA     Z,C80
0C76:  BTSS    W3.F
0C78:  BRA     CC8
0C7A:  MOV     #1,W0
0C7C:  XOR.B   42
0C7E:  BRA     CC8
0C80:  MOV     W3,W8
0C82:  MOV     W7,W9
0C84:  AND     #1F,W3
0C86:  AND     #1F,W7
0C88:  BCLR    W3.4
0C8A:  BCLR    W7.4
0C8C:  SUB.B   W7L,W3L,W10L
0C8E:  BRA     Z,C9A
0C90:  BTSS    W8.F
0C92:  BRA     CC8
0C94:  MOV     #1,W0
0C96:  XOR.B   42
0C98:  BRA     CC8
0C9A:  SUB     W6,W2,W10
0C9C:  BRA     Z,CA8
0C9E:  BTSS    W8.F
0CA0:  BRA     CC8
0CA2:  MOV     #1,W0
0CA4:  XOR.B   42
0CA6:  BRA     CC8
0CA8:  SUB     W5,W1,W10
0CAA:  BRA     Z,CB6
0CAC:  BTSS    W8.F
0CAE:  BRA     CC8
0CB0:  MOV     #1,W0
0CB2:  XOR.B   42
0CB4:  BRA     CC8
0CB6:  SUB     W4,W0,W10
0CB8:  BRA     Z,CC4
0CBA:  BTSS    W8.F
0CBC:  BRA     CC8
0CBE:  MOV     #1,W0
0CC0:  XOR.B   42
0CC2:  BRA     CC8
0CC4:  BCLR.B  42.0
0CC6:  BRA     CC8
0CC8:  MOV     [--W15],W10
0CCA:  MOV     [--W15],W9
0CCC:  MOV     [--W15],W8
0CCE:  RETURN  
*
0FB4:  MOV     W5,[W15++]
0FB6:  MOV     #C,W5
0FB8:  REPEAT  #5
0FBA:  MOV     [W5++],[W15++]
0FBC:  MOV     W3,W8
0FBE:  MOV     W2,W7
0FC0:  MOV     W1,W6
0FC2:  MOV     W0,W5
0FC4:  MOV     W3,W9
0FC6:  MOV     #473,W11
0FC8:  ASR     W3,#4,W3
0FCA:  MOV     #7FF,W10
0FCC:  AND     W10,W3,W3
0FCE:  SUB     W11,W3,W11
0FD0:  AND     #1F,W8
0FD2:  BSET    W8.4
0FD4:  CLR     W0
0FD6:  CLR     W1
0FD8:  CLR     W2
0FDA:  CLR     W3
0FDC:  BCLR.B  42.0
0FDE:  RRC     W8,W8
0FE0:  RRC     W7,W7
0FE2:  RRC     W6,W6
0FE4:  RRC     W5,W5
0FE6:  RRC     W3,W3
0FE8:  RRC     W2,W2
0FEA:  RRC     W1,W1
0FEC:  RRC     W0,W0
0FEE:  DEC     W11,W11
0FF0:  BRA     NZ,FDC
0FF2:  BTSS    W9.F
0FF4:  BRA     1008
0FF6:  COM     W0,W0
0FF8:  COM     W1,W1
0FFA:  COM     W2,W2
0FFC:  COM     W3,W3
0FFE:  INC     W0,W0
1000:  ADDC    #0,W1
1002:  ADDC    #0,W2
1004:  ADDC    #0,W3
1006:  BRA     1008
1008:  MOV     #16,W5
100A:  REPEAT  #5
100C:  MOV     [--W15],[W5--]
100E:  MOV     [--W15],W5
1010:  RETURN  
.................... 
.................... #list
.................... 
.................... 
.................... //#fuses PR,HS,NOWDT
.................... #fuses PR_PLL,HS,NOWDT 
.................... #device ADC=12
.................... #use delay(clock=40MHz)
.................... //!#include <serial.h>
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
*
0CD0:  MOV     W5,[W15++]
0CD2:  MOV     W6,[W15++]
0CD4:  MOV     W7,[W15++]
0CD6:  MOV     W8,[W15++]
0CD8:  CLR     D42
0CDA:  CLR     D44
0CDC:  CLR     D46
0CDE:  MOV     #3FF0,W4
0CE0:  MOV     W4,D48
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
0CE2:  MOV     #FF1F,W4
0CE4:  MOV     W4,D52
0CE6:  SETM    D54
0CE8:  SETM    D56
0CEA:  MOV     #BFDF,W4
0CEC:  MOV     W4,D58
0CEE:  MOV     #1C35,W4
0CF0:  MOV     W4,D5A
0CF2:  MOV     #5555,W4
0CF4:  MOV     W4,D5C
0CF6:  MOV     #5555,W4
0CF8:  MOV     W4,D5E
0CFA:  MOV     #3FA5,W4
0CFC:  MOV     W4,D60
0CFE:  MOV     #3F1C,W4
0D00:  MOV     W4,D62
0D02:  MOV     #16A7,W4
0D04:  MOV     W4,D64
0D06:  MOV     #C16C,W4
0D08:  MOV     W4,D66
0D0A:  MOV     #BF56,W4
0D0C:  MOV     W4,D68
0D0E:  MOV     #F3E6,W4
0D10:  MOV     W4,D6A
0D12:  MOV     #D65,W4
0D14:  MOV     W4,D6C
0D16:  MOV     #1A0,W4
0D18:  MOV     W4,D6E
0D1A:  MOV     #3EFA,W4
0D1C:  MOV     W4,D70
0D1E:  MOV     #A3E,W4
0D20:  MOV     W4,D72
0D22:  MOV     #3931,W4
0D24:  MOV     W4,D74
0D26:  MOV     #7E4C,W4
0D28:  MOV     W4,D76
0D2A:  MOV     #BE92,W4
0D2C:  MOV     W4,D78
0D2E:  MOV     #DDFB,W4
0D30:  MOV     W4,D7A
0D32:  MOV     #2B77,W4
0D34:  MOV     W4,D7C
0D36:  MOV     #EDB1,W4
0D38:  MOV     W4,D7E
0D3A:  MOV     #3E21,W4
0D3C:  MOV     W4,D80
0D3E:  MOV     #6FCC,W4
0D40:  MOV     W4,D82
0D42:  MOV     #8FF7,W4
0D44:  MOV     W4,D84
0D46:  MOV     #C610,W4
0D48:  MOV     W4,D86
0D4A:  MOV     #BDA8,W4
0D4C:  MOV     W4,D88
0D4E:  MOV     #124C,W4
0D50:  MOV     W4,D8A
0D52:  MOV     #8E1C,W4
0D54:  MOV     W4,D8C
0D56:  MOV     #3AF9,W4
0D58:  MOV     W4,D8E
0D5A:  MOV     #3CF3,W4
0D5C:  MOV     W4,D90
0D5E:  MOV     #7676,W4
0D60:  MOV     W4,D92
0D62:  MOV     #350F,W4
0D64:  MOV     W4,D94
0D66:  MOV     #C0DE,W4
0D68:  MOV     W4,D96
0D6A:  MOV     #3CF0,W4
0D6C:  MOV     W4,D98
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
0D6E:  MOV     D28,W0
0D70:  MOV     D2A,W1
0D72:  MOV     D2C,W2
0D74:  MOV     D2E,W3
0D76:  MOV     #0,W4
0D78:  MOV     #0,W5
0D7A:  MOV     #0,W6
0D7C:  MOV     #0,W7
0D7E:  CALL    C4C
0D82:  BRA     NC,D8E
0D84:  MOV     #D28,W0
0D86:  MOV     #D28,W1
0D88:  REPEAT  #7
0D8A:  MOV     [W0++],[W1++]
0D8C:  BTG.B   D2F.7
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0D8E:  MOV     D28,W0
0D90:  MOV     D2A,W1
0D92:  MOV     D2C,W2
0D94:  MOV     D2E,W3
0D96:  MOV     #C884,W4
0D98:  MOV     #6DC9,W5
0D9A:  MOV     #5F30,W6
0D9C:  MOV     #3FE4,W7
0D9E:  CALL    6EE
0DA2:  CALL    7FE
0DA6:  MOV.B   W0L,D30
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
0DA8:  MOV     D28,W0
0DAA:  MOV     D2A,W1
0DAC:  MOV     D2C,W2
0DAE:  MOV     D2E,W3
0DB0:  MOV     #C884,W4
0DB2:  MOV     #6DC9,W5
0DB4:  MOV     #5F30,W6
0DB6:  MOV     #3FE4,W7
0DB8:  CALL    6EE
0DBC:  MOV     W0,W5
0DBE:  MOV     W1,W6
0DC0:  MOV     W2,W7
0DC2:  MOV     W3,W8
0DC4:  MOV     #0,W1
0DC6:  MOV     #0,W2
0DC8:  MOV     #0,W3
0DCA:  MOV.B   D30,W0L
0DCC:  CLR.B   1
0DCE:  CALL    BE2
0DD2:  BSET.B  43.0
0DD4:  MOV     W5,[W15++]
0DD6:  MOV     W6,[W15++]
0DD8:  MOV     W7,[W15++]
0DDA:  MOV     W0,W4
0DDC:  MOV     W5,W0
0DDE:  MOV     W1,W5
0DE0:  MOV     W6,W1
0DE2:  MOV     W2,W6
0DE4:  MOV     W7,W2
0DE6:  MOV     W3,W7
0DE8:  MOV     W8,W3
0DEA:  CALL    92C
0DEE:  MOV     [--W15],W7
0DF0:  MOV     [--W15],W6
0DF2:  MOV     [--W15],W5
0DF4:  MOV     W0,D4A
0DF6:  MOV     W1,D4C
0DF8:  MOV     W2,D4E
0DFA:  MOV     W3,D50
....................    quad = quad % 4;                    // quadrant (0 to 3)
0DFC:  MOV.B   D30,W0L
0DFE:  AND.B   W0L,#3,W0L
0E00:  MOV.B   W0L,D30
.................... 
....................    if (quad == 0 || quad == 2)
0E02:  CP0.B   D30
0E04:  BRA     Z,E0C
0E06:  MOV     D30,W4
0E08:  CP.B    W4L,#2
0E0A:  BRA     NZ,E2A
....................       t = frac * PI_DIV_BY_TWO;
0E0C:  MOV     D4A,W0
0E0E:  MOV     D4C,W1
0E10:  MOV     D4E,W2
0E12:  MOV     D50,W3
0E14:  MOV     #2D18,W4
0E16:  MOV     #5444,W5
0E18:  MOV     #21FB,W6
0E1A:  MOV     #3FF9,W7
0E1C:  CALL    6EE
0E20:  MOV     W0,D3A
0E22:  MOV     W1,D3C
0E24:  MOV     W2,D3E
0E26:  MOV     W3,D40
0E28:  BRA     EBE
....................    else if (quad == 1)
0E2A:  MOV     D30,W4
0E2C:  CP.B    W4L,#1
0E2E:  BRA     NZ,E78
....................       t = (1-frac) * PI_DIV_BY_TWO;
0E30:  BSET.B  43.0
0E32:  MOV     #0,W0
0E34:  MOV     #0,W1
0E36:  MOV     #0,W2
0E38:  MOV     #3FF0,W3
0E3A:  MOV     D4A,W4
0E3C:  MOV     D4C,W5
0E3E:  MOV     D4E,W6
0E40:  MOV     D50,W7
0E42:  CALL    92C
0E46:  MOV     W0,W5
0E48:  MOV     W1,W6
0E4A:  MOV     W2,W7
0E4C:  MOV     W3,W8
0E4E:  MOV     W5,[W15++]
0E50:  MOV     W6,[W15++]
0E52:  MOV     W7,[W15++]
0E54:  MOV     W5,W0
0E56:  MOV     W6,W1
0E58:  MOV     W7,W2
0E5A:  MOV     W8,W3
0E5C:  MOV     #2D18,W4
0E5E:  MOV     #5444,W5
0E60:  MOV     #21FB,W6
0E62:  MOV     #3FF9,W7
0E64:  CALL    6EE
0E68:  MOV     [--W15],W7
0E6A:  MOV     [--W15],W6
0E6C:  MOV     [--W15],W5
0E6E:  MOV     W0,D3A
0E70:  MOV     W1,D3C
0E72:  MOV     W2,D3E
0E74:  MOV     W3,D40
0E76:  BRA     EBE
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0E78:  BSET.B  43.0
0E7A:  MOV     D4A,W0
0E7C:  MOV     D4C,W1
0E7E:  MOV     D4E,W2
0E80:  MOV     D50,W3
0E82:  MOV     #0,W4
0E84:  MOV     #0,W5
0E86:  MOV     #0,W6
0E88:  MOV     #3FF0,W7
0E8A:  CALL    92C
0E8E:  MOV     W0,W5
0E90:  MOV     W1,W6
0E92:  MOV     W2,W7
0E94:  MOV     W3,W8
0E96:  MOV     W5,[W15++]
0E98:  MOV     W6,[W15++]
0E9A:  MOV     W7,[W15++]
0E9C:  MOV     W5,W0
0E9E:  MOV     W6,W1
0EA0:  MOV     W7,W2
0EA2:  MOV     W8,W3
0EA4:  MOV     #2D18,W4
0EA6:  MOV     #5444,W5
0EA8:  MOV     #21FB,W6
0EAA:  MOV     #3FF9,W7
0EAC:  CALL    6EE
0EB0:  MOV     [--W15],W7
0EB2:  MOV     [--W15],W6
0EB4:  MOV     [--W15],W5
0EB6:  MOV     W0,D3A
0EB8:  MOV     W1,D3C
0EBA:  MOV     W2,D3E
0EBC:  MOV     W3,D40
.................... 
....................    y = 1.0;
0EBE:  CLR     D32
0EC0:  CLR     D34
0EC2:  CLR     D36
0EC4:  MOV     #3FF0,W4
0EC6:  MOV     W4,D38
....................    t = t * t;
0EC8:  MOV     D3A,W0
0ECA:  MOV     D3C,W1
0ECC:  MOV     D3E,W2
0ECE:  MOV     D40,W3
0ED0:  MOV     D3A,W4
0ED2:  MOV     D3C,W5
0ED4:  MOV     D3E,W6
0ED6:  MOV     D40,W7
0ED8:  CALL    6EE
0EDC:  MOV     W0,D3A
0EDE:  MOV     W1,D3C
0EE0:  MOV     W2,D3E
0EE2:  MOV     W3,D40
....................    for (i = 0; i <= 8; i++)
0EE4:  CLR.B   D31
0EE6:  MOV     D30,W4
0EE8:  LSR     W4,#8,W4
0EEA:  CP.B    W4L,#8
0EEC:  BRA     GTU,F50
....................    {
....................       t2 = t2 * t;
0EEE:  MOV     D42,W0
0EF0:  MOV     D44,W1
0EF2:  MOV     D46,W2
0EF4:  MOV     D48,W3
0EF6:  MOV     D3A,W4
0EF8:  MOV     D3C,W5
0EFA:  MOV     D3E,W6
0EFC:  MOV     D40,W7
0EFE:  CALL    6EE
0F02:  MOV     W0,D42
0F04:  MOV     W1,D44
0F06:  MOV     W2,D46
0F08:  MOV     W3,D48
....................       y = y + p_64[i] * t2;
0F0A:  MOV.B   D31,W0L
0F0C:  CLR.B   1
0F0E:  SL      W0,#3,W0
0F10:  MOV     #D52,W4
0F12:  ADD     W0,W4,W0
0F14:  MOV     W0,W5
0F16:  MOV     W5,[W15++]
0F18:  MOV     [W5],W0
0F1A:  MOV     [++W5],W1
0F1C:  MOV     [++W5],W2
0F1E:  MOV     [++W5],W3
0F20:  MOV     D42,W4
0F22:  MOV     D44,W5
0F24:  MOV     D46,W6
0F26:  MOV     D48,W7
0F28:  CALL    6EE
0F2C:  MOV     [--W15],W5
0F2E:  BCLR.B  43.0
0F30:  MOV     W0,W4
0F32:  MOV     W1,W5
0F34:  MOV     W2,W6
0F36:  MOV     W3,W7
0F38:  MOV     D32,W0
0F3A:  MOV     D34,W1
0F3C:  MOV     D36,W2
0F3E:  MOV     D38,W3
0F40:  CALL    92C
0F44:  MOV     W0,D32
0F46:  MOV     W1,D34
0F48:  MOV     W2,D36
0F4A:  MOV     W3,D38
0F4C:  INC.B   0D31
0F4E:  BRA     EE6
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0F50:  MOV     D30,W4
0F52:  CP.B    W4L,#2
0F54:  BRA     Z,F5C
0F56:  MOV     D30,W4
0F58:  CP.B    W4L,#1
0F5A:  BRA     NZ,F66
....................       y = -y;  // correct sign
0F5C:  MOV     #D32,W0
0F5E:  MOV     #D32,W1
0F60:  REPEAT  #7
0F62:  MOV     [W0++],[W1++]
0F64:  BTG.B   D39.7
.................... 
....................    return (y);
0F66:  MOV     D32,W0
0F68:  MOV     D34,W1
0F6A:  MOV     D36,W2
0F6C:  MOV     D38,W3
0F6E:  MOV     [--W15],W8
0F70:  MOV     [--W15],W7
0F72:  MOV     [--W15],W6
0F74:  MOV     [--W15],W5
0F76:  RETURN  
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
0F78:  MOV     W5,[W15++]
0F7A:  MOV     W6,[W15++]
0F7C:  MOV     W7,[W15++]
0F7E:  MOV     W8,[W15++]
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
0F80:  BSET.B  43.0
0F82:  MOV     D18,W0
0F84:  MOV     D1A,W1
0F86:  MOV     D1C,W2
0F88:  MOV     D1E,W3
0F8A:  MOV     #2D18,W4
0F8C:  MOV     #5444,W5
0F8E:  MOV     #21FB,W6
0F90:  MOV     #3FF9,W7
0F92:  CALL    92C
0F96:  MOV     W0,W5
0F98:  MOV     W1,W6
0F9A:  MOV     W2,W7
0F9C:  MOV     W3,W8
0F9E:  MOV     W5,D28
0FA0:  MOV     W6,D2A
0FA2:  MOV     W7,D2C
0FA4:  MOV     W8,D2E
0FA6:  CALL    CD0
0FAA:  MOV     [--W15],W8
0FAC:  MOV     [--W15],W7
0FAE:  MOV     [--W15],W6
0FB0:  MOV     [--W15],W5
0FB2:  RETURN  
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #define P1TCON 0x01C0
.................... #define P1TMR 0x01C2
.................... #define P1TPER 0x01C4
.................... #define P1SECMP 0x01C6
.................... #define PWM1CON1 0x01C8 
.................... #define PWM1CON2 0x01CA
.................... #define P1DTCON1 0x01CC
.................... #define P1DTCON2 0x01CE
.................... #define P1FLTACON 0x01D0
.................... #define P1OVDCON 0x01D4 
.................... #define P1DC1 0x01D6 
.................... #define P1DC2 0x01D8
.................... #define P1DC3 0x01DA
.................... #define IPC14 0x00C0
.................... #define CLKDIV 0x0744
.................... #define PLLFBD 0x0746
.................... 
.................... 
.................... #define Tick_Out PIN_B0
.................... #define LED_PIN PIN_B5
.................... //!#define TOGGLE_PIN PIN_B1
.................... //!#define ADC_TIME_CHECK PIN_B1
.................... #define Sync_Out PIN_A4
.................... #define Shut_Down PIN_A1
.................... #define Div_pin PIN_B2
.................... #define ADC_pin sAN5
.................... 
.................... #define voltage_offset 624//1248
.................... #define low_duty_limit 32
.................... #define high_duty_limit 1217
.................... #define SLOPE 2.7
.................... 
.................... #define break_level 5
.................... #define sustain_level 200
.................... #define break_amplitude 0
.................... #define pedestal_amplitude 10
.................... #define peak_amplitude 550
.................... 
.................... #define throttle_PIN PIN_B1
.................... 
.................... #define Voltage_Current_PIN   PIN_B11
.................... 
.................... #use    fast_io(a)
.................... #use    fast_io(b)
.................... 
.................... const unsigned max_samples=30.0;
.................... unsigned int16 duty[3]={0,0,0},sample=0;
.................... signed int16 sine_table[max_samples];
.................... unsigned int16 sine_index,phase_angle[3] = {0 , 0 , 0};
.................... double theeta;
.................... signed int32 reference[3] = {0,0,0};
.................... 
.................... int1 tick=0;
.................... signed int16 peak_voltage =0;//  1184; 
.................... const unsigned max_freq = 250; //Hz
.................... const double per_clock_tick = 0.006405; //ms
.................... unsigned int16 timer_table[max_freq+1];
.................... unsigned int16 gain_table[256];
.................... unsigned int16 raw_adc =0 ;
.................... signed int16 throttle_level = 0;
.................... unsigned int16 freq = 1;
.................... unsigned int16 temp = 0;
.................... 
.................... int8 tick_count = 0;
.................... int16 millis_count = 0;
.................... 
.................... void timer_reload(void);
.................... void voltage_gain(void);
.................... 
.................... #int_RDA
.................... void  RDA_isr(void) 
*
0200:  PUSH    42
0202:  PUSH    36
0204:  PUSH    32
0206:  MOV     W0,[W15++]
0208:  MOV     #2,W0
020A:  REPEAT  #C
020C:  MOV     [W0++],[W15++]
.................... {
.................... //!     if(U1STA.URXDA == 1)
.................... //!     {
.................... //!       //   IFS0.U1RXIF = 0; // Clear RX Interrupt flag
.................... //!          rx_data = U1RXREG;
.................... //!          U1TXREG=rx_data;
.................... //!          startup_gain=rx_data;
.................... //!     }        
.................... }
020E:  BCLR.B  85.3
0210:  MOV     #1A,W0
0212:  REPEAT  #C
0214:  MOV     [--W15],[W0--]
0216:  MOV     [--W15],W0
0218:  POP     32
021A:  POP     36
021C:  POP     42
021E:  RETFIE  
.................... #int_TBE
.................... void  TBE_isr(void) 
0220:  BCLR.B  85.4
0222:  PUSH    42
0224:  PUSH    36
0226:  PUSH    32
0228:  MOV     W0,[W15++]
022A:  MOV     #2,W0
022C:  REPEAT  #C
022E:  MOV     [W0++],[W15++]
.................... {
....................    //IFS0.U1TXIF = 0; // Clear TX Interrupt flag
....................    //U1TXREG = 'a'; // Transmit one character  
.................... }
0230:  MOV     #1A,W0
0232:  REPEAT  #C
0234:  MOV     [--W15],[W0--]
0236:  MOV     [--W15],W0
0238:  POP     32
023A:  POP     36
023C:  POP     42
023E:  RETFIE  
.................... #int_UART1E
.................... void  UART1E_isr(void) 
0240:  PUSH    42
0242:  PUSH    36
0244:  PUSH    32
0246:  MOV     W0,[W15++]
0248:  MOV     #2,W0
024A:  REPEAT  #C
024C:  MOV     [W0++],[W15++]
.................... {
....................    /* Must clear the overrun error to keep UART receiving */
....................   // if(U1STA.OERR == 1)
....................    {
....................      // U1STA.OERR = 0;
....................    }
.................... }
.................... 
024E:  BCLR.B  8C.1
0250:  MOV     #1A,W0
0252:  REPEAT  #C
0254:  MOV     [--W15],[W0--]
0256:  MOV     [--W15],W0
0258:  POP     32
025A:  POP     36
025C:  POP     42
025E:  RETFIE  
.................... #int_EXT0
.................... void  EXT0_isr(void) 
0260:  PUSH    42
0262:  PUSH    36
0264:  PUSH    32
0266:  MOV     W0,[W15++]
0268:  MOV     #2,W0
026A:  REPEAT  #C
026C:  MOV     [W0++],[W15++]
.................... {
.................... }
.................... 
026E:  BCLR.B  84.0
0270:  MOV     #1A,W0
0272:  REPEAT  #C
0274:  MOV     [--W15],[W0--]
0276:  MOV     [--W15],W0
0278:  POP     32
027A:  POP     36
027C:  POP     42
027E:  RETFIE  
.................... #INT_TIMER2
.................... void  timer2_isr(void) 
0280:  PUSH    42
0282:  PUSH    36
0284:  PUSH    32
0286:  MOV     W0,[W15++]
0288:  MOV     #2,W0
028A:  REPEAT  #C
028C:  MOV     [W0++],[W15++]
.................... {
....................    tick = 1;
028E:  BSET.B  910.0
....................   
.................... 
.................... }
0290:  BCLR.B  84.7
0292:  MOV     #1A,W0
0294:  REPEAT  #C
0296:  MOV     [--W15],[W0--]
0298:  MOV     [--W15],W0
029A:  POP     32
029C:  POP     36
029E:  POP     42
02A0:  RETFIE  
.................... #int_PWM1
.................... void  PWM1_isr(void) 
02A2:  PUSH    42
02A4:  PUSH    36
02A6:  PUSH    32
02A8:  MOV     W0,[W15++]
02AA:  MOV     #2,W0
02AC:  REPEAT  #C
02AE:  MOV     [W0++],[W15++]
.................... {
....................    
.................... //!    output_bit(throttle_PIN , 1);
.................... //!    delay_us(10);
.................... //!      tick =1;
....................    tick_count++;
02B0:  INC.B   0911
....................    if(tick_count >= 8)
02B2:  MOV     910,W4
02B4:  LSR     W4,#8,W4
02B6:  CP.B    W4L,#8
02B8:  BRA     LT,30E
....................    {  
....................          millis_count++;
02BA:  INC     0D12
....................          output_bit(throttle_PIN , 1);
02BC:  BSET.B  2CC.1
....................          raw_adc = read_adc();
02BE:  BCLR.B  320.0
02C0:  BSET.B  320.1
02C2:  BTSS.B  320.0
02C4:  BRA     2C2
02C6:  PUSH    300
02C8:  POP     D0A
....................          raw_adc = raw_adc >> 2;
02CA:  LSR     D0A
02CC:  LSR     D0A
....................          throttle_level = raw_adc;  
02CE:  PUSH    D0A
02D0:  POP     D0C
....................          if (throttle_level > 255)
02D2:  MOV     D0C,W4
02D4:  MOV     #FF,W3
02D6:  CP      W3,W4
02D8:  BRA     GE,2DE
....................          {
....................             throttle_level = 255;
02DA:  MOV     #FF,W4
02DC:  MOV     W4,D0C
....................          }
....................          if (throttle_level < 0)
02DE:  MOV     D0C,W4
02E0:  CP      W4,#0
02E2:  BRA     GE,2E6
....................          {
....................             throttle_level = 0;
02E4:  CLR     D0C
....................          }
....................          freq = throttle_level - 5 ;
02E6:  MOV     D0C,W4
02E8:  SUB     W4,#5,W0
02EA:  MOV     W0,D0E
....................          peak_voltage = gain_table[throttle_level];
02EC:  MOV     D0C,W4
02EE:  MUL.UU  W4,#2,W0
02F0:  MOV     #B0A,W4
02F2:  ADD     W0,W4,W0
02F4:  MOV     [W0],[W15++]
02F6:  POP     912
....................          setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64 , timer_table[freq]);
02F8:  MOV     D0E,W0
02FA:  SL      W0,#1,W0
02FC:  MOV     #914,W4
02FE:  ADD     W0,W4,W0
0300:  MOV     [W0],W5
0302:  CLR     104
0304:  MOV     W5,102
0306:  MOV     #8020,W4
0308:  MOV     W4,104
....................          output_bit(throttle_PIN , 0);
030A:  BCLR.B  2CC.1
....................          
.................... //!         tick = 1;
....................          tick_count=0;
030C:  CLR.B   911
....................    
....................    }
....................    if (millis_count >= 500) {
030E:  MOV     D12,W4
0310:  MOV     #1F4,W3
0312:  CP      W3,W4
0314:  BRA     GT,31A
....................       output_toggle(LED_PIN);
0316:  BTG.B   2CC.5
....................       millis_count = 0;
0318:  CLR     D12
....................    }
.................... //!
.................... //!   output_bit(throttle_PIN , 0);
.................... }
031A:  BCLR.B  8B.1
031C:  MOV     #1A,W0
031E:  REPEAT  #C
0320:  MOV     [--W15],[W0--]
0322:  MOV     [--W15],W0
0324:  POP     32
0326:  POP     36
0328:  POP     42
032A:  RETFIE  
.................... #INT_TIMER1
.................... void  timer1_isr(void) 
*
036E:  PUSH    42
0370:  PUSH    36
0372:  PUSH    32
0374:  MOV     W0,[W15++]
0376:  MOV     #2,W0
0378:  REPEAT  #C
037A:  MOV     [W0++],[W15++]
.................... {
.................... 
.................... //!   output_toggle(TOGGLE_PIN);
....................    output_bit(Tick_Out,1);
037C:  BSET.B  2CC.0
.................... //!   set_adc_channel(5);
....................    sample = (sample+1)%max_samples;
037E:  MOV     8B6,W4
0380:  ADD     W4,#1,W5
0382:  MOV     #1E,W4
0384:  REPEAT  #11
0386:  DIV.U   W5,W4
0388:  MOV     W1,8B6
....................    phase_angle[0] = sample;
038A:  PUSH    8B6
038C:  POP     8F6
....................    phase_angle[1] = (sample+10)%max_samples;
038E:  MOV     8B6,W4
0390:  ADD     W4,#A,W5
0392:  MOV     #1E,W4
0394:  REPEAT  #11
0396:  DIV.U   W5,W4
0398:  MOV     W1,8F8
....................    phase_angle[2] = (sample+20)%max_samples;
039A:  MOV     8B6,W4
039C:  ADD     W4,#14,W5
039E:  MOV     #1E,W4
03A0:  REPEAT  #11
03A2:  DIV.U   W5,W4
03A4:  MOV     W1,8FA
.................... 
....................    for (int i = 0 ; i < 3 ; i++) {
03A6:  CLR     DDA
03A8:  MOV     DDA,W4
03AA:  CP      W4,#3
03AC:  BRA     GE,544
....................       
....................       reference[i] = sine_table[phase_angle[i]];
03AE:  MOV     DDA,W4
03B0:  MUL.UU  W4,#4,W0
03B2:  MOV     #904,W4
03B4:  ADD     W0,W4,W5
03B6:  MOV     DDA,W4
03B8:  MUL.UU  W4,#2,W0
03BA:  MOV     #8F6,W4
03BC:  ADD     W0,W4,W0
03BE:  MOV     [W0],W6
03C0:  SL      W6,#1,W0
03C2:  MOV     #8B8,W4
03C4:  ADD     W0,W4,W0
03C6:  MOV     W0,W4
03C8:  MOV     [W4],W0
03CA:  CLR     W1
03CC:  BTSC    W0.F
03CE:  SETM    W1
03D0:  MOV     #0,W4
03D2:  MOV     [W4++],[W5++]
03D4:  MOV     [W4++],[W5++]
....................       reference[i] = reference[i] * peak_voltage;
03D6:  MOV     DDA,W4
03D8:  MUL.UU  W4,#4,W0
03DA:  MOV     #904,W4
03DC:  ADD     W0,W4,W5
03DE:  MOV     DDA,W4
03E0:  MUL.UU  W4,#4,W0
03E2:  MOV     #904,W4
03E4:  ADD     W0,W4,W0
03E6:  MOV     #C,W4
03E8:  MOV     [W0++],[W4++]
03EA:  MOV     [W0++],[W4++]
03EC:  MOV     912,W0
03EE:  CLR     W1
03F0:  BTSC    W0.F
03F2:  SETM    W1
03F4:  MOV     W0,W2
03F6:  MOV     W1,W3
03F8:  MOV     W6,W0
03FA:  MOV     W7,W1
03FC:  CALL    32C
0400:  MOV     #0,W4
0402:  MOV     [W4++],[W5++]
0404:  MOV     [W4++],[W5++]
....................       if( reference[i] > 0)
0406:  MOV     DDA,W4
0408:  MUL.UU  W4,#4,W0
040A:  MOV     #904,W4
040C:  ADD     W0,W4,W0
040E:  MOV     #A,W4
0410:  MOV     [W0++],[W4++]
0412:  MOV     [W0++],[W4++]
0414:  CP      W6,#0
0416:  BRA     LT,444
0418:  BRA     GT,41E
041A:  CP      W5,#0
041C:  BRA     LEU,444
....................       {
....................          reference[i] = reference[i] >> 8; 
041E:  MOV     DDA,W4
0420:  MUL.UU  W4,#4,W0
0422:  MOV     #904,W4
0424:  ADD     W0,W4,W5
0426:  MOV     DDA,W4
0428:  MUL.UU  W4,#4,W0
042A:  MOV     #904,W4
042C:  ADD     W0,W4,W0
042E:  MOV     #C,W4
0430:  MOV     [W0++],[W4++]
0432:  MOV     [W0++],[W4++]
0434:  MOV.B   D,W0L
0436:  MOV.B   W0L,[W5]
0438:  MOV.B   W7L,[W5+#1]
043A:  MOV.B   F,W0L
043C:  MOV.B   W0L,[W5+#2]
043E:  MOV.B   #0,W0L
0440:  MOV.B   W0L,[W5+#3]
....................       }
0442:  BRA     4C0
....................       else if( reference[i] < 0)
0444:  MOV     DDA,W4
0446:  MUL.UU  W4,#4,W0
0448:  MOV     #904,W4
044A:  ADD     W0,W4,W0
044C:  MOV     #A,W4
044E:  MOV     [W0++],[W4++]
0450:  MOV     [W0++],[W4++]
0452:  CP      W6,#0
0454:  BRA     GT,4C0
0456:  BRA     LT,45C
0458:  CP      W5,#0
045A:  BRA     C,4C0
....................       {
....................          reference[i] = 0 - reference[i];
045C:  MOV     DDA,W4
045E:  MUL.UU  W4,#4,W0
0460:  MOV     #904,W4
0462:  ADD     W0,W4,W5
0464:  MOV     DDA,W4
0466:  MUL.UU  W4,#4,W0
0468:  MOV     #904,W4
046A:  ADD     W0,W4,W0
046C:  MOV     W0,W4
046E:  MOV     #0,W3
0470:  MOV     [W4++],[W3++]
0472:  MOV     [W4++],[W3++]
0474:  MOV     #0,W4
0476:  SUB     W4,W0,[W5]
0478:  MOV     #0,W4
047A:  SUBB    W4,W1,[++W5]
....................          reference[i] = reference[i] >> 8;
047C:  MOV     DDA,W4
047E:  MUL.UU  W4,#4,W0
0480:  MOV     #904,W4
0482:  ADD     W0,W4,W5
0484:  MOV     DDA,W4
0486:  MUL.UU  W4,#4,W0
0488:  MOV     #904,W4
048A:  ADD     W0,W4,W0
048C:  MOV     #C,W4
048E:  MOV     [W0++],[W4++]
0490:  MOV     [W0++],[W4++]
0492:  MOV.B   D,W0L
0494:  MOV.B   W0L,[W5]
0496:  MOV.B   W7L,[W5+#1]
0498:  MOV.B   F,W0L
049A:  MOV.B   W0L,[W5+#2]
049C:  MOV.B   #0,W0L
049E:  MOV.B   W0L,[W5+#3]
....................          reference[i] = 0 - reference[i];
04A0:  MOV     DDA,W4
04A2:  MUL.UU  W4,#4,W0
04A4:  MOV     #904,W4
04A6:  ADD     W0,W4,W5
04A8:  MOV     DDA,W4
04AA:  MUL.UU  W4,#4,W0
04AC:  MOV     #904,W4
04AE:  ADD     W0,W4,W0
04B0:  MOV     W0,W4
04B2:  MOV     #0,W3
04B4:  MOV     [W4++],[W3++]
04B6:  MOV     [W4++],[W3++]
04B8:  MOV     #0,W4
04BA:  SUB     W4,W0,[W5]
04BC:  MOV     #0,W4
04BE:  SUBB    W4,W1,[++W5]
....................       }
....................       
....................       reference[i] = reference[i] + voltage_offset;
04C0:  MOV     DDA,W4
04C2:  MUL.UU  W4,#4,W0
04C4:  MOV     #904,W4
04C6:  ADD     W0,W4,W5
04C8:  MOV     DDA,W4
04CA:  MUL.UU  W4,#4,W0
04CC:  MOV     #904,W4
04CE:  ADD     W0,W4,W0
04D0:  MOV     #C,W4
04D2:  MOV     [W0++],[W4++]
04D4:  MOV     [W0++],[W4++]
04D6:  MOV     #270,W4
04D8:  ADD     W6,W4,[W5]
04DA:  ADDC    W7,#0,[++W5]
....................       if(reference[i] > high_duty_limit )
04DC:  MOV     DDA,W4
04DE:  MUL.UU  W4,#4,W0
04E0:  MOV     #904,W4
04E2:  ADD     W0,W4,W0
04E4:  MOV     #A,W4
04E6:  MOV     [W0++],[W4++]
04E8:  MOV     [W0++],[W4++]
04EA:  CP      W6,#0
04EC:  BRA     LT,50E
04EE:  BRA     GT,4F6
04F0:  MOV     #4C1,W4
04F2:  CP      W4,W5
04F4:  BRA     C,50E
....................       { 
....................          reference[i] = high_duty_limit;
04F6:  MOV     DDA,W4
04F8:  MUL.UU  W4,#4,W0
04FA:  MOV     #904,W4
04FC:  ADD     W0,W4,W5
04FE:  MOV.B   #C1,W0L
0500:  MOV.B   W0L,[W5]
0502:  MOV.B   #4,W0L
0504:  MOV.B   W0L,[W5+#1]
0506:  MOV.B   #0,W0L
0508:  MOV.B   W0L,[W5+#2]
050A:  MOV.B   #0,W0L
050C:  MOV.B   W0L,[W5+#3]
....................       }
....................       if(reference[i] < low_duty_limit)
050E:  MOV     DDA,W4
0510:  MUL.UU  W4,#4,W0
0512:  MOV     #904,W4
0514:  ADD     W0,W4,W0
0516:  MOV     #A,W4
0518:  MOV     [W0++],[W4++]
051A:  MOV     [W0++],[W4++]
051C:  CP      W6,#0
051E:  BRA     GT,540
0520:  BRA     LT,528
0522:  MOV     #20,W4
0524:  CP      W4,W5
0526:  BRA     LEU,540
....................       { 
....................          reference[i] = low_duty_limit;
0528:  MOV     DDA,W4
052A:  MUL.UU  W4,#4,W0
052C:  MOV     #904,W4
052E:  ADD     W0,W4,W5
0530:  MOV.B   #20,W0L
0532:  MOV.B   W0L,[W5]
0534:  MOV.B   #0,W0L
0536:  MOV.B   W0L,[W5+#1]
0538:  MOV.B   #0,W0L
053A:  MOV.B   W0L,[W5+#2]
053C:  MOV.B   #0,W0L
053E:  MOV.B   W0L,[W5+#3]
....................       }
0540:  INC     0DDA
0542:  BRA     3A8
....................    }
....................       
.................... //!   
.................... //!    duty[0] = reference;
.................... //!    duty[1] = reference;
....................    *P1DC1 = reference[0];  *(P1DC1+1) = reference[0]>>8;
0544:  MOV.B   904,W0L
0546:  MOV.B   W0L,1D6
0548:  MOV.B   905,W0L
054A:  MOV.B   W0L,1D7
....................    *P1DC2 = reference[1];  *(P1DC2+1) = reference[1]>>8;
054C:  MOV.B   908,W0L
054E:  MOV.B   W0L,1D8
0550:  MOV.B   909,W0L
0552:  MOV.B   W0L,1D9
....................    *P1DC3 = reference[2];  *(P1DC3+1) = reference[2]>>8;
0554:  MOV.B   90C,W0L
0556:  MOV.B   W0L,1DA
0558:  MOV.B   90D,W0L
055A:  MOV.B   W0L,1DB
....................   
....................    if(sample < 15)
055C:  MOV     8B6,W4
055E:  CP      W4,#F
0560:  BRA     C,566
....................    {
....................       output_bit(Sync_Out,1);
0562:  BSET.B  2C4.4
....................    }
0564:  BRA     568
....................    else
....................    {
....................       output_bit(Sync_Out,0);
0566:  BCLR.B  2C4.4
....................    }
.................... //!   if(sample == 0)
.................... //!   {
.................... //!      tick=1;
.................... //!   }
....................    output_bit(Tick_Out,0);
0568:  BCLR.B  2CC.0
056A:  BCLR.B  84.3
056C:  MOV     #1A,W0
056E:  REPEAT  #C
0570:  MOV     [--W15],[W0--]
0572:  MOV     [--W15],W0
0574:  POP     32
0576:  POP     36
0578:  POP     42
057A:  RETFIE  
.................... }
.................... void initMCPWM(void);
.................... void fill_sine_table(void);
.................... void main()
*
1134:  MOV     #F80,W15
1136:  MOV     #FFF,W0
1138:  MOV     W0,20
113A:  NOP     
113C:  MOV     #4444,W0
113E:  MOV     W0,A4
1140:  MOV     #4444,W0
1142:  MOV     W0,A6
1144:  MOV     #4444,W0
1146:  MOV     W0,A8
1148:  BSET.B  81.7
114A:  CLR     8B6
114C:  BCLR.B  910.0
114E:  CLR     912
1150:  CLR     D0A
1152:  CLR     D0C
1154:  MOV     #1,W4
1156:  MOV     W4,D0E
1158:  CLR     D10
115A:  CLR.B   911
115C:  CLR     D12
115E:  SETM    32C
1160:  BRA     11FE
1162:  DATA    C0,06,08
1164:  DATA    00,00,00
1166:  DATA    4B,F0,3F
1168:  DATA    5C,0A,58
116A:  DATA    F6,3B,8F
116C:  DATA    00,C0,3C
116E:  DATA    8B,28,AC
1170:  DATA    3C,BE,F6
1172:  DATA    3F,D2,D5
1174:  DATA    44,16,8C
1176:  DATA    15,D7,BF
1178:  DATA    69,00,5A
117A:  DATA    2E,1B,87
117C:  DATA    99,3F,9A
117E:  DATA    5F,AD,4B
1180:  DATA    91,E4,01
1182:  DATA    C0,5D,11
1184:  DATA    2F,92,E4
1186:  DATA    81,FB,3F
1188:  DATA    38,DA,91
118A:  DATA    80,9D,C5
118C:  DATA    E0,BF,6F
118E:  DATA    12,C0,B4
1190:  DATA    C3,09,AB
1192:  DATA    3F,6B,C1
1194:  DATA    03,4E,C1
1196:  DATA    B5,45,BF
1198:  DATA    F7,40,05
119A:  DATA    FF,00,5A
119C:  DATA    EF,3F,F3
119E:  DATA    A3,E2,F7
11A0:  DATA    D7,FF,01
11A2:  DATA    40,C0,B4
11A4:  DATA    FF,05,3C
11A6:  DATA    58,FC,3F
11A8:  DATA    3B,D3,C0
11AA:  DATA    B5,BA,8C
11AC:  DATA    E2,3F,39
11AE:  DATA    D3,C7,3D
11B0:  DATA    41,79,B2
11B2:  DATA    3F,87,0D
11B4:  DATA    3C,50,D0
11B6:  DATA    AF,62,3F
11B8:  DATA    30,4B,8D
11BA:  DATA    A2,82,AA
11BC:  DATA    04,40,09
11BE:  DATA    A0,40,4A
11C0:  DATA    05,76,03
11C2:  DATA    40,EC,9E
11C4:  DATA    37,88,A6
11C6:  DATA    44,F0,3F
11C8:  DATA    8F,12,8D
11CA:  DATA    29,9A,5B
11CC:  DATA    C7,3F,0E
11CE:  DATA    E0,80,7C
11D0:  DATA    A1,D8,86
11D2:  DATA    3F,29,4B
11D4:  DATA    FB,95,C2
11D6:  DATA    37,1A,3F
11D8:  DATA    40,06,00
11DA:  DATA    C0,06,08
11DC:  DATA    F6,00,C0
11DE:  DATA    0C,09,04
11E0:  DATA    00,00,00
11E2:  INC     W2,W2
11E4:  CP      W2,#1
11E6:  BRA     NZ,11F0
11E8:  TBLRDL  [W1],W3
11EA:  TBLRDH  [W1++],W4
11EC:  MOV.B   6,W0L
11EE:  RETURN  
11F0:  CP      W2,#2
11F2:  BRA     NZ,11F8
11F4:  MOV.B   7,W0L
11F6:  RETURN  
11F8:  MOV.B   8,W0L
11FA:  CLR     W2
11FC:  RETURN  
11FE:  MOV     #0,W6
1200:  MOV     #0,W0
1202:  MOV     W0,32
1204:  MOV     #1162,W0
1206:  MOV     W0,W1
1208:  CLR     W2
120A:  CALL    11E2
120E:  MOV.B   W0L,B
1210:  CALL    11E2
1214:  MOV.B   W0L,A
1216:  CP0     W5
1218:  BRA     Z,124C
121A:  BTSS    W5.F
121C:  BRA     122C
121E:  CALL    11E2
1222:  MOV.B   W0L,D
1224:  CALL    11E2
1228:  MOV.B   W0L,C
122A:  BCLR    W5.F
122C:  BTSS    W5.E
122E:  BRA     1240
1230:  BCLR    W5.E
1232:  DEC     W5,W5
1234:  CALL    11E2
1238:  MOV.B   W0L,W7L
123A:  REPEAT  W5
123C:  MOV.B   W7L,[W6++]
123E:  BRA     120A
1240:  CALL    11E2
1244:  MOV.B   W0L,[W6++]
1246:  DEC     W5,W5
1248:  BRA     NZ,1240
124A:  BRA     120A
.................... {  
....................    timer_reload();
124C:  CALL    85C
....................    voltage_gain();
1250:  CALL    B1A
....................    fill_sine_table();
1254:  CALL    1012
....................    throttle_level = 0;
1258:  CLR     D0C
....................    freq = 1;
125A:  MOV     #1,W4
125C:  MOV     W4,D0E
.................... 
....................    
....................    
.................... 
....................    
.................... //!      U1MODE.STSEL = 0; // 1-Stop bit
.................... //!   U1MODE.PDSEL = 0; // No Parity, 8-Data bits
.................... //!   U1MODE.ABAUD = 0; // Auto-Baud disabled
.................... //!   U1MODE.BRGH = 0; // Standard-Speed mode
.................... //!   U1BRG = BRGVAL; // Baud Rate setting for 9600
.................... //!   U1STA.UTXISEL0 = 0; // Interrupt after one TX character is transmitted
.................... //!   U1STA.UTXISEL1 = 0;
.................... //!   IEC0.U1TXIE = 1; // Enable UART TX interrupt
.................... //!   IEC0.U1RXIE = 1; // Enable UART RX interrupt
.................... //!   U1STA.URXISEL = 0; // Interrupt after one RX character is received;
.................... //!   U1MODE.UARTEN = 1; // Enable UART
.................... //!   U1STA.UTXEN = 1; // Enable UART TX
....................    /* Wait at least 105 microseconds (1/9600) before sending first char */
....................    delay_us(105);
125E:  REPEAT  #832
1260:  NOP     
.................... //!   RPINR18.U1RXR=11;
.................... //!   RPOR5=0x0003;
....................    set_tris_b(0b1111110011111111);
1262:  MOV     #FCFF,W4
1264:  MOV     W4,2C8
.................... //!   output_bit(UART_GND,0);
.................... //!   output_bit(UART_VCC,1);
.................... 
....................    
....................    output_bit(Tick_Out,0);
1266:  BCLR.B  2CC.0
.................... //!   output_bit(TOGGLE_PIN , 0);
....................    output_bit(throttle_PIN , 0);
1268:  BCLR.B  2CC.1
....................  //  output_bit(Shut_Down,1);
....................    enable_interrupts(INT_PWM1);
126A:  BSET.B  9B.1
.................... //!   enable_interrupts(INT_EXT0);
.................... 
.................... 
....................    
....................    
....................    *(CLKDIV+1)=0x00;  *CLKDIV=0b01000011; //PLLPOST=4 PLLPRE=5 total divider=20
126C:  CLR.B   745
126E:  MOV.B   #43,W0L
1270:  MOV.B   W0L,744
....................    *(PLLFBD+1)=0x00;  *PLLFBD=0b00100110; //PLLDIV=40 //
1272:  CLR.B   747
1274:  MOV.B   #26,W0L
1276:  MOV.B   W0L,746
.................... 
....................    initMCPWM();
1278:  CALL    10DA
....................    set_tris_a(0x0001);
127C:  MOV     #1,W4
127E:  MOV     W4,2C0
....................    set_tris_b(0x0FFD);
1280:  MOV     #FFD,W4
1282:  MOV     W4,2C8
....................    set_tris_b(0b1111110011111111);
1284:  MOV     #FCFF,W4
1286:  MOV     W4,2C8
.................... //!   output_bit(UART_GND,0);
.................... //!   output_bit(UART_VCC,1);
....................   
....................    output_drive(Tick_Out);
1288:  BCLR.B  2C8.0
....................    output_drive(LED_PIN);
128A:  BCLR.B  2C8.5
.................... //!   output_drive(TOGGLE_PIN);
....................    output_drive(Sync_Out);
128C:  BCLR.B  2C0.4
....................    output_drive(throttle_PIN);
128E:  BCLR.B  2C8.1
....................    
.................... //!   setup_adc(ADC_CLOCK_INTERNAL);
....................    setup_adc(ADC_CLOCK_DIV_32);
1290:  MOV     #1F1F,W4
1292:  MOV     W4,324
1294:  MOV     #80E0,W4
1296:  MOV     W4,320
....................    setup_adc_ports(ADC_pin);
1298:  MOV     #FFDF,W4
129A:  MOV     W4,32C
129C:  CLR     322
....................    
....................    set_adc_channel(5);
129E:  MOV     #5,W4
12A0:  MOV     W4,328
....................    delay_us(10);
12A2:  REPEAT  #C6
12A4:  NOP     
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64 , timer_table[freq]);
12A6:  MOV     D0E,W0
12A8:  SL      W0,#1,W0
12AA:  MOV     #914,W4
12AC:  ADD     W0,W4,W0
12AE:  MOV     [W0],W5
12B0:  CLR     104
12B2:  MOV     W5,102
12B4:  MOV     #8020,W4
12B6:  MOV     W4,104
.................... //!   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_64, 156);
.................... 
.................... //!   enable_interrupts(INT_TIMER2);
....................    enable_interrupts(INT_TIMER1);
12B8:  BSET.B  94.3
....................    enable_interrupts(INTR_GLOBAL);
12BA:  BCLR.B  81.7
12BC:  CLR     42
12BE:  BSET.B  81.7
....................    
....................    while(TRUE)
....................    { 
....................    if(tick)
12C0:  BTSS.B  910.0
12C2:  BRA     12C4
....................       {
....................  //        tick=0;
.................... //!         raw_adc = read_adc();
.................... //!         raw_adc = raw_adc >> 2;
.................... //!         throttle_level = raw_adc;  
.................... //!         if (throttle_level > 255)
.................... //!         {
.................... //!            throttle_level = 255;
.................... //!         }
.................... //!         if (throttle_level < 0)
.................... //!         {
.................... //!            throttle_level = 0;
.................... //!         }
.................... //!         freq = throttle_level - 5 ;
.................... //!         peak_voltage = gain_table[throttle_level];
.................... //!         setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64 , timer_table[freq]);
.................... //!         output_bit(throttle_PIN , 0);
.................... //!         tick = 0;
....................          
....................          //putc(1,49);
....................       }   
12C4:  BRA     12C0
....................    }
.................... }
.................... void initMCPWM(void)
12C6:  PWRSAV  #0
.................... {   
....................    *(P1TCON+1)=0x80;  *P1TCON=0x02;
*
10DA:  MOV.B   #80,W0L
10DC:  MOV.B   W0L,1C1
10DE:  MOV.B   #2,W0L
10E0:  MOV.B   W0L,1C0
....................  //  *(P1TMR+1)=0x00;  *P1TMR=0x78;
....................    *(P1TPER+1)=0x02;  *P1TPER=0x70;  
10E2:  MOV.B   #2,W0L
10E4:  MOV.B   W0L,1C5
10E6:  MOV.B   #70,W0L
10E8:  MOV.B   W0L,1C4
.................... //!   *(P1TPER+1)=0x00;  *P1TPER=0xFA;
....................    *(P1SECMP+1)=0x00;  *P1SECMP=0x01; //
10EA:  CLR.B   1C7
10EC:  MOV.B   #1,W0L
10EE:  MOV.B   W0L,1C6
....................    *(PWM1CON1+1)=0x00;  *PWM1CON1=0x77;
10F0:  CLR.B   1C9
10F2:  MOV.B   #77,W0L
10F4:  MOV.B   W0L,1C8
....................    *(PWM1CON2+1)=0x0f;  *PWM1CON2=0x02;
10F6:  MOV.B   #F,W0L
10F8:  MOV.B   W0L,1CB
10FA:  MOV.B   #2,W0L
10FC:  MOV.B   W0L,1CA
....................    *(P1DTCON1+1)=0x00;  *P1DTCON1=0x09; //0x09
10FE:  CLR.B   1CD
1100:  MOV.B   #9,W0L
1102:  MOV.B   W0L,1CC
....................    *(P1DTCON2+1)=0x00;  *P1DTCON2=0x00;
1104:  CLR.B   1CF
1106:  CLR.B   1CE
....................    *(P1FLTACON+1)=0x00;  *P1FLTACON=0x00; //0x0000
1108:  CLR.B   1D1
110A:  CLR.B   1D0
....................    *(P1OVDCON+1)=0x7F;  *P1OVDCON=0x7F;
110C:  MOV.B   #7F,W0L
110E:  MOV.B   W0L,1D5
1110:  MOV.B   #7F,W0L
1112:  MOV.B   W0L,1D4
....................    *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0];
1114:  MOV.B   8B1,W0L
1116:  MOV.B   W0L,1D7
1118:  MOV.B   8B0,W0L
111A:  MOV.B   W0L,1D6
....................    *(P1DC2+1) = duty[1]>>8;   *P1DC2 = duty[1];
111C:  MOV.B   8B3,W0L
111E:  MOV.B   W0L,1D9
1120:  MOV.B   8B2,W0L
1122:  MOV.B   W0L,1D8
....................    *(P1DC3+1) = duty[2]>>8;   *P1DC3 = duty[2];  
1124:  MOV.B   8B5,W0L
1126:  MOV.B   W0L,1DB
1128:  MOV.B   8B4,W0L
112A:  MOV.B   W0L,1DA
....................    *(IPC14+1) =0x00;*(IPC14) =0x70;
112C:  CLR.B   C1
112E:  MOV.B   #70,W0L
1130:  MOV.B   W0L,C0
1132:  RETURN  
.................... }
.................... void fill_sine_table(void)
*
1012:  MOV     W5,[W15++]
1014:  MOV     W6,[W15++]
1016:  MOV     W7,[W15++]
1018:  MOV     W8,[W15++]
.................... {
....................    for(sine_index=0;sine_index < max_samples;sine_index++)
101A:  CLR     8F4
101C:  MOV     8F4,W4
101E:  CP      W4,#1E
1020:  BRA     C,10D0
....................    {
....................       theeta=sine_index*2.0*PI/max_samples;
1022:  MOV     8F4,W0
1024:  MOV     #0,W1
1026:  MOV     #0,W2
1028:  MOV     #0,W3
102A:  CALL    BE2
102E:  MOV     #0,W4
1030:  MOV     #0,W5
1032:  MOV     #0,W6
1034:  MOV     #4000,W7
1036:  CALL    6EE
103A:  MOV     W0,W5
103C:  MOV     W1,W6
103E:  MOV     W2,W7
1040:  MOV     W3,W8
1042:  MOV     W5,[W15++]
1044:  MOV     W6,[W15++]
1046:  MOV     W7,[W15++]
1048:  MOV     W5,W0
104A:  MOV     W6,W1
104C:  MOV     W7,W2
104E:  MOV     W8,W3
1050:  MOV     #2D18,W4
1052:  MOV     #5444,W5
1054:  MOV     #21FB,W6
1056:  MOV     #4009,W7
1058:  CALL    6EE
105C:  MOV     [--W15],W7
105E:  MOV     [--W15],W6
1060:  MOV     [--W15],W5
1062:  MOV     W0,W5
1064:  MOV     W1,W6
1066:  MOV     W2,W7
1068:  MOV     W3,W8
106A:  MOV     W5,[W15++]
106C:  MOV     W6,[W15++]
106E:  MOV     W7,[W15++]
1070:  MOV     W5,W0
1072:  MOV     W6,W1
1074:  MOV     W7,W2
1076:  MOV     W8,W3
1078:  MOV     #0,W4
107A:  MOV     #0,W5
107C:  MOV     #0,W6
107E:  MOV     #403E,W7
1080:  CALL    5E6
1084:  MOV     [--W15],W7
1086:  MOV     [--W15],W6
1088:  MOV     [--W15],W5
108A:  MOV     W0,8FC
108C:  MOV     W1,8FE
108E:  MOV     W2,900
1090:  MOV     W3,902
....................       sine_table[sine_index]=255*sin(theeta);
1092:  MOV     8F4,W0
1094:  SL      W0,#1,W0
1096:  MOV     #8B8,W4
1098:  ADD     W0,W4,W5
109A:  PUSH    8FC
109C:  POP     D18
109E:  PUSH    8FE
10A0:  POP     D1A
10A2:  PUSH    900
10A4:  POP     D1C
10A6:  PUSH    902
10A8:  POP     D1E
10AA:  CALL    F78
10AE:  MOV     W5,[W15++]
10B0:  MOV     W0,W4
10B2:  MOV     W1,W5
10B4:  MOV     W2,W6
10B6:  MOV     W3,W7
10B8:  MOV     #0,W0
10BA:  MOV     #0,W1
10BC:  MOV     #E000,W2
10BE:  MOV     #406F,W3
10C0:  CALL    6EE
10C4:  MOV     [--W15],W5
10C6:  CALL    FB4
10CA:  MOV     W0,[W5]
10CC:  INC     08F4
10CE:  BRA     101C
....................    }
10D0:  MOV     [--W15],W8
10D2:  MOV     [--W15],W7
10D4:  MOV     [--W15],W6
10D6:  MOV     [--W15],W5
10D8:  RETURN  
.................... }
.................... 
.................... void timer_reload(void) 
*
085C:  MOV     W5,[W15++]
085E:  MOV     W6,[W15++]
0860:  MOV     W7,[W15++]
0862:  MOV     W8,[W15++]
0864:  CLR     D14
0866:  CLR     D16
0868:  CLR     D18
086A:  CLR     D1A
.................... {
....................    double intr_per_sample = 0.0;
....................    
....................    for (int sample = 1 ; sample <= max_freq ; sample++) 
086C:  MOV     #1,W4
086E:  MOV     W4,D1C
0870:  MOV     D1C,W4
0872:  MOV     #FA,W3
0874:  CP      W3,W4
0876:  BRA     LT,91E
....................    {
....................       intr_per_sample = ((1.0/sample)*1000)/max_samples;
0878:  MOV     D1C,W0
087A:  CLR     W3
087C:  BTSC    W0.F
087E:  SETM    W3
0880:  MOV     W3,W1
0882:  MOV     W3,W2
0884:  CALL    57C
0888:  MOV     W0,W4
088A:  MOV     W1,W5
088C:  MOV     W2,W6
088E:  MOV     W3,W7
0890:  MOV     #0,W0
0892:  MOV     #0,W1
0894:  MOV     #0,W2
0896:  MOV     #3FF0,W3
0898:  CALL    5E6
089C:  MOV     W0,W5
089E:  MOV     W1,W6
08A0:  MOV     W2,W7
08A2:  MOV     W3,W8
08A4:  MOV     W5,[W15++]
08A6:  MOV     W6,[W15++]
08A8:  MOV     W7,[W15++]
08AA:  MOV     W5,W0
08AC:  MOV     W6,W1
08AE:  MOV     W7,W2
08B0:  MOV     W8,W3
08B2:  MOV     #0,W4
08B4:  MOV     #0,W5
08B6:  MOV     #4000,W6
08B8:  MOV     #408F,W7
08BA:  CALL    6EE
08BE:  MOV     [--W15],W7
08C0:  MOV     [--W15],W6
08C2:  MOV     [--W15],W5
08C4:  MOV     W0,W5
08C6:  MOV     W1,W6
08C8:  MOV     W2,W7
08CA:  MOV     W3,W8
08CC:  MOV     W5,[W15++]
08CE:  MOV     W6,[W15++]
08D0:  MOV     W7,[W15++]
08D2:  MOV     W5,W0
08D4:  MOV     W6,W1
08D6:  MOV     W7,W2
08D8:  MOV     W8,W3
08DA:  MOV     #0,W4
08DC:  MOV     #0,W5
08DE:  MOV     #0,W6
08E0:  MOV     #403E,W7
08E2:  CALL    5E6
08E6:  MOV     [--W15],W7
08E8:  MOV     [--W15],W6
08EA:  MOV     [--W15],W5
08EC:  MOV     W0,D14
08EE:  MOV     W1,D16
08F0:  MOV     W2,D18
08F2:  MOV     W3,D1A
....................       timer_table[sample] = intr_per_sample/per_clock_tick;     
08F4:  MOV     D1C,W4
08F6:  MUL.UU  W4,#2,W0
08F8:  MOV     #914,W4
08FA:  ADD     W0,W4,W5
08FC:  MOV     W5,[W15++]
08FE:  MOV     D14,W0
0900:  MOV     D16,W1
0902:  MOV     D18,W2
0904:  MOV     D1A,W3
0906:  MOV     #7C07,W4
0908:  MOV     #187E,W5
090A:  MOV     #3C21,W6
090C:  MOV     #3F7A,W7
090E:  CALL    5E6
0912:  MOV     [--W15],W5
0914:  CALL    7FE
0918:  MOV     W0,[W5]
091A:  INC     0D1C
091C:  BRA     870
....................    }
....................    timer_table[0] = timer_table[1];
091E:  PUSH    916
0920:  POP     914
0922:  MOV     [--W15],W8
0924:  MOV     [--W15],W7
0926:  MOV     [--W15],W6
0928:  MOV     [--W15],W5
092A:  RETURN  
.................... }
.................... 
.................... void voltage_gain(void) 
*
0B1A:  MOV     W5,[W15++]
0B1C:  MOV     W6,[W15++]
0B1E:  MOV     W7,[W15++]
0B20:  MOV     W8,[W15++]
.................... {
....................    for (int i = 0 ; i <= break_level ; i++) {
0B22:  CLR     D14
0B24:  MOV     D14,W4
0B26:  CP      W4,#5
0B28:  BRA     GT,B3C
....................             gain_table[i] = 0; 
0B2A:  MOV     D14,W4
0B2C:  MUL.UU  W4,#2,W0
0B2E:  MOV     #B0A,W4
0B30:  ADD     W0,W4,W5
0B32:  CLR.B   [W5]
0B34:  MOV.B   #0,W0L
0B36:  MOV.B   W0L,[W5+#1]
0B38:  INC     0D14
0B3A:  BRA     B24
....................    }
....................    
....................    for (int i = break_level+1 ; i <= sustain_level; i++) {     
0B3C:  MOV     #6,W4
0B3E:  MOV     W4,D16
0B40:  MOV     D16,W4
0B42:  MOV     #C8,W3
0B44:  CP      W3,W4
0B46:  BRA     LT,BB8
....................         temp = SLOPE * i + pedestal_amplitude;
0B48:  MOV     D16,W0
0B4A:  CLR     W3
0B4C:  BTSC    W0.F
0B4E:  SETM    W3
0B50:  MOV     W3,W1
0B52:  MOV     W3,W2
0B54:  CALL    57C
0B58:  MOV     W0,W4
0B5A:  MOV     W1,W5
0B5C:  MOV     W2,W6
0B5E:  MOV     W3,W7
0B60:  MOV     #999A,W0
0B62:  MOV     #9999,W1
0B64:  MOV     #9999,W2
0B66:  MOV     #4005,W3
0B68:  CALL    6EE
0B6C:  MOV     W0,W5
0B6E:  MOV     W1,W6
0B70:  MOV     W2,W7
0B72:  MOV     W3,W8
0B74:  BCLR.B  43.0
0B76:  MOV     W5,[W15++]
0B78:  MOV     W6,[W15++]
0B7A:  MOV     W7,[W15++]
0B7C:  MOV     W5,W0
0B7E:  MOV     W6,W1
0B80:  MOV     W7,W2
0B82:  MOV     W8,W3
0B84:  MOV     #0,W4
0B86:  MOV     #0,W5
0B88:  MOV     #0,W6
0B8A:  MOV     #4024,W7
0B8C:  CALL    92C
0B90:  MOV     [--W15],W7
0B92:  MOV     [--W15],W6
0B94:  MOV     [--W15],W5
0B96:  CALL    7FE
0B9A:  MOV     W0,D10
....................         if(temp > peak_amplitude ) 
0B9C:  MOV     D10,W4
0B9E:  MOV     #226,W3
0BA0:  CP      W3,W4
0BA2:  BRA     C,BA8
....................         {
....................          temp = peak_amplitude;
0BA4:  MOV     #226,W4
0BA6:  MOV     W4,D10
....................         }
....................         gain_table[i] = temp;
0BA8:  MOV     D16,W4
0BAA:  MUL.UU  W4,#2,W0
0BAC:  MOV     #B0A,W4
0BAE:  ADD     W0,W4,W5
0BB0:  MOV     D10,W4
0BB2:  MOV     W4,[W5+#0]
0BB4:  INC     0D16
0BB6:  BRA     B40
....................    }
....................    for (int i = sustain_level+1 ; i <= 255; i++) {     
0BB8:  MOV     #C9,W4
0BBA:  MOV     W4,D18
0BBC:  MOV     D18,W4
0BBE:  MOV     #FF,W3
0BC0:  CP      W3,W4
0BC2:  BRA     LT,BD8
....................    gain_table[i] = peak_amplitude;
0BC4:  MOV     D18,W4
0BC6:  MUL.UU  W4,#2,W0
0BC8:  MOV     #B0A,W4
0BCA:  ADD     W0,W4,W5
0BCC:  MOV.B   #26,W0L
0BCE:  MOV.B   W0L,[W5]
0BD0:  MOV.B   #2,W0L
0BD2:  MOV.B   W0L,[W5+#1]
0BD4:  INC     0D18
0BD6:  BRA     BBC
....................    }
0BD8:  MOV     [--W15],W8
0BDA:  MOV     [--W15],W7
0BDC:  MOV     [--W15],W6
0BDE:  MOV     [--W15],W5
0BE0:  RETURN  
.................... 
.................... }

Configuration Fuses:
   Word  1L: 000F   NOWRTB NOBSS
          H: 0000  
   Word  2L: 0000  
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0083   PR_PLL IESO
          H: 0000  
   Word  5L: 00E6   HS NOOSCIO IOL1WAY
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00F7   PUT128 NOALTI2C1 LPOL_HIGH HPOL_HIGH NOPWMPIN
          H: 0000  
   Word  8L: 00C3   ICSP1 NOJTAG NODEBUG
          H: 0000  
