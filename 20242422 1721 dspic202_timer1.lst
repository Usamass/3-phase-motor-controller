CCS PCD C Compiler, Version 5.112, 5967               23-Apr-24 14:02

               Filename:   C:\Users\eelab\Documents\motor_controller\20242422 1721 dspic202_timer1.lst

               ROM used:   4796 bytes (21%)
                           Largest free fragment is 17732
               RAM used:   1423 (69%) at main() level
                           1630 (80%) worst case
               Stack used: 96 locations (46 in main + 50 for interrupts)
               Stack size: 128

*
0000:  GOTO    10D2
*
0014:  DATA    60,02,00
*
001A:  DATA    0C,03,00
*
0022:  DATA    80,02,00
*
002A:  DATA    00,02,00
002C:  DATA    20,02,00
*
0086:  DATA    A2,02,00
*
0096:  DATA    40,02,00
.................... //!#include <pwm_3.h>
.................... #include <33FJ32MC202.h>
.................... //////////// Standard Header file for the DSPIC33FJ32MC202 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC33FJ32MC202
*
02CA:  MOV     W5,[W15++]
02CC:  MOV     #C,W5
02CE:  REPEAT  #3
02D0:  MOV     [W5++],[W15++]
02D2:  MUL.UU  W0,W2,W4
02D4:  BTSS    W3.F
02D6:  BRA     2DC
02D8:  MUL.SS  W0,W3,W6
02DA:  BRA     2DE
02DC:  MUL.UU  W0,W3,W6
02DE:  BCLR.B  42.0
02E0:  ADD     W6,W5,W5
02E2:  ADDC    W7,#0,W8
02E4:  BTSS    W1.F
02E6:  BRA     2EC
02E8:  MUL.SS  W1,W2,W6
02EA:  BRA     2EE
02EC:  MUL.UU  W1,W2,W6
02EE:  ADDC    W6,W5,W5
02F0:  ADDC    W7,W8,W8
02F2:  ADDC    #0,W9
02F4:  MUL.SS  W1,W3,W6
02F6:  ADDC    W6,W8,W8
02F8:  ADDC    W9,W7,W7
02FA:  MOV     W7,W3
02FC:  MOV     W8,W2
02FE:  MOV     W5,W1
0300:  MOV     W4,W0
0302:  MOV     #12,W5
0304:  REPEAT  #3
0306:  MOV     [--W15],[W5--]
0308:  MOV     [--W15],W5
030A:  RETURN  
*
051A:  MOV     W5,[W15++]
051C:  MOV     #C,W5
051E:  REPEAT  #3
0520:  MOV     [W5++],[W15++]
0522:  MOV     W0,W4
0524:  MOV     W1,W5
0526:  MOV     W2,W6
0528:  MOV     W3,W7
052A:  CLR     W0
052C:  CLR     W1
052E:  CLR     W2
0530:  CLR     W3
0532:  BCLR    W8.0
0534:  BTSS    W7.F
0536:  BRA     548
0538:  BSET    W8.0
053A:  COM     W7,W7
053C:  COM     W6,W6
053E:  COM     W5,W5
0540:  NEG     W4,W4
0542:  ADDC    W5,#0,W5
0544:  ADDC    W6,#0,W6
0546:  ADDC    W7,#0,W7
0548:  IOR      W4,  W5,W9
054A:  BRA     NZ,550
054C:  IOR      W6,  W7,W9
054E:  BRA     Z,57A
0550:  MOV     #473,W9
0552:  BTSC    W3.4
0554:  BRA     56C
0556:  BCLR.B  42.0
0558:  RLC     W4,W4
055A:  RLC     W5,W5
055C:  RLC     W6,W6
055E:  RLC     W7,W7
0560:  RLC     W0,W0
0562:  RLC     W1,W1
0564:  RLC     W2,W2
0566:  RLC     W3,W3
0568:  DEC     W9,W9
056A:  BRA     NZ,552
056C:  SL      W9,#4,W9
056E:  BCLR.B  42.0
0570:  BCLR    W9.F
0572:  BCLR    W3.4
0574:  XOR     W9,W3,W3
0576:  BTSC    W8.0
0578:  BSET    W3.F
057A:  MOV     #12,W5
057C:  REPEAT  #3
057E:  MOV     [--W15],[W5--]
0580:  MOV     [--W15],W5
0582:  RETURN  
0584:  MOV     W8,[W15++]
0586:  MOV     #12,W8
0588:  REPEAT  #4
058A:  MOV     [W8++],[W15++]
058C:  XOR     W3,W7,W13
058E:  MOV     W3,W8
0590:  MOV     W7,W9
0592:  MOV     #7FF,W10
0594:  BCLR.B  42.0
0596:  BCLR.B  42.1
0598:  ASR     W8,#4,W8
059A:  AND     W10,W8,W8
059C:  CP0     W8
059E:  BRA     Z,678
05A0:  BCLR.B  42.0
05A2:  BCLR.B  42.1
05A4:  ASR     W9,#4,W9
05A6:  AND     W10,W9,W9
05A8:  CP0     W9
05AA:  BRA     Z,678
05AC:  CLR     W10
05AE:  SUB     W8,W9,W12
05B0:  BRA     NC,5B8
05B2:  ADD     #3FF,W12
05B4:  BRA     C,678
05B6:  BRA     5C0
05B8:  MOV     #401,W11
05BA:  SUB     W12,W11,W12
05BC:  BRA     NC,678
05BE:  BRA     Z,678
05C0:  CLR     W8
05C2:  CLR     W9
05C4:  CLR     W10
05C6:  CLR     W11
05C8:  AND     #1F,W3
05CA:  BSET    W3.4
05CC:  AND     #1F,W7
05CE:  BSET    W7.4
05D0:  MOV     W12,[W15++]
05D2:  MOV     #36,W12
05D4:  SUB     W0,W4,W0
05D6:  SUBB    W1,W5,W1
05D8:  SUBB    W2,W6,W2
05DA:  SUBB    W3,W7,W3
05DC:  BRA     N,5E2
05DE:  BRA     C,5EC
05E0:  BRA     NZ,5EE
05E2:  ADD     W0,W4,W0
05E4:  ADDC    W1,W5,W1
05E6:  ADDC    W2,W6,W2
05E8:  ADDC    W3,W7,W3
05EA:  BRA     5EE
05EC:  BSET    W8.0
05EE:  DEC     W12,W12
05F0:  BRA     Z,608
05F2:  BCLR.B  42.0
05F4:  RLC     W0,W0
05F6:  RLC     W1,W1
05F8:  RLC     W2,W2
05FA:  RLC     W3,W3
05FC:  BCLR.B  42.0
05FE:  RLC     W8,W8
0600:  RLC     W9,W9
0602:  RLC     W10,W10
0604:  RLC     W11,W11
0606:  BRA     5D4
0608:  MOV     [--W15],W12
060A:  BTSC    W11.5
060C:  BRA     610
060E:  BRA     61C
0610:  BCLR.B  42.0
0612:  RRC     W11,W11
0614:  RRC     W10,W10
0616:  RRC     W9,W9
0618:  RRC     W8,W8
061A:  BRA     622
061C:  DEC     W12,W12
061E:  BCLR.B  42.0
0620:  BRA     Z,678
0622:  BTSC.B  42.0
0624:  BRA     638
0626:  RLC     W0,W0
0628:  RLC     W1,W1
062A:  RLC     W2,W2
062C:  RLC     W3,W3
062E:  SUB     W0,W4,W4
0630:  SUBB    W1,W5,W5
0632:  SUBB    W2,W6,W6
0634:  SUBB    W3,W7,W7
0636:  BRA     NC,662
0638:  INC     W8,W8
063A:  BRA     NZ,662
063C:  INC     W9,W9
063E:  BRA     NZ,662
0640:  INC     W10,W10
0642:  BRA     NZ,662
0644:  INC     W11,W11
0646:  BRA     NZ,662
0648:  INC     W12,W12
064A:  BRA     Z,678
064C:  BRA     662
064E:  DEC     W12,W12
0650:  BRA     Z,678
0652:  BTSC    W11.4
0654:  BRA     662
0656:  BCLR.B  42.0
0658:  RLC     W8,W8
065A:  RLC     W9,W9
065C:  RLC     W10,W10
065E:  RLC     W11,W11
0660:  BRA     652
0662:  SL      W12,#4,W12
0664:  BCLR.B  42.0
0666:  BCLR    W12.F
0668:  BTSC    W13.F
066A:  BSET    W12.F
066C:  BCLR    W11.4
066E:  XOR     W12,W11,W3
0670:  MOV     W10,W2
0672:  MOV     W9,W1
0674:  MOV     W8,W0
0676:  BRA     682
0678:  MOV     #0,W0
067A:  MOV     #0,W1
067C:  MOV     #0,W2
067E:  MOV     #0,W3
0680:  BRA     682
0682:  MOV     #1A,W8
0684:  REPEAT  #4
0686:  MOV     [--W15],[W8--]
0688:  MOV     [--W15],W8
068A:  RETURN  
068C:  MOV     W8,[W15++]
068E:  MOV     #12,W8
0690:  REPEAT  #4
0692:  MOV     [W8++],[W15++]
0694:  CLR     W11
0696:  MUL.UU  W12,#0,W12
0698:  MOV     W3,W8
069A:  MOV     W7,W9
069C:  MOV     #7FF,W10
069E:  BCLR.B  42.0
06A0:  BCLR.B  42.1
06A2:  ASR     W8,#4,W8
06A4:  AND     W10,W8,W8
06A6:  CP0     W8
06A8:  BRA     Z,78C
06AA:  BCLR.B  42.0
06AC:  BCLR.B  42.1
06AE:  ASR     W9,#4,W9
06B0:  AND     W10,W9,W9
06B2:  CP0     W9
06B4:  BRA     Z,78C
06B6:  ADD     W9,W8,W8
06B8:  BTSC    W9.B
06BA:  BRA     6C4
06BC:  SUB     #3FF,W8
06BE:  BRA     Z,78C
06C0:  BRA     NC,78C
06C2:  BRA     6CA
06C4:  MOV     #401,W10
06C6:  ADD.B   W10L,W5L,W5L
06C8:  BRA     C,78C
06CA:  XOR     W3,W7,W13
06CC:  BCLR.B  42.0
06CE:  BCLR.B  42.1
06D0:  AND     #F,W3
06D2:  BSET    W3.4
06D4:  AND     #F,W7
06D6:  BSET    W7.4
06D8:  MOV     W8,[W15++]
06DA:  MUL.UU  W4,W1,W8
06DC:  MUL.UU  W5,W0,W10
06DE:  ADD     W8,W10,W10
06E0:  ADDC    W9,W11,W11
06E2:  ADDC    #0,W12
06E4:  MUL.UU  W4,W2,W8
06E6:  ADD     W8,W11,W11
06E8:  ADDC    W9,W12,W12
06EA:  MUL.UU  W5,W1,W8
06EC:  CLR     W10
06EE:  ADD     W8,W11,W11
06F0:  ADDC    W9,W12,W12
06F2:  ADDC    #0,W10
06F4:  MUL.UU  W6,W0,W8
06F6:  ADD     W8,W11,W11
06F8:  ADDC    W9,W12,W12
06FA:  ADDC    #0,W10
06FC:  CLR     W11
06FE:  MUL.UU  W4,W3,W8
0700:  ADD     W8,W12,W12
0702:  ADDC    W9,W10,W10
0704:  ADDC    #0,W11
0706:  MUL.UU  W5,W2,W8
0708:  ADD     W8,W12,W12
070A:  ADDC    W9,W10,W10
070C:  ADDC    #0,W11
070E:  MUL.UU  W6,W1,W8
0710:  ADD     W8,W12,W12
0712:  ADDC    W9,W10,W10
0714:  ADDC    #0,W11
0716:  MUL.UU  W7,W0,W8
0718:  ADD     W8,W12,W12
071A:  ADDC    W9,W10,W10
071C:  ADDC    #0,W11
071E:  MOV     W12,W0
0720:  CLR     W12
0722:  MUL.UU  W5,W3,W8
0724:  ADD     W8,W10,W10
0726:  ADDC    W9,W11,W11
0728:  ADDC    #0,W12
072A:  MUL.UU  W6,W2,W8
072C:  ADD     W8,W10,W10
072E:  ADDC    W9,W11,W11
0730:  ADDC    #0,W12
0732:  MUL.UU  W6,W3,W8
0734:  ADD     W8,W11,W11
0736:  ADDC    W9,W12,W12
0738:  MUL.UU  W7,W1,W8
073A:  ADD     W8,W10,W10
073C:  ADDC    W9,W11,W11
073E:  ADDC    #0,W12
0740:  MUL.UU  W7,W2,W8
0742:  ADD     W8,W11,W11
0744:  ADDC    W9,W12,W12
0746:  MUL.UU  W7,W3,W8
0748:  ADD     W8,W12,W12
074A:  MOV     W10,W1
074C:  MOV     W11,W2
074E:  MOV     W12,W3
0750:  MOV     #5,W4
0752:  BCLR.B  42.0
0754:  RRC     W3,W3
0756:  RRC     W2,W2
0758:  RRC     W1,W1
075A:  RRC     W0,W0
075C:  DEC     W4,W4
075E:  BRA     NZ,752
0760:  MOV     [--W15],W8
0762:  INC     W8,W8
0764:  IOR      W0,  W1,W6
0766:  BRA     Z,76A
0768:  BRA     76E
076A:  IOR      W2,  W3,W6
076C:  BRA     Z,77E
076E:  BTSC    W3.4
0770:  BRA     77E
0772:  BCLR.B  42.0
0774:  RLC     W0,W0
0776:  RLC     W1,W1
0778:  RLC     W2,W2
077A:  RLC     W3,W3
077C:  DEC     W8,W8
077E:  SL      W8,#4,W8
0780:  BCLR    W3.F
0782:  BTSC    W13.F
0784:  BSET    W3.F
0786:  BCLR    W3.4
0788:  XOR     W8,W3,W3
078A:  BRA     792
078C:  MUL.UU  W0,#0,W0
078E:  MUL.UU  W0,#0,W2
0790:  BRA     792
0792:  MOV     #1A,W8
0794:  REPEAT  #4
0796:  MOV     [--W15],[W8--]
0798:  MOV     [--W15],W8
079A:  RETURN  
079C:  MOV     W5,[W15++]
079E:  MOV     #C,W5
07A0:  REPEAT  #5
07A2:  MOV     [W5++],[W15++]
07A4:  MOV     W3,W8
07A6:  MOV     W2,W7
07A8:  MOV     W1,W6
07AA:  MOV     W0,W5
07AC:  MOV     W3,W9
07AE:  MOV     #473,W11
07B0:  ASR     W3,#4,W3
07B2:  MOV     #7FF,W10
07B4:  AND     W10,W3,W3
07B6:  SUB     W11,W3,W11
07B8:  AND     #1F,W8
07BA:  BSET    W8.4
07BC:  CLR     W0
07BE:  CLR     W1
07C0:  CLR     W2
07C2:  CLR     W3
07C4:  BCLR.B  42.0
07C6:  RRC     W8,W8
07C8:  RRC     W7,W7
07CA:  RRC     W6,W6
07CC:  RRC     W5,W5
07CE:  RRC     W3,W3
07D0:  RRC     W2,W2
07D2:  RRC     W1,W1
07D4:  RRC     W0,W0
07D6:  DEC     W11,W11
07D8:  BRA     NZ,7C4
07DA:  BTSS    W9.F
07DC:  BRA     7F0
07DE:  COM     W0,W0
07E0:  COM     W1,W1
07E2:  COM     W2,W2
07E4:  COM     W3,W3
07E6:  INC     W0,W0
07E8:  ADDC    #0,W1
07EA:  ADDC    #0,W2
07EC:  ADDC    #0,W3
07EE:  BRA     7F0
07F0:  MOV     #16,W5
07F2:  REPEAT  #5
07F4:  MOV     [--W15],[W5--]
07F6:  MOV     [--W15],W5
07F8:  RETURN  
*
08CA:  MOV     W8,[W15++]
08CC:  MOV     #12,W8
08CE:  REPEAT  #4
08D0:  MOV     [W8++],[W15++]
08D2:  MOV     #8000,W8
08D4:  BTSC.B  43.0
08D6:  XOR     W8,W7,W7
08D8:  CP0     W0
08DA:  BRA     NZ,8EA
08DC:  CP0     W1
08DE:  BRA     NZ,8EA
08E0:  CP0     W2
08E2:  BRA     NZ,8EA
08E4:  MOV     #7FFF,W10
08E6:  AND     W3,W10,W10
08E8:  BTSS.B  42.1
08EA:  MOV     W3,W10
08EC:  XOR     W7,W10,W11
08EE:  MOV     W3,W8
08F0:  MOV     W7,W9
08F2:  MOV     W7,W12
08F4:  MOV     #7FF,W13
08F6:  BCLR.B  42.1
08F8:  BCLR.B  42.0
08FA:  ASR     W8,#4,W8
08FC:  AND     W13,W8,W8
08FE:  CP0     W8
0900:  BRA     Z,A7A
0902:  BCLR.B  42.1
0904:  BCLR.B  42.0
0906:  ASR     W9,#4,W9
0908:  AND     W13,W9,W9
090A:  CP0     W9
090C:  BRA     Z,A8A
090E:  CLR     W13
0910:  BCLR.B  42.1
0912:  BCLR.B  42.0
0914:  CP      W9,W8
0916:  BRA     Z,A8C
0918:  BRA     N,A9C
091A:  BCLR    W13.0
091C:  BSET    W13.1
091E:  SUB     W9,W8,W8
0920:  AND     #F,W3
0922:  BSET    W3.4
0924:  AND     #F,W7
0926:  BSET    W7.4
0928:  SUB     #34,W8
092A:  BRA     NN,958
092C:  ADD     #34,W8
092E:  BCLR.B  42.1
0930:  BCLR.B  42.0
0932:  RRC     W3,W3
0934:  RRC     W2,W2
0936:  RRC     W1,W1
0938:  RRC     W0,W0
093A:  DEC     W8,W8
093C:  BRA     NZ,92E
093E:  BRA     968
0940:  SUB     #34,W8
0942:  BRA     NN,962
0944:  ADD     #34,W8
0946:  BCLR.B  42.1
0948:  BCLR.B  42.0
094A:  RRC     W7,W7
094C:  RRC     W6,W6
094E:  RRC     W5,W5
0950:  RRC     W4,W4
0952:  DEC     W8,W8
0954:  BRA     NZ,946
0956:  BRA     98E
0958:  MOV     W4,W0
095A:  MOV     W5,W1
095C:  MOV     W6,W2
095E:  MOV     W7,W3
0960:  XOR     W11,W12,W12
0962:  BTSC    W12.F
0964:  BTG     W11.F
0966:  BRA     A5A
0968:  BTSS    W11.F
096A:  BRA     9AA
096C:  BTSC    W13.4
096E:  MOV     W12,W11
0970:  COM     W0,W0
0972:  COM     W1,W1
0974:  COM     W2,W2
0976:  COM.B   W3L,W3L
0978:  AND.B   #1F,W3L
097A:  INC     W0,W0
097C:  BRA     NZ,988
097E:  INC     W1,W1
0980:  BRA     NZ,988
0982:  INC     W2,W2
0984:  BRA     NZ,988
0986:  INC.B   W3L,W3L
0988:  BTSC    W13.4
098A:  BRA     9F0
098C:  BRA     9AA
098E:  BTSS    W11.F
0990:  BRA     9AA
0992:  COM     W4,W4
0994:  COM     W5,W5
0996:  COM     W6,W6
0998:  COM.B   W7L,W7L
099A:  AND.B   #1F,W7L
099C:  INC     W4,W4
099E:  BRA     NZ,9AA
09A0:  INC     W5,W5
09A2:  BRA     NZ,9AA
09A4:  INC     W6,W6
09A6:  BRA     NZ,9AA
09A8:  INC.B   W7L,W7L
09AA:  BCLR.B  42.1
09AC:  BCLR.B  42.0
09AE:  ADD     W0,W4,W0
09B0:  ADDC    W1,W5,W1
09B2:  ADDC    W2,W6,W2
09B4:  ADDC.B  W3L,W7L,W3L
09B6:  BTSC    W3.5
09B8:  BSET    W13.3
09BA:  BTSC    W13.0
09BC:  BRA     9D0
09BE:  BTSC    W13.1
09C0:  BRA     9C4
09C2:  BRA     9DA
09C4:  BTSC    W11.F
09C6:  BRA     9F0
09C8:  BTSC    W13.3
09CA:  BRA     A1E
09CC:  BSET    W13.6
09CE:  BRA     A12
09D0:  BTSC    W11.F
09D2:  BRA     9F0
09D4:  BTSC    W13.3
09D6:  BRA     A1E
09D8:  BRA     A12
09DA:  BTSC    W11.F
09DC:  BRA     9E6
09DE:  MOV     W10,W11
09E0:  BTSC    W13.3
09E2:  BRA     A1E
09E4:  BRA     A5A
09E6:  BSET    W13.4
09E8:  XOR.B   #10,W3L
09EA:  BTSC    W3.4
09EC:  BRA     96C
09EE:  MOV     W10,W11
09F0:  AND     #1F,W3
09F2:  IOR      W3,  W2,W8
09F4:  BRA     NZ,9FA
09F6:  IOR      W1,  W0,W8
09F8:  BRA     Z,A12
09FA:  BTSC    W3.4
09FC:  BRA     A12
09FE:  BCLR.B  42.1
0A00:  BCLR.B  42.0
0A02:  RLC     W0,W0
0A04:  RLC     W1,W1
0A06:  RLC     W2,W2
0A08:  RLC     W3,W3
0A0A:  DEC     W9,W9
0A0C:  BTSC.B  42.1
0A0E:  BRA     A74
0A10:  BRA     9FA
0A12:  BTSC    W13.0
0A14:  MOV     W10,W11
0A16:  BTSC    W13.1
0A18:  MOV     W12,W11
0A1A:  BTSS    W13.5
0A1C:  BRA     A5A
0A1E:  BCLR.B  42.0
0A20:  RRC.B   W3L,W3L
0A22:  RRC     W2,W2
0A24:  RRC     W1,W1
0A26:  RRC     W0,W0
0A28:  BTSC.B  42.0
0A2A:  BSET    W13.5
0A2C:  INC     W9,W9
0A2E:  BTSC.B  42.1
0A30:  BRA     A74
0A32:  BTSS    W13.5
0A34:  BRA     A52
0A36:  INC     W0,W0
0A38:  BRA     NZ,A52
0A3A:  INC     W1,W1
0A3C:  BRA     NZ,A52
0A3E:  INC     W2,W2
0A40:  BRA     NZ,A52
0A42:  INC     W3,W3
0A44:  BRA     NZ,A52
0A46:  RRC.B   W3L,W3L
0A48:  RRC     W2,W2
0A4A:  RRC     W1,W1
0A4C:  RRC     W0,W0
0A4E:  INC     W9,W9
0A50:  BRA     Z,A74
0A52:  BTSC    W13.0
0A54:  MOV     W10,W11
0A56:  BTSC    W13.1
0A58:  MOV     W12,W11
0A5A:  IOR      W0,  W1,W4
0A5C:  BRA     NZ,A62
0A5E:  IOR      W2,  W3,W4
0A60:  BRA     Z,AAE
0A62:  BCLR    W3.4
0A64:  BCLR.B  42.1
0A66:  BCLR.B  42.0
0A68:  SL      W9,#4,W9
0A6A:  XOR     W9,W3,W3
0A6C:  BSET    W3.F
0A6E:  BTSS    W11.F
0A70:  BCLR    W3.F
0A72:  BRA     AAE
0A74:  MUL.UU  W0,#0,W0
0A76:  MUL.UU  W2,#0,W2
0A78:  BRA     AAE
0A7A:  MOV     #8000,W8
0A7C:  BTSC    W10.F
0A7E:  XOR     W8,W7,W7
0A80:  MOV     W5,W1
0A82:  MOV     W4,W0
0A84:  MOV     W6,W2
0A86:  MOV     W7,W3
0A88:  BRA     AAE
0A8A:  BRA     AAE
0A8C:  AND     #F,W7
0A8E:  BSET    W7.4
0A90:  AND     #F,W3
0A92:  BSET    W3.4
0A94:  BTSC    W11.F
0A96:  BCLR    W7.4
0A98:  BSET    W13.2
0A9A:  BRA     98E
0A9C:  AND     #F,W3
0A9E:  BSET    W3.4
0AA0:  AND     #F,W7
0AA2:  BSET    W7.4
0AA4:  SUB     W8,W9,W8
0AA6:  ADD     W8,W9,W9
0AA8:  BCLR    W13.1
0AAA:  BSET    W13.0
0AAC:  BRA     940
0AAE:  MOV     #1A,W8
0AB0:  REPEAT  #4
0AB2:  MOV     [--W15],[W8--]
0AB4:  MOV     [--W15],W8
0AB6:  RETURN  
*
0B80:  MOV     W5,[W15++]
0B82:  MOV     #C,W5
0B84:  REPEAT  #3
0B86:  MOV     [W5++],[W15++]
0B88:  MOV     W0,W4
0B8A:  MOV     W1,W5
0B8C:  MOV     W2,W6
0B8E:  MOV     W3,W7
0B90:  CLR     W0
0B92:  CLR     W1
0B94:  CLR     W2
0B96:  CLR     W3
0B98:  BCLR    W8.0
0B9A:  BTSS    W7.F
0B9C:  BRA     BAE
0B9E:  BSET    W8.0
0BA0:  COM     W7,W7
0BA2:  COM     W6,W6
0BA4:  COM     W5,W5
0BA6:  NEG     W4,W4
0BA8:  ADDC    W5,#0,W5
0BAA:  ADDC    W6,#0,W6
0BAC:  ADDC    W7,#0,W7
0BAE:  IOR      W4,  W5,W9
0BB0:  BRA     NZ,BB6
0BB2:  IOR      W6,  W7,W9
0BB4:  BRA     Z,BE0
0BB6:  MOV     #473,W9
0BB8:  BTSC    W3.4
0BBA:  BRA     BD2
0BBC:  BCLR.B  42.0
0BBE:  RLC     W4,W4
0BC0:  RLC     W5,W5
0BC2:  RLC     W6,W6
0BC4:  RLC     W7,W7
0BC6:  RLC     W0,W0
0BC8:  RLC     W1,W1
0BCA:  RLC     W2,W2
0BCC:  RLC     W3,W3
0BCE:  DEC     W9,W9
0BD0:  BRA     NZ,BB8
0BD2:  SL      W9,#4,W9
0BD4:  BCLR.B  42.0
0BD6:  BCLR    W9.F
0BD8:  BCLR    W3.4
0BDA:  XOR     W9,W3,W3
0BDC:  BTSC    W8.0
0BDE:  BSET    W3.F
0BE0:  MOV     #12,W5
0BE2:  REPEAT  #3
0BE4:  MOV     [--W15],[W5--]
0BE6:  MOV     [--W15],W5
0BE8:  RETURN  
0BEA:  MOV     W8,[W15++]
0BEC:  MOV     W9,[W15++]
0BEE:  MOV     W10,[W15++]
0BF0:  XOR     W3,W7,W9
0BF2:  BTSS    W9.F
0BF4:  BRA     C02
0BF6:  BCLR.B  42.0
0BF8:  BCLR.B  42.1
0BFA:  BTSS    W3.F
0BFC:  BRA     C66
0BFE:  BSET.B  42.0
0C00:  BRA     C66
0C02:  MOV     #7FF,W10
0C04:  MOV     W3,W8
0C06:  MOV     W7,W9
0C08:  ASR     W8,#4,W8
0C0A:  AND     W10,W8,W8
0C0C:  ASR     W9,#4,W9
0C0E:  AND     W10,W9,W9
0C10:  SUB     W9,W8,W10
0C12:  BRA     Z,C1E
0C14:  BTSS    W3.F
0C16:  BRA     C66
0C18:  MOV     #1,W0
0C1A:  XOR.B   42
0C1C:  BRA     C66
0C1E:  MOV     W3,W8
0C20:  MOV     W7,W9
0C22:  AND     #1F,W3
0C24:  AND     #1F,W7
0C26:  BCLR    W3.4
0C28:  BCLR    W7.4
0C2A:  SUB.B   W7L,W3L,W10L
0C2C:  BRA     Z,C38
0C2E:  BTSS    W8.F
0C30:  BRA     C66
0C32:  MOV     #1,W0
0C34:  XOR.B   42
0C36:  BRA     C66
0C38:  SUB     W6,W2,W10
0C3A:  BRA     Z,C46
0C3C:  BTSS    W8.F
0C3E:  BRA     C66
0C40:  MOV     #1,W0
0C42:  XOR.B   42
0C44:  BRA     C66
0C46:  SUB     W5,W1,W10
0C48:  BRA     Z,C54
0C4A:  BTSS    W8.F
0C4C:  BRA     C66
0C4E:  MOV     #1,W0
0C50:  XOR.B   42
0C52:  BRA     C66
0C54:  SUB     W4,W0,W10
0C56:  BRA     Z,C62
0C58:  BTSS    W8.F
0C5A:  BRA     C66
0C5C:  MOV     #1,W0
0C5E:  XOR.B   42
0C60:  BRA     C66
0C62:  BCLR.B  42.0
0C64:  BRA     C66
0C66:  MOV     [--W15],W10
0C68:  MOV     [--W15],W9
0C6A:  MOV     [--W15],W8
0C6C:  RETURN  
*
0F52:  MOV     W5,[W15++]
0F54:  MOV     #C,W5
0F56:  REPEAT  #5
0F58:  MOV     [W5++],[W15++]
0F5A:  MOV     W3,W8
0F5C:  MOV     W2,W7
0F5E:  MOV     W1,W6
0F60:  MOV     W0,W5
0F62:  MOV     W3,W9
0F64:  MOV     #473,W11
0F66:  ASR     W3,#4,W3
0F68:  MOV     #7FF,W10
0F6A:  AND     W10,W3,W3
0F6C:  SUB     W11,W3,W11
0F6E:  AND     #1F,W8
0F70:  BSET    W8.4
0F72:  CLR     W0
0F74:  CLR     W1
0F76:  CLR     W2
0F78:  CLR     W3
0F7A:  BCLR.B  42.0
0F7C:  RRC     W8,W8
0F7E:  RRC     W7,W7
0F80:  RRC     W6,W6
0F82:  RRC     W5,W5
0F84:  RRC     W3,W3
0F86:  RRC     W2,W2
0F88:  RRC     W1,W1
0F8A:  RRC     W0,W0
0F8C:  DEC     W11,W11
0F8E:  BRA     NZ,F7A
0F90:  BTSS    W9.F
0F92:  BRA     FA6
0F94:  COM     W0,W0
0F96:  COM     W1,W1
0F98:  COM     W2,W2
0F9A:  COM     W3,W3
0F9C:  INC     W0,W0
0F9E:  ADDC    #0,W1
0FA0:  ADDC    #0,W2
0FA2:  ADDC    #0,W3
0FA4:  BRA     FA6
0FA6:  MOV     #16,W5
0FA8:  REPEAT  #5
0FAA:  MOV     [--W15],[W5--]
0FAC:  MOV     [--W15],W5
0FAE:  RETURN  
.................... 
.................... #list
.................... 
.................... 
.................... //#fuses PR,HS,NOWDT
.................... #fuses PR_PLL,HS,NOWDT 
.................... #device ADC=12
.................... #use delay(clock=40MHz)
.................... //!#include <serial.h>
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
*
0C6E:  MOV     W5,[W15++]
0C70:  MOV     W6,[W15++]
0C72:  MOV     W7,[W15++]
0C74:  MOV     W8,[W15++]
0C76:  CLR     D3E
0C78:  CLR     D40
0C7A:  CLR     D42
0C7C:  MOV     #3FF0,W4
0C7E:  MOV     W4,D44
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
0C80:  MOV     #FF1F,W4
0C82:  MOV     W4,D4E
0C84:  SETM    D50
0C86:  SETM    D52
0C88:  MOV     #BFDF,W4
0C8A:  MOV     W4,D54
0C8C:  MOV     #1C35,W4
0C8E:  MOV     W4,D56
0C90:  MOV     #5555,W4
0C92:  MOV     W4,D58
0C94:  MOV     #5555,W4
0C96:  MOV     W4,D5A
0C98:  MOV     #3FA5,W4
0C9A:  MOV     W4,D5C
0C9C:  MOV     #3F1C,W4
0C9E:  MOV     W4,D5E
0CA0:  MOV     #16A7,W4
0CA2:  MOV     W4,D60
0CA4:  MOV     #C16C,W4
0CA6:  MOV     W4,D62
0CA8:  MOV     #BF56,W4
0CAA:  MOV     W4,D64
0CAC:  MOV     #F3E6,W4
0CAE:  MOV     W4,D66
0CB0:  MOV     #D65,W4
0CB2:  MOV     W4,D68
0CB4:  MOV     #1A0,W4
0CB6:  MOV     W4,D6A
0CB8:  MOV     #3EFA,W4
0CBA:  MOV     W4,D6C
0CBC:  MOV     #A3E,W4
0CBE:  MOV     W4,D6E
0CC0:  MOV     #3931,W4
0CC2:  MOV     W4,D70
0CC4:  MOV     #7E4C,W4
0CC6:  MOV     W4,D72
0CC8:  MOV     #BE92,W4
0CCA:  MOV     W4,D74
0CCC:  MOV     #DDFB,W4
0CCE:  MOV     W4,D76
0CD0:  MOV     #2B77,W4
0CD2:  MOV     W4,D78
0CD4:  MOV     #EDB1,W4
0CD6:  MOV     W4,D7A
0CD8:  MOV     #3E21,W4
0CDA:  MOV     W4,D7C
0CDC:  MOV     #6FCC,W4
0CDE:  MOV     W4,D7E
0CE0:  MOV     #8FF7,W4
0CE2:  MOV     W4,D80
0CE4:  MOV     #C610,W4
0CE6:  MOV     W4,D82
0CE8:  MOV     #BDA8,W4
0CEA:  MOV     W4,D84
0CEC:  MOV     #124C,W4
0CEE:  MOV     W4,D86
0CF0:  MOV     #8E1C,W4
0CF2:  MOV     W4,D88
0CF4:  MOV     #3AF9,W4
0CF6:  MOV     W4,D8A
0CF8:  MOV     #3CF3,W4
0CFA:  MOV     W4,D8C
0CFC:  MOV     #7676,W4
0CFE:  MOV     W4,D8E
0D00:  MOV     #350F,W4
0D02:  MOV     W4,D90
0D04:  MOV     #C0DE,W4
0D06:  MOV     W4,D92
0D08:  MOV     #3CF0,W4
0D0A:  MOV     W4,D94
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
0D0C:  MOV     D24,W0
0D0E:  MOV     D26,W1
0D10:  MOV     D28,W2
0D12:  MOV     D2A,W3
0D14:  MOV     #0,W4
0D16:  MOV     #0,W5
0D18:  MOV     #0,W6
0D1A:  MOV     #0,W7
0D1C:  CALL    BEA
0D20:  BRA     NC,D2C
0D22:  MOV     #D24,W0
0D24:  MOV     #D24,W1
0D26:  REPEAT  #7
0D28:  MOV     [W0++],[W1++]
0D2A:  BTG.B   D2B.7
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0D2C:  MOV     D24,W0
0D2E:  MOV     D26,W1
0D30:  MOV     D28,W2
0D32:  MOV     D2A,W3
0D34:  MOV     #C884,W4
0D36:  MOV     #6DC9,W5
0D38:  MOV     #5F30,W6
0D3A:  MOV     #3FE4,W7
0D3C:  CALL    68C
0D40:  CALL    79C
0D44:  MOV.B   W0L,D2C
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
0D46:  MOV     D24,W0
0D48:  MOV     D26,W1
0D4A:  MOV     D28,W2
0D4C:  MOV     D2A,W3
0D4E:  MOV     #C884,W4
0D50:  MOV     #6DC9,W5
0D52:  MOV     #5F30,W6
0D54:  MOV     #3FE4,W7
0D56:  CALL    68C
0D5A:  MOV     W0,W5
0D5C:  MOV     W1,W6
0D5E:  MOV     W2,W7
0D60:  MOV     W3,W8
0D62:  MOV     #0,W1
0D64:  MOV     #0,W2
0D66:  MOV     #0,W3
0D68:  MOV.B   D2C,W0L
0D6A:  CLR.B   1
0D6C:  CALL    B80
0D70:  BSET.B  43.0
0D72:  MOV     W5,[W15++]
0D74:  MOV     W6,[W15++]
0D76:  MOV     W7,[W15++]
0D78:  MOV     W0,W4
0D7A:  MOV     W5,W0
0D7C:  MOV     W1,W5
0D7E:  MOV     W6,W1
0D80:  MOV     W2,W6
0D82:  MOV     W7,W2
0D84:  MOV     W3,W7
0D86:  MOV     W8,W3
0D88:  CALL    8CA
0D8C:  MOV     [--W15],W7
0D8E:  MOV     [--W15],W6
0D90:  MOV     [--W15],W5
0D92:  MOV     W0,D46
0D94:  MOV     W1,D48
0D96:  MOV     W2,D4A
0D98:  MOV     W3,D4C
....................    quad = quad % 4;                    // quadrant (0 to 3)
0D9A:  MOV.B   D2C,W0L
0D9C:  AND.B   W0L,#3,W0L
0D9E:  MOV.B   W0L,D2C
.................... 
....................    if (quad == 0 || quad == 2)
0DA0:  CP0.B   D2C
0DA2:  BRA     Z,DAA
0DA4:  MOV     D2C,W4
0DA6:  CP.B    W4L,#2
0DA8:  BRA     NZ,DC8
....................       t = frac * PI_DIV_BY_TWO;
0DAA:  MOV     D46,W0
0DAC:  MOV     D48,W1
0DAE:  MOV     D4A,W2
0DB0:  MOV     D4C,W3
0DB2:  MOV     #2D18,W4
0DB4:  MOV     #5444,W5
0DB6:  MOV     #21FB,W6
0DB8:  MOV     #3FF9,W7
0DBA:  CALL    68C
0DBE:  MOV     W0,D36
0DC0:  MOV     W1,D38
0DC2:  MOV     W2,D3A
0DC4:  MOV     W3,D3C
0DC6:  BRA     E5C
....................    else if (quad == 1)
0DC8:  MOV     D2C,W4
0DCA:  CP.B    W4L,#1
0DCC:  BRA     NZ,E16
....................       t = (1-frac) * PI_DIV_BY_TWO;
0DCE:  BSET.B  43.0
0DD0:  MOV     #0,W0
0DD2:  MOV     #0,W1
0DD4:  MOV     #0,W2
0DD6:  MOV     #3FF0,W3
0DD8:  MOV     D46,W4
0DDA:  MOV     D48,W5
0DDC:  MOV     D4A,W6
0DDE:  MOV     D4C,W7
0DE0:  CALL    8CA
0DE4:  MOV     W0,W5
0DE6:  MOV     W1,W6
0DE8:  MOV     W2,W7
0DEA:  MOV     W3,W8
0DEC:  MOV     W5,[W15++]
0DEE:  MOV     W6,[W15++]
0DF0:  MOV     W7,[W15++]
0DF2:  MOV     W5,W0
0DF4:  MOV     W6,W1
0DF6:  MOV     W7,W2
0DF8:  MOV     W8,W3
0DFA:  MOV     #2D18,W4
0DFC:  MOV     #5444,W5
0DFE:  MOV     #21FB,W6
0E00:  MOV     #3FF9,W7
0E02:  CALL    68C
0E06:  MOV     [--W15],W7
0E08:  MOV     [--W15],W6
0E0A:  MOV     [--W15],W5
0E0C:  MOV     W0,D36
0E0E:  MOV     W1,D38
0E10:  MOV     W2,D3A
0E12:  MOV     W3,D3C
0E14:  BRA     E5C
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0E16:  BSET.B  43.0
0E18:  MOV     D46,W0
0E1A:  MOV     D48,W1
0E1C:  MOV     D4A,W2
0E1E:  MOV     D4C,W3
0E20:  MOV     #0,W4
0E22:  MOV     #0,W5
0E24:  MOV     #0,W6
0E26:  MOV     #3FF0,W7
0E28:  CALL    8CA
0E2C:  MOV     W0,W5
0E2E:  MOV     W1,W6
0E30:  MOV     W2,W7
0E32:  MOV     W3,W8
0E34:  MOV     W5,[W15++]
0E36:  MOV     W6,[W15++]
0E38:  MOV     W7,[W15++]
0E3A:  MOV     W5,W0
0E3C:  MOV     W6,W1
0E3E:  MOV     W7,W2
0E40:  MOV     W8,W3
0E42:  MOV     #2D18,W4
0E44:  MOV     #5444,W5
0E46:  MOV     #21FB,W6
0E48:  MOV     #3FF9,W7
0E4A:  CALL    68C
0E4E:  MOV     [--W15],W7
0E50:  MOV     [--W15],W6
0E52:  MOV     [--W15],W5
0E54:  MOV     W0,D36
0E56:  MOV     W1,D38
0E58:  MOV     W2,D3A
0E5A:  MOV     W3,D3C
.................... 
....................    y = 1.0;
0E5C:  CLR     D2E
0E5E:  CLR     D30
0E60:  CLR     D32
0E62:  MOV     #3FF0,W4
0E64:  MOV     W4,D34
....................    t = t * t;
0E66:  MOV     D36,W0
0E68:  MOV     D38,W1
0E6A:  MOV     D3A,W2
0E6C:  MOV     D3C,W3
0E6E:  MOV     D36,W4
0E70:  MOV     D38,W5
0E72:  MOV     D3A,W6
0E74:  MOV     D3C,W7
0E76:  CALL    68C
0E7A:  MOV     W0,D36
0E7C:  MOV     W1,D38
0E7E:  MOV     W2,D3A
0E80:  MOV     W3,D3C
....................    for (i = 0; i <= 8; i++)
0E82:  CLR.B   D2D
0E84:  MOV     D2C,W4
0E86:  LSR     W4,#8,W4
0E88:  CP.B    W4L,#8
0E8A:  BRA     GTU,EEE
....................    {
....................       t2 = t2 * t;
0E8C:  MOV     D3E,W0
0E8E:  MOV     D40,W1
0E90:  MOV     D42,W2
0E92:  MOV     D44,W3
0E94:  MOV     D36,W4
0E96:  MOV     D38,W5
0E98:  MOV     D3A,W6
0E9A:  MOV     D3C,W7
0E9C:  CALL    68C
0EA0:  MOV     W0,D3E
0EA2:  MOV     W1,D40
0EA4:  MOV     W2,D42
0EA6:  MOV     W3,D44
....................       y = y + p_64[i] * t2;
0EA8:  MOV.B   D2D,W0L
0EAA:  CLR.B   1
0EAC:  SL      W0,#3,W0
0EAE:  MOV     #D4E,W4
0EB0:  ADD     W0,W4,W0
0EB2:  MOV     W0,W5
0EB4:  MOV     W5,[W15++]
0EB6:  MOV     [W5],W0
0EB8:  MOV     [++W5],W1
0EBA:  MOV     [++W5],W2
0EBC:  MOV     [++W5],W3
0EBE:  MOV     D3E,W4
0EC0:  MOV     D40,W5
0EC2:  MOV     D42,W6
0EC4:  MOV     D44,W7
0EC6:  CALL    68C
0ECA:  MOV     [--W15],W5
0ECC:  BCLR.B  43.0
0ECE:  MOV     W0,W4
0ED0:  MOV     W1,W5
0ED2:  MOV     W2,W6
0ED4:  MOV     W3,W7
0ED6:  MOV     D2E,W0
0ED8:  MOV     D30,W1
0EDA:  MOV     D32,W2
0EDC:  MOV     D34,W3
0EDE:  CALL    8CA
0EE2:  MOV     W0,D2E
0EE4:  MOV     W1,D30
0EE6:  MOV     W2,D32
0EE8:  MOV     W3,D34
0EEA:  INC.B   0D2D
0EEC:  BRA     E84
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0EEE:  MOV     D2C,W4
0EF0:  CP.B    W4L,#2
0EF2:  BRA     Z,EFA
0EF4:  MOV     D2C,W4
0EF6:  CP.B    W4L,#1
0EF8:  BRA     NZ,F04
....................       y = -y;  // correct sign
0EFA:  MOV     #D2E,W0
0EFC:  MOV     #D2E,W1
0EFE:  REPEAT  #7
0F00:  MOV     [W0++],[W1++]
0F02:  BTG.B   D35.7
.................... 
....................    return (y);
0F04:  MOV     D2E,W0
0F06:  MOV     D30,W1
0F08:  MOV     D32,W2
0F0A:  MOV     D34,W3
0F0C:  MOV     [--W15],W8
0F0E:  MOV     [--W15],W7
0F10:  MOV     [--W15],W6
0F12:  MOV     [--W15],W5
0F14:  RETURN  
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
0F16:  MOV     W5,[W15++]
0F18:  MOV     W6,[W15++]
0F1A:  MOV     W7,[W15++]
0F1C:  MOV     W8,[W15++]
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
0F1E:  BSET.B  43.0
0F20:  MOV     D14,W0
0F22:  MOV     D16,W1
0F24:  MOV     D18,W2
0F26:  MOV     D1A,W3
0F28:  MOV     #2D18,W4
0F2A:  MOV     #5444,W5
0F2C:  MOV     #21FB,W6
0F2E:  MOV     #3FF9,W7
0F30:  CALL    8CA
0F34:  MOV     W0,W5
0F36:  MOV     W1,W6
0F38:  MOV     W2,W7
0F3A:  MOV     W3,W8
0F3C:  MOV     W5,D24
0F3E:  MOV     W6,D26
0F40:  MOV     W7,D28
0F42:  MOV     W8,D2A
0F44:  CALL    C6E
0F48:  MOV     [--W15],W8
0F4A:  MOV     [--W15],W7
0F4C:  MOV     [--W15],W6
0F4E:  MOV     [--W15],W5
0F50:  RETURN  
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #define P1TCON 0x01C0
.................... #define P1TMR 0x01C2
.................... #define P1TPER 0x01C4
.................... #define P1SECMP 0x01C6
.................... #define PWM1CON1 0x01C8 
.................... #define PWM1CON2 0x01CA
.................... #define P1DTCON1 0x01CC
.................... #define P1DTCON2 0x01CE
.................... #define P1FLTACON 0x01D0
.................... #define P1OVDCON 0x01D4 
.................... #define P1DC1 0x01D6 
.................... #define P1DC2 0x01D8
.................... #define P1DC3 0x01DA
.................... #define IPC14 0x00C0
.................... #define CLKDIV 0x0744
.................... #define PLLFBD 0x0746
.................... 
.................... 
.................... #define Tick_Out PIN_B0
.................... //!#define TOGGLE_PIN PIN_B1
.................... //!#define ADC_TIME_CHECK PIN_B1
.................... #define Sync_Out PIN_A4
.................... #define Shut_Down PIN_A1
.................... #define Div_pin PIN_B2
.................... 
.................... #define voltage_offset 624//1248
.................... #define low_duty_limit 32
.................... #define high_duty_limit 1217
.................... #define SLOPE 2.7
.................... 
.................... #define break_level 5
.................... #define sustain_level 200
.................... #define break_amplitude 0
.................... #define pedestal_amplitude 10
.................... #define peak_amplitude 550
.................... 
.................... #define throttle_PIN PIN_B1
.................... 
.................... #define Voltage_Current_PIN   PIN_B11
.................... 
.................... #use    fast_io(a)
.................... #use    fast_io(b)
.................... 
.................... const unsigned max_samples=30.0;
.................... unsigned int16 duty[3]={0,0,0},sample=0;
.................... signed int16 sine_table[max_samples];
.................... unsigned int16 sine_index,phase_angle[3] = {0 , 0 , 0};
.................... double theeta;
.................... signed int32 reference[3] = {0,0,0};
.................... 
.................... int1 tick=0;
.................... signed int16 peak_voltage =0;//  1184; 
.................... const unsigned max_freq = 250; //Hz
.................... const double per_clock_tick = 0.006405; //ms
.................... unsigned int16 timer_table[max_freq];
.................... unsigned int16 gain_table[256];
.................... unsigned int16 raw_adc =0 ;
.................... signed int16 throttle_level = 0;
.................... unsigned int16 freq = 1;
.................... unsigned int16 temp = 0;
.................... 
.................... int1 tick_count = 0;
.................... 
.................... void timer_reload(void);
.................... void voltage_gain(void);
.................... 
.................... #int_RDA
.................... void  RDA_isr(void) 
*
0200:  PUSH    42
0202:  PUSH    36
0204:  PUSH    32
0206:  MOV     W0,[W15++]
0208:  MOV     #2,W0
020A:  REPEAT  #C
020C:  MOV     [W0++],[W15++]
.................... {
.................... //!     if(U1STA.URXDA == 1)
.................... //!     {
.................... //!       //   IFS0.U1RXIF = 0; // Clear RX Interrupt flag
.................... //!          rx_data = U1RXREG;
.................... //!          U1TXREG=rx_data;
.................... //!          startup_gain=rx_data;
.................... //!     }        
.................... }
020E:  BCLR.B  85.3
0210:  MOV     #1A,W0
0212:  REPEAT  #C
0214:  MOV     [--W15],[W0--]
0216:  MOV     [--W15],W0
0218:  POP     32
021A:  POP     36
021C:  POP     42
021E:  RETFIE  
.................... #int_TBE
.................... void  TBE_isr(void) 
0220:  BCLR.B  85.4
0222:  PUSH    42
0224:  PUSH    36
0226:  PUSH    32
0228:  MOV     W0,[W15++]
022A:  MOV     #2,W0
022C:  REPEAT  #C
022E:  MOV     [W0++],[W15++]
.................... {
....................    //IFS0.U1TXIF = 0; // Clear TX Interrupt flag
....................    //U1TXREG = 'a'; // Transmit one character  
.................... }
0230:  MOV     #1A,W0
0232:  REPEAT  #C
0234:  MOV     [--W15],[W0--]
0236:  MOV     [--W15],W0
0238:  POP     32
023A:  POP     36
023C:  POP     42
023E:  RETFIE  
.................... #int_UART1E
.................... void  UART1E_isr(void) 
0240:  PUSH    42
0242:  PUSH    36
0244:  PUSH    32
0246:  MOV     W0,[W15++]
0248:  MOV     #2,W0
024A:  REPEAT  #C
024C:  MOV     [W0++],[W15++]
.................... {
....................    /* Must clear the overrun error to keep UART receiving */
....................   // if(U1STA.OERR == 1)
....................    {
....................      // U1STA.OERR = 0;
....................    }
.................... }
.................... 
024E:  BCLR.B  8C.1
0250:  MOV     #1A,W0
0252:  REPEAT  #C
0254:  MOV     [--W15],[W0--]
0256:  MOV     [--W15],W0
0258:  POP     32
025A:  POP     36
025C:  POP     42
025E:  RETFIE  
.................... #int_EXT0
.................... void  EXT0_isr(void) 
0260:  PUSH    42
0262:  PUSH    36
0264:  PUSH    32
0266:  MOV     W0,[W15++]
0268:  MOV     #2,W0
026A:  REPEAT  #C
026C:  MOV     [W0++],[W15++]
.................... {
.................... }
.................... 
026E:  BCLR.B  84.0
0270:  MOV     #1A,W0
0272:  REPEAT  #C
0274:  MOV     [--W15],[W0--]
0276:  MOV     [--W15],W0
0278:  POP     32
027A:  POP     36
027C:  POP     42
027E:  RETFIE  
.................... #INT_TIMER2
.................... void  timer2_isr(void) 
0280:  PUSH    42
0282:  PUSH    36
0284:  PUSH    32
0286:  MOV     W0,[W15++]
0288:  MOV     #2,W0
028A:  REPEAT  #C
028C:  MOV     [W0++],[W15++]
.................... {
....................    tick = 1;
028E:  BSET.B  910.0
....................   
.................... 
.................... }
0290:  BCLR.B  84.7
0292:  MOV     #1A,W0
0294:  REPEAT  #C
0296:  MOV     [--W15],[W0--]
0298:  MOV     [--W15],W0
029A:  POP     32
029C:  POP     36
029E:  POP     42
02A0:  RETFIE  
.................... #int_PWM1
.................... void  PWM1_isr(void) 
02A2:  PUSH    42
02A4:  PUSH    36
02A6:  PUSH    32
02A8:  MOV     W0,[W15++]
02AA:  MOV     #2,W0
02AC:  REPEAT  #C
02AE:  MOV     [W0++],[W15++]
.................... {
....................     output_bit(throttle_PIN , 1);
02B0:  BSET.B  2CC.1
....................     delay_us(10);
02B2:  REPEAT  #C6
02B4:  NOP     
.................... //!   tick_count++;
.................... //!   if(tick_count >= 8)
.................... //!   {
.................... //!      output_toggle(Tick_Out);
.................... //!      tick = 1;
.................... //!      tick_count=0;
.................... //!   
.................... //!   }
.................... 
....................    output_bit(throttle_PIN , 0);
02B6:  BCLR.B  2CC.1
.................... }
02B8:  BCLR.B  8B.1
02BA:  MOV     #1A,W0
02BC:  REPEAT  #C
02BE:  MOV     [--W15],[W0--]
02C0:  MOV     [--W15],W0
02C2:  POP     32
02C4:  POP     36
02C6:  POP     42
02C8:  RETFIE  
.................... #INT_TIMER1
.................... void  timer1_isr(void) 
*
030C:  PUSH    42
030E:  PUSH    36
0310:  PUSH    32
0312:  MOV     W0,[W15++]
0314:  MOV     #2,W0
0316:  REPEAT  #C
0318:  MOV     [W0++],[W15++]
.................... {
.................... 
.................... //!   output_toggle(TOGGLE_PIN);
....................    output_bit(Tick_Out,1);
031A:  BSET.B  2CC.0
.................... //!   set_adc_channel(5);
....................    sample = (sample+1)%max_samples;
031C:  MOV     8B6,W4
031E:  ADD     W4,#1,W5
0320:  MOV     #1E,W4
0322:  REPEAT  #11
0324:  DIV.U   W5,W4
0326:  MOV     W1,8B6
....................    phase_angle[0] = sample;
0328:  PUSH    8B6
032A:  POP     8F6
....................    phase_angle[1] = (sample+10)%max_samples;
032C:  MOV     8B6,W4
032E:  ADD     W4,#A,W5
0330:  MOV     #1E,W4
0332:  REPEAT  #11
0334:  DIV.U   W5,W4
0336:  MOV     W1,8F8
....................    phase_angle[2] = (sample+20)%max_samples;
0338:  MOV     8B6,W4
033A:  ADD     W4,#14,W5
033C:  MOV     #1E,W4
033E:  REPEAT  #11
0340:  DIV.U   W5,W4
0342:  MOV     W1,8FA
.................... 
....................    for (int i = 0 ; i < 3 ; i++) {
0344:  CLR     DD6
0346:  MOV     DD6,W4
0348:  CP      W4,#3
034A:  BRA     GE,4E2
....................       
....................       reference[i] = sine_table[phase_angle[i]];
034C:  MOV     DD6,W4
034E:  MUL.UU  W4,#4,W0
0350:  MOV     #904,W4
0352:  ADD     W0,W4,W5
0354:  MOV     DD6,W4
0356:  MUL.UU  W4,#2,W0
0358:  MOV     #8F6,W4
035A:  ADD     W0,W4,W0
035C:  MOV     [W0],W6
035E:  SL      W6,#1,W0
0360:  MOV     #8B8,W4
0362:  ADD     W0,W4,W0
0364:  MOV     W0,W4
0366:  MOV     [W4],W0
0368:  CLR     W1
036A:  BTSC    W0.F
036C:  SETM    W1
036E:  MOV     #0,W4
0370:  MOV     [W4++],[W5++]
0372:  MOV     [W4++],[W5++]
....................       reference[i] = reference[i] * peak_voltage;
0374:  MOV     DD6,W4
0376:  MUL.UU  W4,#4,W0
0378:  MOV     #904,W4
037A:  ADD     W0,W4,W5
037C:  MOV     DD6,W4
037E:  MUL.UU  W4,#4,W0
0380:  MOV     #904,W4
0382:  ADD     W0,W4,W0
0384:  MOV     #C,W4
0386:  MOV     [W0++],[W4++]
0388:  MOV     [W0++],[W4++]
038A:  MOV     912,W0
038C:  CLR     W1
038E:  BTSC    W0.F
0390:  SETM    W1
0392:  MOV     W0,W2
0394:  MOV     W1,W3
0396:  MOV     W6,W0
0398:  MOV     W7,W1
039A:  CALL    2CA
039E:  MOV     #0,W4
03A0:  MOV     [W4++],[W5++]
03A2:  MOV     [W4++],[W5++]
....................       if( reference[i] > 0)
03A4:  MOV     DD6,W4
03A6:  MUL.UU  W4,#4,W0
03A8:  MOV     #904,W4
03AA:  ADD     W0,W4,W0
03AC:  MOV     #A,W4
03AE:  MOV     [W0++],[W4++]
03B0:  MOV     [W0++],[W4++]
03B2:  CP      W6,#0
03B4:  BRA     LT,3E2
03B6:  BRA     GT,3BC
03B8:  CP      W5,#0
03BA:  BRA     LEU,3E2
....................       {
....................          reference[i] = reference[i] >> 8; 
03BC:  MOV     DD6,W4
03BE:  MUL.UU  W4,#4,W0
03C0:  MOV     #904,W4
03C2:  ADD     W0,W4,W5
03C4:  MOV     DD6,W4
03C6:  MUL.UU  W4,#4,W0
03C8:  MOV     #904,W4
03CA:  ADD     W0,W4,W0
03CC:  MOV     #C,W4
03CE:  MOV     [W0++],[W4++]
03D0:  MOV     [W0++],[W4++]
03D2:  MOV.B   D,W0L
03D4:  MOV.B   W0L,[W5]
03D6:  MOV.B   W7L,[W5+#1]
03D8:  MOV.B   F,W0L
03DA:  MOV.B   W0L,[W5+#2]
03DC:  MOV.B   #0,W0L
03DE:  MOV.B   W0L,[W5+#3]
....................       }
03E0:  BRA     45E
....................       else if( reference[i] < 0)
03E2:  MOV     DD6,W4
03E4:  MUL.UU  W4,#4,W0
03E6:  MOV     #904,W4
03E8:  ADD     W0,W4,W0
03EA:  MOV     #A,W4
03EC:  MOV     [W0++],[W4++]
03EE:  MOV     [W0++],[W4++]
03F0:  CP      W6,#0
03F2:  BRA     GT,45E
03F4:  BRA     LT,3FA
03F6:  CP      W5,#0
03F8:  BRA     C,45E
....................       {
....................          reference[i] = 0 - reference[i];
03FA:  MOV     DD6,W4
03FC:  MUL.UU  W4,#4,W0
03FE:  MOV     #904,W4
0400:  ADD     W0,W4,W5
0402:  MOV     DD6,W4
0404:  MUL.UU  W4,#4,W0
0406:  MOV     #904,W4
0408:  ADD     W0,W4,W0
040A:  MOV     W0,W4
040C:  MOV     #0,W3
040E:  MOV     [W4++],[W3++]
0410:  MOV     [W4++],[W3++]
0412:  MOV     #0,W4
0414:  SUB     W4,W0,[W5]
0416:  MOV     #0,W4
0418:  SUBB    W4,W1,[++W5]
....................          reference[i] = reference[i] >> 8;
041A:  MOV     DD6,W4
041C:  MUL.UU  W4,#4,W0
041E:  MOV     #904,W4
0420:  ADD     W0,W4,W5
0422:  MOV     DD6,W4
0424:  MUL.UU  W4,#4,W0
0426:  MOV     #904,W4
0428:  ADD     W0,W4,W0
042A:  MOV     #C,W4
042C:  MOV     [W0++],[W4++]
042E:  MOV     [W0++],[W4++]
0430:  MOV.B   D,W0L
0432:  MOV.B   W0L,[W5]
0434:  MOV.B   W7L,[W5+#1]
0436:  MOV.B   F,W0L
0438:  MOV.B   W0L,[W5+#2]
043A:  MOV.B   #0,W0L
043C:  MOV.B   W0L,[W5+#3]
....................          reference[i] = 0 - reference[i];
043E:  MOV     DD6,W4
0440:  MUL.UU  W4,#4,W0
0442:  MOV     #904,W4
0444:  ADD     W0,W4,W5
0446:  MOV     DD6,W4
0448:  MUL.UU  W4,#4,W0
044A:  MOV     #904,W4
044C:  ADD     W0,W4,W0
044E:  MOV     W0,W4
0450:  MOV     #0,W3
0452:  MOV     [W4++],[W3++]
0454:  MOV     [W4++],[W3++]
0456:  MOV     #0,W4
0458:  SUB     W4,W0,[W5]
045A:  MOV     #0,W4
045C:  SUBB    W4,W1,[++W5]
....................       }
....................       
....................       reference[i] = reference[i] + voltage_offset;
045E:  MOV     DD6,W4
0460:  MUL.UU  W4,#4,W0
0462:  MOV     #904,W4
0464:  ADD     W0,W4,W5
0466:  MOV     DD6,W4
0468:  MUL.UU  W4,#4,W0
046A:  MOV     #904,W4
046C:  ADD     W0,W4,W0
046E:  MOV     #C,W4
0470:  MOV     [W0++],[W4++]
0472:  MOV     [W0++],[W4++]
0474:  MOV     #270,W4
0476:  ADD     W6,W4,[W5]
0478:  ADDC    W7,#0,[++W5]
....................       if(reference[i] > high_duty_limit )
047A:  MOV     DD6,W4
047C:  MUL.UU  W4,#4,W0
047E:  MOV     #904,W4
0480:  ADD     W0,W4,W0
0482:  MOV     #A,W4
0484:  MOV     [W0++],[W4++]
0486:  MOV     [W0++],[W4++]
0488:  CP      W6,#0
048A:  BRA     LT,4AC
048C:  BRA     GT,494
048E:  MOV     #4C1,W4
0490:  CP      W4,W5
0492:  BRA     C,4AC
....................       { 
....................          reference[i] = high_duty_limit;
0494:  MOV     DD6,W4
0496:  MUL.UU  W4,#4,W0
0498:  MOV     #904,W4
049A:  ADD     W0,W4,W5
049C:  MOV.B   #C1,W0L
049E:  MOV.B   W0L,[W5]
04A0:  MOV.B   #4,W0L
04A2:  MOV.B   W0L,[W5+#1]
04A4:  MOV.B   #0,W0L
04A6:  MOV.B   W0L,[W5+#2]
04A8:  MOV.B   #0,W0L
04AA:  MOV.B   W0L,[W5+#3]
....................       }
....................       if(reference[i] < low_duty_limit)
04AC:  MOV     DD6,W4
04AE:  MUL.UU  W4,#4,W0
04B0:  MOV     #904,W4
04B2:  ADD     W0,W4,W0
04B4:  MOV     #A,W4
04B6:  MOV     [W0++],[W4++]
04B8:  MOV     [W0++],[W4++]
04BA:  CP      W6,#0
04BC:  BRA     GT,4DE
04BE:  BRA     LT,4C6
04C0:  MOV     #20,W4
04C2:  CP      W4,W5
04C4:  BRA     LEU,4DE
....................       { 
....................          reference[i] = low_duty_limit;
04C6:  MOV     DD6,W4
04C8:  MUL.UU  W4,#4,W0
04CA:  MOV     #904,W4
04CC:  ADD     W0,W4,W5
04CE:  MOV.B   #20,W0L
04D0:  MOV.B   W0L,[W5]
04D2:  MOV.B   #0,W0L
04D4:  MOV.B   W0L,[W5+#1]
04D6:  MOV.B   #0,W0L
04D8:  MOV.B   W0L,[W5+#2]
04DA:  MOV.B   #0,W0L
04DC:  MOV.B   W0L,[W5+#3]
....................       }
04DE:  INC     0DD6
04E0:  BRA     346
....................    }
....................       
.................... //!   
.................... //!    duty[0] = reference;
.................... //!    duty[1] = reference;
....................    *P1DC1 = reference[0];  *(P1DC1+1) = reference[0]>>8;
04E2:  MOV.B   904,W0L
04E4:  MOV.B   W0L,1D6
04E6:  MOV.B   905,W0L
04E8:  MOV.B   W0L,1D7
....................    *P1DC2 = reference[1];  *(P1DC2+1) = reference[1]>>8;
04EA:  MOV.B   908,W0L
04EC:  MOV.B   W0L,1D8
04EE:  MOV.B   909,W0L
04F0:  MOV.B   W0L,1D9
....................    *P1DC3 = reference[2];  *(P1DC3+1) = reference[2]>>8;
04F2:  MOV.B   90C,W0L
04F4:  MOV.B   W0L,1DA
04F6:  MOV.B   90D,W0L
04F8:  MOV.B   W0L,1DB
....................   
....................    if(sample < 15)
04FA:  MOV     8B6,W4
04FC:  CP      W4,#F
04FE:  BRA     C,504
....................    {
....................       output_bit(Sync_Out,1);
0500:  BSET.B  2C4.4
....................    }
0502:  BRA     506
....................    else
....................    {
....................       output_bit(Sync_Out,0);
0504:  BCLR.B  2C4.4
....................    }
.................... //!   if(sample == 0)
.................... //!   {
.................... //!      tick=1;
.................... //!   }
....................    output_bit(Tick_Out,0);
0506:  BCLR.B  2CC.0
0508:  BCLR.B  84.3
050A:  MOV     #1A,W0
050C:  REPEAT  #C
050E:  MOV     [--W15],[W0--]
0510:  MOV     [--W15],W0
0512:  POP     32
0514:  POP     36
0516:  POP     42
0518:  RETFIE  
.................... }
.................... void initMCPWM(void);
.................... void fill_sine_table(void);
.................... void main()
*
10D2:  MOV     #F80,W15
10D4:  MOV     #FFF,W0
10D6:  MOV     W0,20
10D8:  NOP     
10DA:  MOV     #4444,W0
10DC:  MOV     W0,A4
10DE:  MOV     #4444,W0
10E0:  MOV     W0,A6
10E2:  MOV     #4444,W0
10E4:  MOV     W0,A8
10E6:  BSET.B  81.7
10E8:  CLR     8B6
10EA:  BCLR.B  910.0
10EC:  CLR     912
10EE:  CLR     D08
10F0:  CLR     D0A
10F2:  MOV     #1,W4
10F4:  MOV     W4,D0C
10F6:  CLR     D0E
10F8:  BCLR.B  910.1
10FA:  SETM    32C
10FC:  BRA     119A
10FE:  DATA    C0,06,08
1100:  DATA    00,00,00
1102:  DATA    4B,F0,3F
1104:  DATA    5C,0A,58
1106:  DATA    F6,3B,8F
1108:  DATA    00,C0,3C
110A:  DATA    8B,28,AC
110C:  DATA    3C,BE,F6
110E:  DATA    3F,D2,D5
1110:  DATA    44,16,8C
1112:  DATA    15,D7,BF
1114:  DATA    69,00,5A
1116:  DATA    2E,1B,87
1118:  DATA    99,3F,9A
111A:  DATA    5F,AD,4B
111C:  DATA    91,E4,01
111E:  DATA    C0,5D,11
1120:  DATA    2F,92,E4
1122:  DATA    81,FB,3F
1124:  DATA    38,DA,91
1126:  DATA    80,9D,C5
1128:  DATA    E0,BF,6F
112A:  DATA    12,C0,B4
112C:  DATA    C3,09,AB
112E:  DATA    3F,6B,C1
1130:  DATA    03,4E,C1
1132:  DATA    B5,45,BF
1134:  DATA    F7,40,05
1136:  DATA    FF,00,5A
1138:  DATA    EF,3F,F3
113A:  DATA    A3,E2,F7
113C:  DATA    D7,FF,01
113E:  DATA    40,C0,B4
1140:  DATA    FF,05,3C
1142:  DATA    58,FC,3F
1144:  DATA    3B,D3,C0
1146:  DATA    B5,BA,8C
1148:  DATA    E2,3F,39
114A:  DATA    D3,C7,3D
114C:  DATA    41,79,B2
114E:  DATA    3F,87,0D
1150:  DATA    3C,50,D0
1152:  DATA    AF,62,3F
1154:  DATA    30,4B,8D
1156:  DATA    A2,82,AA
1158:  DATA    04,40,09
115A:  DATA    A0,40,4A
115C:  DATA    05,76,03
115E:  DATA    40,EC,9E
1160:  DATA    37,88,A6
1162:  DATA    44,F0,3F
1164:  DATA    8F,12,8D
1166:  DATA    29,9A,5B
1168:  DATA    C7,3F,0E
116A:  DATA    E0,80,7C
116C:  DATA    A1,D8,86
116E:  DATA    3F,29,4B
1170:  DATA    FB,95,C2
1172:  DATA    37,1A,3F
1174:  DATA    40,06,00
1176:  DATA    C0,06,08
1178:  DATA    F6,00,C0
117A:  DATA    0C,09,04
117C:  DATA    00,00,00
117E:  INC     W2,W2
1180:  CP      W2,#1
1182:  BRA     NZ,118C
1184:  TBLRDL  [W1],W3
1186:  TBLRDH  [W1++],W4
1188:  MOV.B   6,W0L
118A:  RETURN  
118C:  CP      W2,#2
118E:  BRA     NZ,1194
1190:  MOV.B   7,W0L
1192:  RETURN  
1194:  MOV.B   8,W0L
1196:  CLR     W2
1198:  RETURN  
119A:  MOV     #0,W6
119C:  MOV     #0,W0
119E:  MOV     W0,32
11A0:  MOV     #10FE,W0
11A2:  MOV     W0,W1
11A4:  CLR     W2
11A6:  CALL    117E
11AA:  MOV.B   W0L,B
11AC:  CALL    117E
11B0:  MOV.B   W0L,A
11B2:  CP0     W5
11B4:  BRA     Z,11E8
11B6:  BTSS    W5.F
11B8:  BRA     11C8
11BA:  CALL    117E
11BE:  MOV.B   W0L,D
11C0:  CALL    117E
11C4:  MOV.B   W0L,C
11C6:  BCLR    W5.F
11C8:  BTSS    W5.E
11CA:  BRA     11DC
11CC:  BCLR    W5.E
11CE:  DEC     W5,W5
11D0:  CALL    117E
11D4:  MOV.B   W0L,W7L
11D6:  REPEAT  W5
11D8:  MOV.B   W7L,[W6++]
11DA:  BRA     11A6
11DC:  CALL    117E
11E0:  MOV.B   W0L,[W6++]
11E2:  DEC     W5,W5
11E4:  BRA     NZ,11DC
11E6:  BRA     11A6
.................... {  
....................    timer_reload();
11E8:  CALL    7FA
....................    voltage_gain();
11EC:  CALL    AB8
....................    fill_sine_table();
11F0:  CALL    FB0
....................    throttle_level = 0;
11F4:  CLR     D0A
....................    freq = 1;
11F6:  MOV     #1,W4
11F8:  MOV     W4,D0C
.................... 
....................    
....................    
.................... 
....................    
.................... //!      U1MODE.STSEL = 0; // 1-Stop bit
.................... //!   U1MODE.PDSEL = 0; // No Parity, 8-Data bits
.................... //!   U1MODE.ABAUD = 0; // Auto-Baud disabled
.................... //!   U1MODE.BRGH = 0; // Standard-Speed mode
.................... //!   U1BRG = BRGVAL; // Baud Rate setting for 9600
.................... //!   U1STA.UTXISEL0 = 0; // Interrupt after one TX character is transmitted
.................... //!   U1STA.UTXISEL1 = 0;
.................... //!   IEC0.U1TXIE = 1; // Enable UART TX interrupt
.................... //!   IEC0.U1RXIE = 1; // Enable UART RX interrupt
.................... //!   U1STA.URXISEL = 0; // Interrupt after one RX character is received;
.................... //!   U1MODE.UARTEN = 1; // Enable UART
.................... //!   U1STA.UTXEN = 1; // Enable UART TX
....................    /* Wait at least 105 microseconds (1/9600) before sending first char */
....................    delay_us(105);
11FA:  REPEAT  #832
11FC:  NOP     
.................... //!   RPINR18.U1RXR=11;
.................... //!   RPOR5=0x0003;
....................    set_tris_b(0b1111110011111111);
11FE:  MOV     #FCFF,W4
1200:  MOV     W4,2C8
.................... //!   output_bit(UART_GND,0);
.................... //!   output_bit(UART_VCC,1);
.................... 
....................    
....................    output_bit(Tick_Out,0);
1202:  BCLR.B  2CC.0
.................... //!   output_bit(TOGGLE_PIN , 0);
....................    output_bit(throttle_PIN , 0);
1204:  BCLR.B  2CC.1
....................  //  output_bit(Shut_Down,1);
....................    enable_interrupts(INT_PWM1);
1206:  BSET.B  9B.1
.................... //!   enable_interrupts(INT_EXT0);
.................... 
.................... 
....................    
....................    
....................    *(CLKDIV+1)=0x00;  *CLKDIV=0b01000011; //PLLPOST=4 PLLPRE=5 total divider=20
1208:  CLR.B   745
120A:  MOV.B   #43,W0L
120C:  MOV.B   W0L,744
....................    *(PLLFBD+1)=0x00;  *PLLFBD=0b00100110; //PLLDIV=40 //
120E:  CLR.B   747
1210:  MOV.B   #26,W0L
1212:  MOV.B   W0L,746
.................... 
....................    initMCPWM();
1214:  CALL    1078
....................    set_tris_a(0x0001);
1218:  MOV     #1,W4
121A:  MOV     W4,2C0
....................    set_tris_b(0x0FFD);
121C:  MOV     #FFD,W4
121E:  MOV     W4,2C8
....................    set_tris_b(0b1111110011111111);
1220:  MOV     #FCFF,W4
1222:  MOV     W4,2C8
.................... //!   output_bit(UART_GND,0);
.................... //!   output_bit(UART_VCC,1);
....................   
....................    output_drive(Tick_Out);
1224:  BCLR.B  2C8.0
.................... //!   output_drive(TOGGLE_PIN);
....................    output_drive(Sync_Out);
1226:  BCLR.B  2C0.4
....................    output_drive(throttle_PIN);
1228:  BCLR.B  2C8.1
....................    
.................... //!   setup_adc(ADC_CLOCK_INTERNAL);
....................    setup_adc(ADC_CLOCK_DIV_32);
122A:  MOV     #1F1F,W4
122C:  MOV     W4,324
122E:  MOV     #80E0,W4
1230:  MOV     W4,320
....................    setup_adc_ports(sAN5);
1232:  MOV     #FFDF,W4
1234:  MOV     W4,32C
1236:  CLR     322
....................    
....................    set_adc_channel(5);
1238:  MOV     #5,W4
123A:  MOV     W4,328
....................    delay_us(10);
123C:  REPEAT  #C6
123E:  NOP     
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64 , timer_table[freq]);
1240:  MOV     D0C,W0
1242:  SL      W0,#1,W0
1244:  MOV     #914,W4
1246:  ADD     W0,W4,W0
1248:  MOV     [W0],W5
124A:  CLR     104
124C:  MOV     W5,102
124E:  MOV     #8020,W4
1250:  MOV     W4,104
....................    setup_timer2(TMR_INTERNAL | TMR_DIV_BY_64, 156);
1252:  CLR     110
1254:  MOV     #9C,W4
1256:  MOV     W4,10C
1258:  MOV     #8020,W4
125A:  MOV     W4,110
.................... 
....................    enable_interrupts(INT_TIMER2);
125C:  BSET.B  94.7
....................    enable_interrupts(INT_TIMER1);
125E:  BSET.B  94.3
....................    enable_interrupts(INTR_GLOBAL);
1260:  BCLR.B  81.7
1262:  CLR     42
1264:  BSET.B  81.7
....................    
....................    while(TRUE)
....................    { 
....................    if(tick)
1266:  BTSS.B  910.0
1268:  BRA     12B8
....................       {
....................  //        tick=0;
....................          raw_adc = read_adc();
126A:  BCLR.B  320.0
126C:  BSET.B  320.1
126E:  BTSS.B  320.0
1270:  BRA     126E
1272:  PUSH    300
1274:  POP     D08
....................          raw_adc = raw_adc >> 2;
1276:  LSR     D08
1278:  LSR     D08
....................          throttle_level = raw_adc;  
127A:  PUSH    D08
127C:  POP     D0A
....................          if (throttle_level > 255)
127E:  MOV     D0A,W4
1280:  MOV     #FF,W3
1282:  CP      W3,W4
1284:  BRA     GE,128A
....................          {
....................             throttle_level = 255;
1286:  MOV     #FF,W4
1288:  MOV     W4,D0A
....................          }
....................          if (throttle_level < 0)
128A:  MOV     D0A,W4
128C:  CP      W4,#0
128E:  BRA     GE,1292
....................          {
....................             throttle_level = 0;
1290:  CLR     D0A
....................          }
....................          freq = throttle_level - 5 ;
1292:  MOV     D0A,W4
1294:  SUB     W4,#5,W0
1296:  MOV     W0,D0C
....................          peak_voltage = gain_table[throttle_level];
1298:  MOV     D0A,W4
129A:  MUL.UU  W4,#2,W0
129C:  MOV     #B08,W4
129E:  ADD     W0,W4,W0
12A0:  MOV     [W0],[W15++]
12A2:  POP     912
....................          setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64 , timer_table[freq]);
12A4:  MOV     D0C,W0
12A6:  SL      W0,#1,W0
12A8:  MOV     #914,W4
12AA:  ADD     W0,W4,W0
12AC:  MOV     [W0],W5
12AE:  CLR     104
12B0:  MOV     W5,102
12B2:  MOV     #8020,W4
12B4:  MOV     W4,104
....................          tick = 0;
12B6:  BCLR.B  910.0
....................          //putc(1,49);
....................       }   
12B8:  BRA     1266
....................    }
.................... }
.................... void initMCPWM(void)
12BA:  PWRSAV  #0
.................... {   
....................    *(P1TCON+1)=0x80;  *P1TCON=0x02;
*
1078:  MOV.B   #80,W0L
107A:  MOV.B   W0L,1C1
107C:  MOV.B   #2,W0L
107E:  MOV.B   W0L,1C0
....................  //  *(P1TMR+1)=0x00;  *P1TMR=0x78;
....................    *(P1TPER+1)=0x02;  *P1TPER=0x70;  
1080:  MOV.B   #2,W0L
1082:  MOV.B   W0L,1C5
1084:  MOV.B   #70,W0L
1086:  MOV.B   W0L,1C4
.................... //!   *(P1TPER+1)=0x00;  *P1TPER=0xFA;
....................    *(P1SECMP+1)=0x00;  *P1SECMP=0x01; //
1088:  CLR.B   1C7
108A:  MOV.B   #1,W0L
108C:  MOV.B   W0L,1C6
....................    *(PWM1CON1+1)=0x00;  *PWM1CON1=0x77;
108E:  CLR.B   1C9
1090:  MOV.B   #77,W0L
1092:  MOV.B   W0L,1C8
....................    *(PWM1CON2+1)=0x0f;  *PWM1CON2=0x02;
1094:  MOV.B   #F,W0L
1096:  MOV.B   W0L,1CB
1098:  MOV.B   #2,W0L
109A:  MOV.B   W0L,1CA
....................    *(P1DTCON1+1)=0x00;  *P1DTCON1=0x09; //0x09
109C:  CLR.B   1CD
109E:  MOV.B   #9,W0L
10A0:  MOV.B   W0L,1CC
....................    *(P1DTCON2+1)=0x00;  *P1DTCON2=0x00;
10A2:  CLR.B   1CF
10A4:  CLR.B   1CE
....................    *(P1FLTACON+1)=0x00;  *P1FLTACON=0x00; //0x0000
10A6:  CLR.B   1D1
10A8:  CLR.B   1D0
....................    *(P1OVDCON+1)=0x7F;  *P1OVDCON=0x7F;
10AA:  MOV.B   #7F,W0L
10AC:  MOV.B   W0L,1D5
10AE:  MOV.B   #7F,W0L
10B0:  MOV.B   W0L,1D4
....................    *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0];
10B2:  MOV.B   8B1,W0L
10B4:  MOV.B   W0L,1D7
10B6:  MOV.B   8B0,W0L
10B8:  MOV.B   W0L,1D6
....................    *(P1DC2+1) = duty[1]>>8;   *P1DC2 = duty[1];
10BA:  MOV.B   8B3,W0L
10BC:  MOV.B   W0L,1D9
10BE:  MOV.B   8B2,W0L
10C0:  MOV.B   W0L,1D8
....................    *(P1DC3+1) = duty[2]>>8;   *P1DC3 = duty[2];  
10C2:  MOV.B   8B5,W0L
10C4:  MOV.B   W0L,1DB
10C6:  MOV.B   8B4,W0L
10C8:  MOV.B   W0L,1DA
....................    *(IPC14+1) =0x00;*(IPC14) =0x70;
10CA:  CLR.B   C1
10CC:  MOV.B   #70,W0L
10CE:  MOV.B   W0L,C0
10D0:  RETURN  
.................... }
.................... void fill_sine_table(void)
*
0FB0:  MOV     W5,[W15++]
0FB2:  MOV     W6,[W15++]
0FB4:  MOV     W7,[W15++]
0FB6:  MOV     W8,[W15++]
.................... {
....................    for(sine_index=0;sine_index < max_samples;sine_index++)
0FB8:  CLR     8F4
0FBA:  MOV     8F4,W4
0FBC:  CP      W4,#1E
0FBE:  BRA     C,106E
....................    {
....................       theeta=sine_index*2.0*PI/max_samples;
0FC0:  MOV     8F4,W0
0FC2:  MOV     #0,W1
0FC4:  MOV     #0,W2
0FC6:  MOV     #0,W3
0FC8:  CALL    B80
0FCC:  MOV     #0,W4
0FCE:  MOV     #0,W5
0FD0:  MOV     #0,W6
0FD2:  MOV     #4000,W7
0FD4:  CALL    68C
0FD8:  MOV     W0,W5
0FDA:  MOV     W1,W6
0FDC:  MOV     W2,W7
0FDE:  MOV     W3,W8
0FE0:  MOV     W5,[W15++]
0FE2:  MOV     W6,[W15++]
0FE4:  MOV     W7,[W15++]
0FE6:  MOV     W5,W0
0FE8:  MOV     W6,W1
0FEA:  MOV     W7,W2
0FEC:  MOV     W8,W3
0FEE:  MOV     #2D18,W4
0FF0:  MOV     #5444,W5
0FF2:  MOV     #21FB,W6
0FF4:  MOV     #4009,W7
0FF6:  CALL    68C
0FFA:  MOV     [--W15],W7
0FFC:  MOV     [--W15],W6
0FFE:  MOV     [--W15],W5
1000:  MOV     W0,W5
1002:  MOV     W1,W6
1004:  MOV     W2,W7
1006:  MOV     W3,W8
1008:  MOV     W5,[W15++]
100A:  MOV     W6,[W15++]
100C:  MOV     W7,[W15++]
100E:  MOV     W5,W0
1010:  MOV     W6,W1
1012:  MOV     W7,W2
1014:  MOV     W8,W3
1016:  MOV     #0,W4
1018:  MOV     #0,W5
101A:  MOV     #0,W6
101C:  MOV     #403E,W7
101E:  CALL    584
1022:  MOV     [--W15],W7
1024:  MOV     [--W15],W6
1026:  MOV     [--W15],W5
1028:  MOV     W0,8FC
102A:  MOV     W1,8FE
102C:  MOV     W2,900
102E:  MOV     W3,902
....................       sine_table[sine_index]=255*sin(theeta);
1030:  MOV     8F4,W0
1032:  SL      W0,#1,W0
1034:  MOV     #8B8,W4
1036:  ADD     W0,W4,W5
1038:  PUSH    8FC
103A:  POP     D14
103C:  PUSH    8FE
103E:  POP     D16
1040:  PUSH    900
1042:  POP     D18
1044:  PUSH    902
1046:  POP     D1A
1048:  CALL    F16
104C:  MOV     W5,[W15++]
104E:  MOV     W0,W4
1050:  MOV     W1,W5
1052:  MOV     W2,W6
1054:  MOV     W3,W7
1056:  MOV     #0,W0
1058:  MOV     #0,W1
105A:  MOV     #E000,W2
105C:  MOV     #406F,W3
105E:  CALL    68C
1062:  MOV     [--W15],W5
1064:  CALL    F52
1068:  MOV     W0,[W5]
106A:  INC     08F4
106C:  BRA     FBA
....................    }
106E:  MOV     [--W15],W8
1070:  MOV     [--W15],W7
1072:  MOV     [--W15],W6
1074:  MOV     [--W15],W5
1076:  RETURN  
.................... }
.................... 
.................... void timer_reload(void) 
*
07FA:  MOV     W5,[W15++]
07FC:  MOV     W6,[W15++]
07FE:  MOV     W7,[W15++]
0800:  MOV     W8,[W15++]
0802:  CLR     D10
0804:  CLR     D12
0806:  CLR     D14
0808:  CLR     D16
.................... {
....................    double intr_per_sample = 0.0;
....................    
....................    for (int sample = 1 ; sample <= max_freq ; sample++) 
080A:  MOV     #1,W4
080C:  MOV     W4,D18
080E:  MOV     D18,W4
0810:  MOV     #FA,W3
0812:  CP      W3,W4
0814:  BRA     LT,8BC
....................    {
....................       intr_per_sample = ((1.0/sample)*1000)/max_samples;
0816:  MOV     D18,W0
0818:  CLR     W3
081A:  BTSC    W0.F
081C:  SETM    W3
081E:  MOV     W3,W1
0820:  MOV     W3,W2
0822:  CALL    51A
0826:  MOV     W0,W4
0828:  MOV     W1,W5
082A:  MOV     W2,W6
082C:  MOV     W3,W7
082E:  MOV     #0,W0
0830:  MOV     #0,W1
0832:  MOV     #0,W2
0834:  MOV     #3FF0,W3
0836:  CALL    584
083A:  MOV     W0,W5
083C:  MOV     W1,W6
083E:  MOV     W2,W7
0840:  MOV     W3,W8
0842:  MOV     W5,[W15++]
0844:  MOV     W6,[W15++]
0846:  MOV     W7,[W15++]
0848:  MOV     W5,W0
084A:  MOV     W6,W1
084C:  MOV     W7,W2
084E:  MOV     W8,W3
0850:  MOV     #0,W4
0852:  MOV     #0,W5
0854:  MOV     #4000,W6
0856:  MOV     #408F,W7
0858:  CALL    68C
085C:  MOV     [--W15],W7
085E:  MOV     [--W15],W6
0860:  MOV     [--W15],W5
0862:  MOV     W0,W5
0864:  MOV     W1,W6
0866:  MOV     W2,W7
0868:  MOV     W3,W8
086A:  MOV     W5,[W15++]
086C:  MOV     W6,[W15++]
086E:  MOV     W7,[W15++]
0870:  MOV     W5,W0
0872:  MOV     W6,W1
0874:  MOV     W7,W2
0876:  MOV     W8,W3
0878:  MOV     #0,W4
087A:  MOV     #0,W5
087C:  MOV     #0,W6
087E:  MOV     #403E,W7
0880:  CALL    584
0884:  MOV     [--W15],W7
0886:  MOV     [--W15],W6
0888:  MOV     [--W15],W5
088A:  MOV     W0,D10
088C:  MOV     W1,D12
088E:  MOV     W2,D14
0890:  MOV     W3,D16
....................       timer_table[sample] = intr_per_sample/per_clock_tick;     
0892:  MOV     D18,W4
0894:  MUL.UU  W4,#2,W0
0896:  MOV     #914,W4
0898:  ADD     W0,W4,W5
089A:  MOV     W5,[W15++]
089C:  MOV     D10,W0
089E:  MOV     D12,W1
08A0:  MOV     D14,W2
08A2:  MOV     D16,W3
08A4:  MOV     #7C07,W4
08A6:  MOV     #187E,W5
08A8:  MOV     #3C21,W6
08AA:  MOV     #3F7A,W7
08AC:  CALL    584
08B0:  MOV     [--W15],W5
08B2:  CALL    79C
08B6:  MOV     W0,[W5]
08B8:  INC     0D18
08BA:  BRA     80E
....................    }
....................    timer_table[0] = timer_table[1];
08BC:  PUSH    916
08BE:  POP     914
08C0:  MOV     [--W15],W8
08C2:  MOV     [--W15],W7
08C4:  MOV     [--W15],W6
08C6:  MOV     [--W15],W5
08C8:  RETURN  
.................... }
.................... 
.................... void voltage_gain(void) 
*
0AB8:  MOV     W5,[W15++]
0ABA:  MOV     W6,[W15++]
0ABC:  MOV     W7,[W15++]
0ABE:  MOV     W8,[W15++]
.................... {
....................    for (int i = 0 ; i <= break_level ; i++) {
0AC0:  CLR     D10
0AC2:  MOV     D10,W4
0AC4:  CP      W4,#5
0AC6:  BRA     GT,ADA
....................             gain_table[i] = 0; 
0AC8:  MOV     D10,W4
0ACA:  MUL.UU  W4,#2,W0
0ACC:  MOV     #B08,W4
0ACE:  ADD     W0,W4,W5
0AD0:  CLR.B   [W5]
0AD2:  MOV.B   #0,W0L
0AD4:  MOV.B   W0L,[W5+#1]
0AD6:  INC     0D10
0AD8:  BRA     AC2
....................    }
....................    
....................    for (int i = break_level+1 ; i <= sustain_level; i++) {     
0ADA:  MOV     #6,W4
0ADC:  MOV     W4,D12
0ADE:  MOV     D12,W4
0AE0:  MOV     #C8,W3
0AE2:  CP      W3,W4
0AE4:  BRA     LT,B56
....................         temp = SLOPE * i + pedestal_amplitude;
0AE6:  MOV     D12,W0
0AE8:  CLR     W3
0AEA:  BTSC    W0.F
0AEC:  SETM    W3
0AEE:  MOV     W3,W1
0AF0:  MOV     W3,W2
0AF2:  CALL    51A
0AF6:  MOV     W0,W4
0AF8:  MOV     W1,W5
0AFA:  MOV     W2,W6
0AFC:  MOV     W3,W7
0AFE:  MOV     #999A,W0
0B00:  MOV     #9999,W1
0B02:  MOV     #9999,W2
0B04:  MOV     #4005,W3
0B06:  CALL    68C
0B0A:  MOV     W0,W5
0B0C:  MOV     W1,W6
0B0E:  MOV     W2,W7
0B10:  MOV     W3,W8
0B12:  BCLR.B  43.0
0B14:  MOV     W5,[W15++]
0B16:  MOV     W6,[W15++]
0B18:  MOV     W7,[W15++]
0B1A:  MOV     W5,W0
0B1C:  MOV     W6,W1
0B1E:  MOV     W7,W2
0B20:  MOV     W8,W3
0B22:  MOV     #0,W4
0B24:  MOV     #0,W5
0B26:  MOV     #0,W6
0B28:  MOV     #4024,W7
0B2A:  CALL    8CA
0B2E:  MOV     [--W15],W7
0B30:  MOV     [--W15],W6
0B32:  MOV     [--W15],W5
0B34:  CALL    79C
0B38:  MOV     W0,D0E
....................         if(temp > peak_amplitude ) 
0B3A:  MOV     D0E,W4
0B3C:  MOV     #226,W3
0B3E:  CP      W3,W4
0B40:  BRA     C,B46
....................         {
....................          temp = peak_amplitude;
0B42:  MOV     #226,W4
0B44:  MOV     W4,D0E
....................         }
....................         gain_table[i] = temp;
0B46:  MOV     D12,W4
0B48:  MUL.UU  W4,#2,W0
0B4A:  MOV     #B08,W4
0B4C:  ADD     W0,W4,W5
0B4E:  MOV     D0E,W4
0B50:  MOV     W4,[W5+#0]
0B52:  INC     0D12
0B54:  BRA     ADE
....................    }
....................    for (int i = sustain_level+1 ; i <= 255; i++) {     
0B56:  MOV     #C9,W4
0B58:  MOV     W4,D14
0B5A:  MOV     D14,W4
0B5C:  MOV     #FF,W3
0B5E:  CP      W3,W4
0B60:  BRA     LT,B76
....................    gain_table[i] = peak_amplitude;
0B62:  MOV     D14,W4
0B64:  MUL.UU  W4,#2,W0
0B66:  MOV     #B08,W4
0B68:  ADD     W0,W4,W5
0B6A:  MOV.B   #26,W0L
0B6C:  MOV.B   W0L,[W5]
0B6E:  MOV.B   #2,W0L
0B70:  MOV.B   W0L,[W5+#1]
0B72:  INC     0D14
0B74:  BRA     B5A
....................    }
0B76:  MOV     [--W15],W8
0B78:  MOV     [--W15],W7
0B7A:  MOV     [--W15],W6
0B7C:  MOV     [--W15],W5
0B7E:  RETURN  
.................... 
.................... }

Configuration Fuses:
   Word  1L: 000F   NOWRTB NOBSS
          H: 0000  
   Word  2L: 0000  
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0083   PR_PLL IESO
          H: 0000  
   Word  5L: 00E6   HS NOOSCIO IOL1WAY
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00F7   PUT128 NOALTI2C1 LPOL_HIGH HPOL_HIGH NOPWMPIN
          H: 0000  
   Word  8L: 00C3   ICSP1 NOJTAG NODEBUG
          H: 0000  
