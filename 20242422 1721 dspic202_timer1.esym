D G "__PCD__" 0 366 ""5.112""
D G "__DEVICE__" 0 366 "2202"
D G "__DATE__" 0 366 ""24-Apr-24""
D G "__TIME__" 0 366 ""09:39:46""
D G "_UNICODE" 0 366 ""?""
D G "__EVAL" 0 366 ""?"" "!#include <pwm_3.h>"
c L "set_tris_a" 1 1 20 "FUNCTION"
F N "set_tris_a" 1 61 ""
V L "value" 1 61 "int16" `55 
F B "set_tris_a" 1 61 "void(int16 value)" `54 
F N "set_tris_b" 1 62 ""
V L "value" 1 62 "int16" `57 
F B "set_tris_b" 1 62 "void(int16 value)" `56 
F N "set_open_drain_a" 1 63 ""
V L "value" 1 63 "int16" `59 
F B "set_open_drain_a" 1 63 "void(int16 value)" `58 
F N "set_open_drain_b" 1 64 ""
V L "value" 1 64 "int16" `61 
F B "set_open_drain_b" 1 64 "void(int16 value)" `60 
F N "get_tris_a" 1 65 ""
F B "get_tris_a" 1 65 "int16()" `62 
F N "get_tris_b" 1 66 ""
F B "get_tris_b" 1 66 "int16()" `63 
F N "output_a" 1 67 ""
V L "value" 1 67 "int16" `65 
F B "output_a" 1 67 "void(int16 value)" `64 
F N "output_b" 1 68 ""
V L "value" 1 68 "int16" `67 
F B "output_b" 1 68 "void(int16 value)" `66 
F N "input_a" 1 69 ""
F B "input_a" 1 69 "int16()" `68 
F N "input_b" 1 70 ""
F B "input_b" 1 70 "int16()" `69 
F N "input_change_a" 1 71 ""
F B "input_change_a" 1 71 "sint16()" `70 
F N "input_change_b" 1 72 ""
F B "input_change_b" 1 72 "sint16()" `71 
F N "set_pullup" 1 73 ""
V L "state" 1 73 "int8" `73 
F B "set_pullup" 1 73 "void(int8 state)" `72 
F N "set_pullup" 1 74 ""
V L "state" 1 74 "int8" `75 
V L "pin" 1 74 "int16" `76 
F B "set_pullup" 1 74 "void(int8 state,int16 pin)" `74 
F N "set_pulldown" 1 75 ""
V L "state" 1 75 "int8" `78 
F B "set_pulldown" 1 75 "void(int8 state)" `77 
F N "set_pulldown" 1 76 ""
V L "state" 1 76 "int8" `80 
V L "pin" 1 76 "int16" `81 
F B "set_pulldown" 1 76 "void(int8 state,int16 pin)" `79 
F N "input" 1 77 ""
V L "pin" 1 77 "int16" `83 
F B "input" 1 77 "int8(int16 pin)" `82 
F N "input_state" 1 78 ""
V L "pin" 1 78 "int16" `85 
F B "input_state" 1 78 "int8(int16 pin)" `84 
F N "output_low" 1 79 ""
V L "pin" 1 79 "int16" `87 
F B "output_low" 1 79 "void(int16 pin)" `86 
F N "output_high" 1 80 ""
V L "pin" 1 80 "int16" `89 
F B "output_high" 1 80 "void(int16 pin)" `88 
F N "output_toggle" 1 81 ""
V L "pin" 1 81 "int16" `91 
F B "output_toggle" 1 81 "void(int16 pin)" `90 
F N "output_bit" 1 82 ""
V L "pin" 1 82 "int16" `93 
V L "level" 1 82 "int8" `94 
F B "output_bit" 1 82 "void(int16 pin,int8 level)" `92 
F N "output_float" 1 83 ""
V L "pin" 1 83 "int16" `96 
F B "output_float" 1 83 "void(int16 pin)" `95 
F N "output_drive" 1 84 ""
V L "pin" 1 84 "int16" `98 
F B "output_drive" 1 84 "void(int16 pin)" `97  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 87 "5648"
D G "PIN_A1" 1 88 "5649"
D G "PIN_A2" 1 89 "5650"
D G "PIN_A3" 1 90 "5651"
D G "PIN_A4" 1 91 "5652"
D G "PIN_B0" 1 93 "5712"
D G "PIN_B1" 1 94 "5713"
D G "PIN_B2" 1 95 "5714"
D G "PIN_B3" 1 96 "5715"
D G "PIN_B4" 1 97 "5716"
D G "PIN_B5" 1 98 "5717"
D G "PIN_B6" 1 99 "5718"
D G "PIN_B7" 1 100 "5719"
D G "PIN_B8" 1 101 "5720"
D G "PIN_B9" 1 102 "5721"
D G "PIN_B10" 1 103 "5722"
D G "PIN_B11" 1 104 "5723"
D G "PIN_B12" 1 105 "5724"
D G "PIN_B13" 1 106 "5725"
D G "PIN_B14" 1 107 "5726"
D G "PIN_B15" 1 108 "5727"
D G "FALSE" 1 111 "0"
D G "TRUE" 1 112 "1"
D G "BYTE" 1 114 "unsigned int8"
D G "BOOLEAN" 1 115 "int1"
D G "getc" 1 117 "getch"
D G "fgetc" 1 118 "getch"
D G "getchar" 1 119 "getch"
D G "putc" 1 120 "putchar"
D G "fputc" 1 121 "putchar"
D G "fgets" 1 122 "gets"
D G "fputs" 1 123 "puts"
c L "output_drive" 1 1 2 "FUNCTION"
F N "setup_uart" 1 127 ""
V L "baud" 1 127 "int32" `100 
F B "setup_uart" 1 127 "void(int32 baud)" `99 
F N "setup_uart" 1 128 ""
V L "baud" 1 128 "int32" `102 
V L "stream" 1 128 "int8" `103 
F B "setup_uart" 1 128 "void(int32 baud,int8 stream)" `101 
F N "setup_uart" 1 129 ""
V L "baud" 1 129 "int32" `105 
V L "stream" 1 129 "int8" `106 
V L "clock" 1 129 "int32" `107 
F B "setup_uart" 1 129 "void(int32 baud,int8 stream,int32 clock)" `104 
F N "set_uart_speed" 1 130 ""
V L "baud" 1 130 "int32" `109 
F B "set_uart_speed" 1 130 "void(int32 baud)" `108 
F N "set_uart_speed" 1 131 ""
V L "baud" 1 131 "int32" `111 
V L "stream" 1 131 "int8" `112 
F B "set_uart_speed" 1 131 "void(int32 baud,int8 stream)" `110 
F N "set_uart_speed" 1 132 ""
V L "baud" 1 132 "int32" `114 
V L "stream" 1 132 "int8" `115 
V L "clock" 1 132 "int32" `116 
F B "set_uart_speed" 1 132 "void(int32 baud,int8 stream,int32 clock)" `113  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 1 136 "2"
D G "UART_DATA" 1 137 "4"
D G "UART_AUTODETECT" 1 138 "8"
D G "UART_AUTODETECT_NOWAIT" 1 139 "9"
D G "UART_WAKEUP_ON_RDA" 1 140 "10"
D G "UART_SEND_BREAK" 1 141 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
F N "setup_wdt" 1 146 ""
V L "mode" 1 146 "int8" `118 
F B "setup_wdt" 1 146 "void(int8 mode)" `117 
F N "restart_wdt" 1 147 ""
F B "restart_wdt" 1 147 "void()" `119  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 1 149 "1"
D G "WDT_OFF" 1 150 "0"
D G "WDT_1MS" 1 152 "0x002"
D G "WDT_2MS" 1 153 "0x003"
D G "WDT_4MS" 1 154 "0x004"
D G "WDT_8MS" 1 155 "0x005"
D G "WDT_16MS" 1 156 "0x006"
D G "WDT_32MS" 1 157 "0x007"
D G "WDT_64MS" 1 158 "0x008"
D G "WDT_128MS" 1 159 "0x009"
D G "WDT_256MS" 1 160 "0x00A"
D G "WDT_512MS" 1 161 "0x00B"
D G "WDT_1S" 1 162 "0x00C"
D G "WDT_2S" 1 163 "0x00D"
D G "WDT_4S" 1 164 "0x00E"
D G "WDT_8S" 1 165 "0x00F"
D G "WDT_16S" 1 166 "0x010"
D G "WDT_33S" 1 167 "0x011"
D G "WDT_65S" 1 168 "0x030"
D G "WDT_131S" 1 169 "0x031"
c L "restart_wdt" 1 1 3 "FUNCTION"
F N "restart_cause" 1 174 ""
F B "restart_cause" 1 174 "int8()" `120 
F N "reset_cpu" 1 175 ""
F B "reset_cpu" 1 175 "void()" `121 
F N "sleep" 1 176 ""
F B "sleep" 1 176 "void()" `122 
F N "sleep" 1 177 ""
V L "mode" 1 177 "int8" `124 
F B "sleep" 1 177 "void(int8 mode)" `123  "Constants passed into RESTART_CAUSE() are:"
D G "RESTART_POWER_UP" 1 179 "0"
D G "RESTART_BROWNOUT" 1 180 "1"
D G "RESTART_WATCHDOG" 1 181 "4"
D G "RESTART_SOFTWARE" 1 182 "6"
D G "RESTART_MCLR" 1 183 "7"
D G "RESTART_ILLEGAL_OP" 1 184 "14"
D G "RESTART_TRAP_CONFLICT" 1 185 "15"
D G "RESTART_NONE" 1 186 "16" "No restart occurred, most common cause for returning this is restart_cause() was called multiple times, or wake-up from sleep from interrupt."
D G "SLEEP_FULL" 1 189 "0" "Default"
D G "SLEEP_IDLE" 1 190 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 2 "FUNCTION"
F N "setup_oscillator" 1 196 ""
V L "type" 1 196 "int8" `126 
V L "target" 1 196 "int32" `127 
F B "setup_oscillator" 1 196 "void(int8 type,int32 target)" `125 
F N "setup_oscillator" 1 197 ""
V L "type" 1 197 "int8" `129 
V L "target" 1 197 "int32" `130 
V L "source" 1 197 "int32" `131 
F B "setup_oscillator" 1 197 "void(int8 type,int32 target,int32 source)" `128  "Constants used in setup_oscillator() are:"
D G "OSC_INTERNAL" 1 199 "32" "Internal FRC and LPRC"
D G "OSC_CRYSTAL" 1 200 "1" "External Crystal"
D G "OSC_CLOCK" 1 201 "2" "External Oscillator"
D G "OSC_SECONDARY" 1 202 "16" "External SOSC"
c L "setup_oscillator" 1 1 4 "FUNCTION"
F N "setup_timer1" 1 208 ""
V L "mode" 1 208 "int16" `133 
F B "setup_timer1" 1 208 "void(int16 mode)" `132 
F N "setup_timer1" 1 209 ""
V L "mode" 1 209 "int16" `135 
V L "period" 1 209 "int16" `136 
F B "setup_timer1" 1 209 "void(int16 mode,int16 period)" `134 
F N "get_timer1" 1 210 ""
F B "get_timer1" 1 210 "int16()" `137 
F N "set_timer1" 1 211 ""
V L "value" 1 211 "int16" `139 
F B "set_timer1" 1 211 "void(int16 value)" `138 
F N "setup_timer2" 1 212 ""
V L "mode" 1 212 "int16" `141 
F B "setup_timer2" 1 212 "void(int16 mode)" `140 
F N "setup_timer2" 1 213 ""
V L "mode" 1 213 "int16" `143 
V L "period" 1 213 "int16" `144 
F B "setup_timer2" 1 213 "void(int16 mode,int16 period)" `142 
F N "get_timer2" 1 214 ""
F B "get_timer2" 1 214 "int16()" `145 
F N "set_timer2" 1 215 ""
V L "value" 1 215 "int16" `147 
F B "set_timer2" 1 215 "void(int16 value)" `146 
F N "setup_timer3" 1 216 ""
V L "mode" 1 216 "int16" `149 
F B "setup_timer3" 1 216 "void(int16 mode)" `148 
F N "setup_timer3" 1 217 ""
V L "mode" 1 217 "int16" `151 
V L "period" 1 217 "int16" `152 
F B "setup_timer3" 1 217 "void(int16 mode,int16 period)" `150 
F N "get_timer3" 1 218 ""
F B "get_timer3" 1 218 "int16()" `153 
F N "set_timer3" 1 219 ""
V L "value" 1 219 "int16" `155 
F B "set_timer3" 1 219 "void(int16 value)" `154 
F N "get_timer23" 1 220 ""
F B "get_timer23" 1 220 "int32()" `156 
F N "set_timer23" 1 221 ""
V L "value" 1 221 "int32" `158 
F B "set_timer23" 1 221 "void(int32 value)" `157  "Constants used for SETUP_TIMERx() are:"
D G "TMR_DISABLED" 1 224 "0x0000"
D G "TMR_INTERNAL" 1 225 "0x8000"
D G "TMR_EXTERNAL" 1 226 "0x8002"
D G "TMR_EXTERNAL_SYNC" 1 227 "0x8006" "This only applies to Timer1"
D G "TMR_EXTERNAL_RTC" 1 228 "0xC002" "This only applies to Timer1"
D G "TMR_DIV_BY_1" 1 231 "0x0000"
D G "TMR_DIV_BY_8" 1 232 "0x0010"
D G "TMR_DIV_BY_64" 1 233 "0x0020"
D G "TMR_DIV_BY_256" 1 234 "0x0030"
D G "TMR_HALT_IDLE" 1 236 "0x2000"
D G "TMR_CONTINUE_IDLE" 1 237 "0x0000"
D G "TMR_32_BIT" 1 239 "0x0008" "Only for even numbered timers"
D G "TMR_GATE" 1 240 "0x0040"
c L "set_timer23" 1 1 3 "FUNCTION"
F N "setup_capture" 1 245 ""
V L "module" 1 245 "int8" `160 
V L "mode" 1 245 "int16" `161 
F B "setup_capture" 1 245 "void(int8 module,int16 mode)" `159 
F N "get_capture" 1 246 ""
V L "module" 1 246 "int8" `163 
F B "get_capture" 1 246 "int16(int8 module)" `162 
F N "get_capture" 1 247 ""
V L "module" 1 247 "int8" `165 
V L "wait" 1 247 "int8" `166 
F B "get_capture" 1 247 "int16(int8 module,int8 wait)" `164  "Constants used for SETUP_CAPTURE() are:"
D G "CAPTURE_OFF" 1 249 "0x0000" "Capture OFF"
D G "CAPTURE_EE" 1 250 "0x0001" "Capture Every Edge"
D G "CAPTURE_FE" 1 251 "0x0002" "Capture Falling Edge"
D G "CAPTURE_RE" 1 252 "0x0003" "Capture Rising Edge"
D G "CAPTURE_DIV_4" 1 253 "0x0004" "Capture Every 4th Rising Edge"
D G "CAPTURE_DIV_16" 1 254 "0x0005" "Capture Every 16th Rising Edge"
D G "CAPTURE_INTERRUPT_ONLY" 1 255 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
D G "INTERRUPT_EVERY_CAPTURE" 1 258 "0x0000" "Interrupt on every capture event"
D G "INTERRUPT_SECOND_CAPTURE" 1 259 "0x0020" "Interrupt on every second capture event"
D G "INTERRUPT_THIRD_CAPTURE" 1 260 "0x0040" "Interrupt on every third capture event"
D G "INTERRUPT_FOURTH_CAPTURE" 1 261 "0x0060" "Interrupt on every fourth capture event"
D G "CAPTURE_TIMER2" 1 264 "0x0080" "On capture event Timer 2 is captured"
D G "CAPTURE_TIMER3" 1 265 "0x0000" "On capture event Timer 3 is captured"
D G "CAPTURE_HALT_IDLE" 1 268 "0x2000" "Capture module halts during idle mode"
D G "CAPTURE_CONTINUE_IDLE" 1 269 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 1 1 3 "FUNCTION"
F N "setup_compare" 1 274 ""
V L "module" 1 274 "int8" `168 
V L "mode" 1 274 "int16" `169 
F B "setup_compare" 1 274 "void(int8 module,int16 mode)" `167 
F N "set_pwm_duty" 1 275 ""
V L "module" 1 275 "int8" `171 
V L "duty" 1 275 "int16" `172 
F B "set_pwm_duty" 1 275 "void(int8 module,int16 duty)" `170 
F N "set_compare_time" 1 276 ""
V L "module" 1 276 "int8" `174 
V L "ocr" 1 276 "int16" `175 
F B "set_compare_time" 1 276 "void(int8 module,int16 ocr)" `173 
F N "set_compare_time" 1 277 ""
V L "module" 1 277 "int8" `177 
V L "ocr" 1 277 "int16" `178 
V L "ocrs" 1 277 "int16" `179 
F B "set_compare_time" 1 277 "void(int8 module,int16 ocr,int16 ocrs)" `176  "Constants used for SETUP_COMPARE() are:"
D G "COMPARE_OFF" 1 279 "0x0000" "Compare OFF"
D G "COMPARE_SET_ON_MATCH" 1 280 "0x0001" "Pin from low to high on match"
D G "COMPARE_CLR_ON_MATCH" 1 281 "0x0002" "Pin from high to low on match"
D G "COMPARE_TOGGLE" 1 282 "0x0003" "Pin will toggle on every match occurrence"
D G "COMPARE_SINGLE_PULSE" 1 283 "0x0004" "Pin will generate single pulse on first match"
D G "COMPARE_CONT_PULSE" 1 284 "0x0005" "Pin will pulse for every match"
D G "COMPARE_PWM" 1 285 "0x0006" "Compare operates as PWM with fault pin disabled"
D G "COMPARE_PWM_FAULT" 1 286 "0x0007" "Compare operates as PWM with fault pin enabled"
D G "COMPARE_TIMER2" 1 289 "0x0000" "Timer 2 is the base timer"
D G "COMPARE_TIMER3" 1 290 "0x0008" "Timer 3 is the base timer"
D G "COMPARE_HALT_IDLE" 1 293 "0x2000" "Compare module halts during idle mode"
D G "COMPARE_CONTINUE_IDLE" 1 294 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 1 1 3 "FUNCTION"
F N "setup_spi" 1 299 ""
V L "mode" 1 299 "int16" `181 
F B "setup_spi" 1 299 "void(int16 mode)" `180 
F N "spi_write" 1 300 ""
V L "data" 1 300 "int8" `183 
F B "spi_write" 1 300 "void(int8 data)" `182 
F N "spi_write" 1 301 ""
V L "wait" 1 301 "int8" `185 
V L "data" 1 301 "int8" `186 
F B "spi_write" 1 301 "void(int8 wait,int8 data)" `184 
F N "spi_write_16" 1 302 ""
V L "data" 1 302 "int16" `188 
F B "spi_write_16" 1 302 "void(int16 data)" `187 
F N "spi_write_16" 1 303 ""
V L "wait" 1 303 "int8" `190 
V L "data" 1 303 "int16" `191 
F B "spi_write_16" 1 303 "void(int8 wait,int16 data)" `189 
F N "spi_read" 1 304 ""
F B "spi_read" 1 304 "int8()" `192 
F N "spi_read" 1 305 ""
V L "data" 1 305 "int8" `194 
F B "spi_read" 1 305 "int8(int8 data)" `193 
F N "spi_read_16" 1 306 ""
F B "spi_read_16" 1 306 "int16()" `195 
F N "spi_read_16" 1 307 ""
V L "data" 1 307 "int16" `197 
F B "spi_read_16" 1 307 "int16(int16 data)" `196 
F N "spi_data_is_in" 1 308 ""
F B "spi_data_is_in" 1 308 "int8()" `198  "Constants used in SETUP_SPI() are:"
D G "SPI_MASTER" 1 311 "0x0020"
D G "SPI_SLAVE" 1 312 "0x0000"
D G "SPI_SCK_IDLE_HIGH" 1 314 "0x0040"
D G "SPI_SCK_IDLE_LOW" 1 315 "0x0000"
D G "SPI_XMIT_L_TO_H" 1 317 "0x0100"
D G "SPI_XMIT_H_TO_L" 1 318 "0x0000"
D G "SPI_MODE_16B" 1 320 "0x0400"
D G "SPI_MODE_8B" 1 321 "0x0000"
D G "SPI_SAMPLE_AT_END" 1 323 "0x0200"
D G "SPI_SAMPLE_AT_MIDDLE" 1 324 "0x0000"
D G "SPI_SS_ENABLED" 1 326 "0x0000"
D G "SPI_SS_DISABLED" 1 327 "0x0080"
D G "SPI_CLK_DIV_1" 1 330 "0x001F"
D G "SPI_CLK_DIV_2" 1 331 "0x001B"
D G "SPI_CLK_DIV_3" 1 332 "0x0017"
D G "SPI_CLK_DIV_4" 1 333 "0x001E"
D G "SPI_CLK_DIV_5" 1 334 "0x000F"
D G "SPI_CLK_DIV_6" 1 335 "0x000B"
D G "SPI_CLK_DIV_7" 1 336 "0x0007"
D G "SPI_CLK_DIV_8" 1 337 "0x0003"
D G "SPI_CLK_DIV_12" 1 338 "0x0016"
D G "SPI_CLK_DIV_16" 1 339 "0x001D"
D G "SPI_CLK_DIV_20" 1 340 "0x000E"
D G "SPI_CLK_DIV_24" 1 341 "0x000A"
D G "SPI_CLK_DIV_28" 1 342 "0x0006"
D G "SPI_CLK_DIV_32" 1 343 "0x0002"
D G "SPI_CLK_DIV_48" 1 344 "0x0015"
D G "SPI_CLK_DIV_64" 1 345 "0x001C"
D G "SPI_CLK_DIV_80" 1 346 "0x000D"
D G "SPI_CLK_DIV_96" 1 347 "0x0009"
D G "SPI_CLK_DIV_112" 1 348 "0x0005"
D G "SPI_CLK_DIV_128" 1 349 "0x0001"
D G "SPI_CLK_DIV_192" 1 350 "0x0014"
D G "SPI_CLK_DIV_256" 1 351 "0x0010"
D G "SPI_CLK_DIV_320" 1 352 "0x000C"
D G "SPI_CLK_DIV_384" 1 353 "0x0008"
D G "SPI_CLK_DIV_448" 1 354 "0x0004"
D G "SPI_CLK_DIV_512" 1 355 "0x0000"
D G "SPI_L_TO_H" 1 358 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 1 359 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 1 4 "FUNCTION"
F N "setup_adc" 1 365 ""
V L "mode" 1 365 "int32" `200 
F B "setup_adc" 1 365 "void(int32 mode)" `199 
F N "setup_adc_ports" 1 366 ""
V L "pins" 1 366 "int32" `202 
F B "setup_adc_ports" 1 366 "void(int32 pins)" `201 
F N "setup_adc_ports" 1 367 ""
V L "pins" 1 367 "int32" `204 
V L "reference" 1 367 "int16" `205 
F B "setup_adc_ports" 1 367 "void(int32 pins,int16 reference)" `203 
F N "set_adc_channel" 1 368 ""
V L "channel" 1 368 "int8" `207 
F B "set_adc_channel" 1 368 "void(int8 channel)" `206 
F N "set_adc_channel" 1 369 ""
V L "channel" 1 369 "int8" `209 
V L "neg_channel" 1 369 "int8" `210 
F B "set_adc_channel" 1 369 "void(int8 channel,int8 neg_channel)" `208 
F N "read_adc" 1 370 ""
F B "read_adc" 1 370 "int16()" `211 
F N "read_adc" 1 371 ""
V L "mode" 1 371 "int8" `213 
F B "read_adc" 1 371 "int16(int8 mode)" `212 
F N "adc_done" 1 372 ""
F B "adc_done" 1 372 "int8()" `214  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 1 376 "0x10000"
D G "ADC_CLOCK" 1 377 "0x0000"
D G "ADC_CLOCK_DIV_2" 1 378 "0x0001"
D G "ADC_CLOCK_DIV_4" 1 379 "0x0003"
D G "ADC_CLOCK_DIV_8" 1 380 "0x0007"
D G "ADC_CLOCK_DIV_16" 1 381 "0x000F"
D G "ADC_CLOCK_DIV_32" 1 382 "0x001F"
D G "ADC_CLOCK_DIV_64" 1 383 "0x003F"
D G "ADC_CLOCK_INTERNAL" 1 384 "0x8000" "Internal"
D G "ADC_TAD_MUL_0" 1 388 "0x1F00"
D G "ADC_TAD_MUL_2" 1 389 "0x1D00"
D G "ADC_TAD_MUL_4" 1 390 "0x1B00"
D G "ADC_TAD_MUL_8" 1 391 "0x1700"
D G "ADC_TAD_MUL_16" 1 392 "0x0F00"
D G "ADC_TAD_MUL_31" 1 393 "0x0000"
D G "ADC_START_AND_READ" 1 396 "0x07"
D G "ADC_START_ONLY" 1 397 "0x01"
D G "ADC_READ_ONLY" 1 398 "0x06"
D G "VSS" 1 401 "0"
D G "NO_ANALOGS" 1 406 "0" "None"
D G "ALL_ANALOG" 1 407 "0xFFFFFFFF" "All"
D G "sAN0" 1 408 "0x00000001" "| A0"
D G "sAN1" 1 409 "0x00000002" "| A1"
D G "sAN2" 1 410 "0x00000004" "| B0"
D G "sAN3" 1 411 "0x00000008" "| B1"
D G "sAN4" 1 412 "0x00000010" "| B2"
D G "sAN5" 1 413 "0x00000020" "| B3"
D G "VSS_VDD" 1 416 "0x0000" "Range 0-Vdd"
D G "VREF_VREF" 1 417 "0x6000" "Range VrefL-VrefH"
D G "VREF_VDD" 1 418 "0x4000" "Range VrefL-Vdd"
D G "VSS_VREF" 1 419 "0x2000" "Range 0-VrefH"
c L "adc_done" 1 1 4 "FUNCTION"
F N "setup_qei" 1 425 ""
V L "mode" 1 425 "int16" `216 
V L "filter" 1 425 "int16" `217 
V L "maxcount" 1 425 "int16" `218 
F B "setup_qei" 1 425 "void(int16 mode,int16 filter,int16 maxcount)" `215 
F N "setup_qei" 1 426 ""
V L "unit" 1 426 "int8" `220 
V L "mode" 1 426 "int16" `221 
V L "filter" 1 426 "int16" `222 
V L "maxcount" 1 426 "int16" `223 
F B "setup_qei" 1 426 "void(int8 unit,int16 mode,int16 filter,int16 maxcount)" `219 
F N "qei_set_count" 1 427 ""
V L "count" 1 427 "int16" `225 
F B "qei_set_count" 1 427 "void(int16 count)" `224 
F N "qei_set_count" 1 428 ""
V L "unit" 1 428 "int8" `227 
V L "count" 1 428 "int16" `228 
F B "qei_set_count" 1 428 "void(int8 unit,int16 count)" `226 
F N "qei_get_count" 1 429 ""
F B "qei_get_count" 1 429 "int16()" `229 
F N "qei_get_count" 1 430 ""
V L "unit" 1 430 "int8" `231 
F B "qei_get_count" 1 430 "int16(int8 unit)" `230 
F N "qei_status" 1 431 ""
F B "qei_status" 1 431 "int16()" `232 
F N "qei_status" 1 432 ""
V L "unit" 1 432 "int8" `234 
F B "qei_status" 1 432 "int16(int8 unit)" `233  "Constants used in setup_qei() first param are:"
D G "QEI_DISABLED" 1 434 "0"
D G "QEI_MODE_X2" 1 435 "0x0400"
D G "QEI_MODE_X4" 1 436 "0x0600"
D G "QEI_MODE_TIMER" 1 437 "0x0100"
D G "QEI_STOP_WHEN_IDLE" 1 438 "0x2000"
D G "QEI_SWAP_AB" 1 439 "0x0080"
D G "QEI_OUTPUT_ENABLE" 1 440 "0x0040"
D G "QEI_RESET_WHEN_MAXCOUNT" 1 441 "0x0100"
D G "QEI_RESET_WHEN_IDX_PULSE" 1 442 "0x0004"
D G "QEI_TIMER_GATED" 1 443 "0x0020"
D G "QEI_TIMER_INTERNAL" 1 444 "0x0000"
D G "QEI_TIMER_EXTERNAL" 1 445 "0x0002"
D G "QEI_TIMER_DIV_BY_1" 1 446 "0x0000"
D G "QEI_TIMER_DIV_BY_8" 1 447 "0x0008"
D G "QEI_TIMER_DIV_BY_64" 1 448 "0x0010"
D G "QEI_TIMER_DIV_BY_256" 1 449 "0x0018"
D G "QEI_FILTER_DIV_1" 1 451 "0x0000"
D G "QEI_FILTER_DIV_2" 1 452 "0x0010"
D G "QEI_FILTER_DIV_4" 1 453 "0x0020"
D G "QEI_FILTER_DIV_16" 1 454 "0x0030"
D G "QEI_FILTER_DIV_32" 1 455 "0x0040"
D G "QEI_FILTER_DIV_64" 1 456 "0x0050"
D G "QEI_FILTER_DIV_128" 1 457 "0x0060"
D G "QEI_FILTER_DIV_256" 1 458 "0x0070"
D G "QEI_FILTER_OUTPUT" 1 459 "0x0080"
D G "QEI_NO_ERROR_INTS" 1 460 "0x0100"
D G "QEI_IDX_WHEN_A0" 1 461 "0x0000" "for 2X mode"
D G "QEI_IDX_WHEN_A1" 1 462 "0x0200" "for 2X mode"
D G "QEI_IDX_WHEN_B0" 1 463 "0x0400" "for 2X mode"
D G "QEI_IDX_WHEN_B1" 1 464 "0x0600" "for 2X mode"
D G "QEI_IDX_WHEN_A0_B0" 1 465 "0x0000" "for 4X mode"
D G "QEI_IDX_WHEN_A1_B0" 1 466 "0x0200" "for 4X mode"
D G "QEI_IDX_WHEN_A0_B1" 1 467 "0x0400" "for 4X mode"
D G "QEI_IDX_WHEN_A1_B1" 1 468 "0x0600" "for 4X mode"
D G "QEI_POS_ERROR" 1 470 "0x8000"
D G "QEI_FORWARD" 1 471 "0x0800"
D G "QEI_INDEX_PIN" 1 472 "0x1000"
c L "qei_status" 1 1 5 "FUNCTION"
F N "setup_motor_pwm" 1 479 ""
V L "pwm" 1 479 "int8" `236 
V L "mode" 1 479 "int32" `237 
V L "timebase" 1 479 "int32" `238 
F B "setup_motor_pwm" 1 479 "void(int8 pwm,int32 mode,int32 timebase)" `235 
F N "setup_motor_pwm" 1 480 ""
V L "pwm" 1 480 "int8" `240 
V L "mode" 1 480 "int32" `241 
V L "prescale" 1 480 "int8" `242 
V L "postscale" 1 480 "int8" `243 
V L "period" 1 480 "int16" `244 
F B "setup_motor_pwm" 1 480 "void(int8 pwm,int32 mode,int8 prescale,int8 postscale,int16 period)" `239 
F N "set_motor_unit" 1 481 ""
V L "pwm" 1 481 "int8" `246 
V L "pin_pair" 1 481 "int8" `247 
V L "mode" 1 481 "int16" `248 
V L "active_deadtime" 1 481 "int8" `249 
V L "inactive_deadtime" 1 481 "int8" `250 
F B "set_motor_unit" 1 481 "void(int8 pwm,int8 pin_pair,int16 mode,int8 active_deadtime,int8 inactive_deadtime)" `245 
F N "set_motor_pwm_duty" 1 482 ""
V L "pwm" 1 482 "int8" `252 
V L "pin_pair" 1 482 "int8" `253 
V L "duty" 1 482 "int16" `254 
F B "set_motor_pwm_duty" 1 482 "void(int8 pwm,int8 pin_pair,int16 duty)" `251 
F N "set_motor_pwm_event" 1 483 ""
V L "pwm" 1 483 "int8" `256 
V L "time" 1 483 "sint16" `257 
F B "set_motor_pwm_event" 1 483 "void(int8 pwm,sint16 time)" `255 
F N "set_motor_pwm_event" 1 484 ""
V L "pwm" 1 484 "int8" `259 
V L "time" 1 484 "sint16" `260 
V L "postscale" 1 484 "int8" `261 
F B "set_motor_pwm_event" 1 484 "void(int8 pwm,sint16 time,int8 postscale)" `258 
F N "get_motor_pwm_count" 1 485 ""
V L "pwm" 1 485 "int8" `263 
F B "get_motor_pwm_count" 1 485 "int16(int8 pwm)" `262  "Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):"
D G "MPWM_DISABLED" 1 487 "0"
D G "MPWM_FREE_RUN" 1 488 "0x8000"
D G "MPWM_SINGLE_PULSE" 1 489 "0x8001"
D G "MPWM_UP_DOWN" 1 490 "0x8002"
D G "MPWM_UP_DOWN_WITH_INTS" 1 491 "0x8003"
D G "MPWM_HALT_WHEN_IDLE" 1 493 "0x2000"
D G "MPWM_DUTY_UPDATES_IMMEADIATE" 1 494 "0x40000"
D G "MPWM_SYNC_OVERRIDES" 1 495 "0x20000"
D G "MPWM_DISABLE_UPDATES" 1 496 "0x10000"
D G "MPWM_LATCH_FAULTS" 1 497 "0x100000"
D G "MPWM_INDEPENDENT" 1 500 "0x0001"
D G "MPWM_ENABLE" 1 501 "0x0006" "both H and L"
D G "MPWM_ENABLE_H" 1 502 "0x0004"
D G "MPWM_ENABLE_L" 1 503 "0x0002"
D G "MPWM_FORCE_L_0" 1 505 "0x0010"
D G "MPWM_FORCE_L_1" 1 506 "0x0050"
D G "MPWM_FORCE_H_0" 1 507 "0x0020"
D G "MPWM_FORCE_H_1" 1 508 "0x00A0"
D G "MPWM_FAULTA_LA_HA" 1 510 "0x0700"
D G "MPWM_FAULTA_LA_HI" 1 511 "0x0500"
D G "MPWM_FAULTA_LI_HA" 1 512 "0x0600"
D G "MPWM_FAULTA_LI_HI" 1 513 "0x0400"
D G "MPWM_FAULTB_LA_HA" 1 514 "0x7000"
D G "MPWM_FAULTB_LA_HI" 1 515 "0x5000"
D G "MPWM_FAULTB_LI_HA" 1 516 "0x6000"
D G "MPWM_FAULTB_LI_HI" 1 517 "0x4000"
D G "MPWM_FAULT_NO_CHANGE" 1 518 "0x0000"
c L "get_motor_pwm_count" 1 1 3 "FUNCTION"
F N "abs" 1 524 ""
V L "x" 1 524 "sint8" `265 
F B "abs" 1 524 "sint8(sint8 x)" `264 
F N "abs" 1 525 ""
V L "x" 1 525 "sint16" `267 
F B "abs" 1 525 "sint16(sint16 x)" `266 
F N "abs" 1 526 ""
V L "x" 1 526 "sint32" `269 
F B "abs" 1 526 "sint32(sint32 x)" `268 
F N "abs" 1 527 ""
V L "x" 1 527 "float" `271 
F B "abs" 1 527 "float(float x)" `270 
F N "_mul" 1 528 ""
V L "??65535" 1 528 "int8" `273 
V L "??65535" 1 528 "int8" `274 
F B "_mul" 1 528 "int16(int8 ,int8 )" `272 
F N "_mul" 1 529 ""
V L "??65535" 1 529 "sint8" `276 
V L "??65535" 1 529 "sint8" `277 
F B "_mul" 1 529 "sint16(sint8 ,sint8 )" `275 
F N "_mul" 1 530 ""
V L "??65535" 1 530 "int16" `279 
V L "??65535" 1 530 "int16" `280 
F B "_mul" 1 530 "int32(int16 ,int16 )" `278 
F N "_mul" 1 531 ""
V L "??65535" 1 531 "sint16" `282 
V L "??65535" 1 531 "sint16" `283 
F B "_mul" 1 531 "sint32(sint16 ,sint16 )" `281 
F N "abs" 1 532 ""
V L "x" 1 532 "?" `285 
F B "abs" 1 532 "?(? x)" `284 
F N "abs" 1 533 ""
V L "x" 1 533 "?" `287 
F B "abs" 1 533 "?(? x)" `286 
F N "abs" 1 534 ""
V L "x" 1 534 "?" `289 
F B "abs" 1 534 "?(? x)" `288 
F N "abs" 1 535 ""
V L "x" 1 535 "?" `291 
F B "abs" 1 535 "?(? x)" `290 
F N "_mul" 1 536 ""
V L "??65535" 1 536 "int32" `293 
V L "??65535" 1 536 "int32" `294 
F B "_mul" 1 536 "?(int32 ,int32 )" `292 
F N "_mul" 1 537 ""
V L "??65535" 1 537 "sint32" `296 
V L "??65535" 1 537 "sint32" `297 
F B "_mul" 1 537 "?(sint32 ,sint32 )" `295 
F N "_mul" 1 538 ""
V L "??65535" 1 538 "?" `299 
V L "??65535" 1 538 "?" `300 
F B "_mul" 1 538 "?(? ,? )" `298 
F N "_mul" 1 539 ""
V L "??65535" 1 539 "?" `302 
V L "??65535" 1 539 "?" `303 
F B "_mul" 1 539 "?(? ,? )" `301  "Memory Manipulation Prototypes:"
F N "strcpy" 1 542 ""
V L "dest" 1 542 "*sint8" `305 
V L "src" 1 542 "*sint8" `306 
F B "strcpy" 1 542 "void(*sint8 dest,*sint8 src)" `304 
F N "memset" 1 543 ""
V L "destination" 1 543 "*int8" `308 
V L "value" 1 543 "int8" `309 
V L "num" 1 543 "int16" `310 
F B "memset" 1 543 "void(*int8 destination,int8 value,int16 num)" `307 
F N "memcpy" 1 544 ""
V L "destination" 1 544 "*int8" `312 
V L "source" 1 544 "*int8" `313 
V L "num" 1 544 "int16" `314 
F B "memcpy" 1 544 "void(*int8 destination,*int8 source,int16 num)" `311  "Data Manipulators Prototypes:"
F N "shift_left" 1 547 ""
V L "address" 1 547 "*int8" `316 
V L "bytes" 1 547 "int8" `317 
V L "value" 1 547 "int8" `318 
F B "shift_left" 1 547 "int8(*int8 address,int8 bytes,int8 value)" `315 
F N "shift_right" 1 548 ""
V L "address" 1 548 "*int8" `320 
V L "bytes" 1 548 "int8" `321 
V L "value" 1 548 "int8" `322 
F B "shift_right" 1 548 "int8(*int8 address,int8 bytes,int8 value)" `319 
F N "rotate_left" 1 549 ""
V L "address" 1 549 "*int8" `324 
V L "bytes" 1 549 "int8" `325 
F B "rotate_left" 1 549 "void(*int8 address,int8 bytes)" `323 
F N "rotate_right" 1 550 ""
V L "address" 1 550 "*int8" `327 
V L "bytes" 1 550 "int8" `328 
F B "rotate_right" 1 550 "void(*int8 address,int8 bytes)" `326 
F N "swap" 1 551 ""
V L "value" 1 551 "int8" `330 
F B "swap" 1 551 "void(int8 value)" `329 
F N "make8" 1 552 ""
V L "var" 1 552 "int16" `332 
V L "offset" 1 552 "int8" `333 
F B "make8" 1 552 "int8(int16 var,int8 offset)" `331 
F N "make8" 1 553 ""
V L "var" 1 553 "int32" `335 
V L "offset" 1 553 "int8" `336 
F B "make8" 1 553 "int8(int32 var,int8 offset)" `334 
F N "make16" 1 554 ""
V L "varhigh" 1 554 "int8" `338 
V L "varlow" 1 554 "int8" `339 
F B "make16" 1 554 "int16(int8 varhigh,int8 varlow)" `337 
F N "make32" 1 555 ""
V L "var1" 1 555 "int16" `341 
F B "make32" 1 555 "int32(int16 var1)" `340 
F N "make32" 1 556 ""
V L "var1" 1 556 "int16" `343 
V L "var2" 1 556 "int16" `344 
F B "make32" 1 556 "int32(int16 var1,int16 var2)" `342 
F N "make32" 1 557 ""
V L "var1" 1 557 "int16" `346 
V L "var2" 1 557 "int8" `347 
F B "make32" 1 557 "int32(int16 var1,int8 var2)" `345 
F N "make32" 1 558 ""
V L "var1" 1 558 "int16" `349 
V L "var2" 1 558 "int8" `350 
V L "var3" 1 558 "int8" `351 
F B "make32" 1 558 "int32(int16 var1,int8 var2,int8 var3)" `348 
F N "make32" 1 559 ""
V L "var1" 1 559 "int8" `353 
F B "make32" 1 559 "int32(int8 var1)" `352 
F N "make32" 1 560 ""
V L "var1" 1 560 "int8" `355 
V L "var2" 1 560 "int8" `356 
F B "make32" 1 560 "int32(int8 var1,int8 var2)" `354 
F N "make32" 1 561 ""
V L "var1" 1 561 "int8" `358 
V L "var2" 1 561 "int8" `359 
V L "var3" 1 561 "int8" `360 
F B "make32" 1 561 "int32(int8 var1,int8 var2,int8 var3)" `357 
F N "make32" 1 562 ""
V L "var1" 1 562 "int8" `362 
V L "var2" 1 562 "int8" `363 
V L "var3" 1 562 "int8" `364 
V L "var4" 1 562 "int8" `365 
F B "make32" 1 562 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `361 
F N "make32" 1 563 ""
V L "var1" 1 563 "int8" `367 
V L "var2" 1 563 "int16" `368 
F B "make32" 1 563 "int32(int8 var1,int16 var2)" `366 
F N "make32" 1 564 ""
V L "var1" 1 564 "int8" `370 
V L "var2" 1 564 "int16" `371 
V L "var3" 1 564 "int8" `372 
F B "make32" 1 564 "int32(int8 var1,int16 var2,int8 var3)" `369 
F N "make32" 1 565 ""
V L "var1" 1 565 "int8" `374 
V L "var2" 1 565 "int8" `375 
V L "var3" 1 565 "int16" `376 
F B "make32" 1 565 "int32(int8 var1,int8 var2,int16 var3)" `373 
F N "bit_set" 1 566 ""
V L "var" 1 566 "int8" `378 
V L "bit" 1 566 "int8" `379 
F B "bit_set" 1 566 "void(int8 var,int8 bit)" `377 
F N "bit_set" 1 567 ""
V L "var" 1 567 "int16" `381 
V L "bit" 1 567 "int8" `382 
F B "bit_set" 1 567 "void(int16 var,int8 bit)" `380 
F N "bit_set" 1 568 ""
V L "var" 1 568 "int32" `384 
V L "bit" 1 568 "int8" `385 
F B "bit_set" 1 568 "void(int32 var,int8 bit)" `383 
F N "bit_clear" 1 569 ""
V L "var" 1 569 "int8" `387 
V L "bit" 1 569 "int8" `388 
F B "bit_clear" 1 569 "void(int8 var,int8 bit)" `386 
F N "bit_clear" 1 570 ""
V L "var" 1 570 "int16" `390 
V L "bit" 1 570 "int8" `391 
F B "bit_clear" 1 570 "void(int16 var,int8 bit)" `389 
F N "bit_clear" 1 571 ""
V L "var" 1 571 "int32" `393 
V L "bit" 1 571 "int8" `394 
F B "bit_clear" 1 571 "void(int32 var,int8 bit)" `392 
F N "bit_test" 1 572 ""
V L "var" 1 572 "int8" `396 
V L "bit" 1 572 "int8" `397 
F B "bit_test" 1 572 "int8(int8 var,int8 bit)" `395 
F N "bit_test" 1 573 ""
V L "var" 1 573 "int16" `399 
V L "bit" 1 573 "int8" `400 
F B "bit_test" 1 573 "int8(int16 var,int8 bit)" `398 
F N "bit_test" 1 574 ""
V L "var" 1 574 "int32" `402 
V L "bit" 1 574 "int8" `403 
F B "bit_test" 1 574 "int8(int32 var,int8 bit)" `401 
F N "bit_set" 1 575 ""
V L "var" 1 575 "?" `405 
V L "bit" 1 575 "int8" `406 
F B "bit_set" 1 575 "void(? var,int8 bit)" `404 
F N "bit_set" 1 576 ""
V L "var" 1 576 "?" `408 
V L "bit" 1 576 "int8" `409 
F B "bit_set" 1 576 "void(? var,int8 bit)" `407 
F N "bit_clear" 1 577 ""
V L "var" 1 577 "?" `411 
V L "bit" 1 577 "int8" `412 
F B "bit_clear" 1 577 "void(? var,int8 bit)" `410 
F N "bit_clear" 1 578 ""
V L "var" 1 578 "?" `414 
V L "bit" 1 578 "int8" `415 
F B "bit_clear" 1 578 "void(? var,int8 bit)" `413 
F N "bit_test" 1 579 ""
V L "var" 1 579 "?" `417 
V L "bit" 1 579 "int8" `418 
F B "bit_test" 1 579 "int8(? var,int8 bit)" `416 
F N "bit_test" 1 580 ""
V L "var" 1 580 "?" `420 
V L "bit" 1 580 "int8" `421 
F B "bit_test" 1 580 "int8(? var,int8 bit)" `419 
F N "bit_first" 1 581 ""
V L "value" 1 581 "int8" `423 
V L "var" 1 581 "int16" `424 
F B "bit_first" 1 581 "int8(int8 value,int16 var)" `422 
F N "bit_last" 1 582 ""
V L "var" 1 582 "sint16" `426 
F B "bit_last" 1 582 "int8(sint16 var)" `425 
F N "bit_last" 1 583 ""
V L "value" 1 583 "int8" `428 
V L "var" 1 583 "sint16" `429 
F B "bit_last" 1 583 "int8(int8 value,sint16 var)" `427  "#use delay() Prototypes:"
F N "delay_cycles" 1 586 ""
V L "count" 1 586 "int16" `431 
F B "delay_cycles" 1 586 "void(int16 count)" `430 
F N "delay_ms" 1 587 ""
V L "time" 1 587 "int16" `433 
F B "delay_ms" 1 587 "void(int16 time)" `432 
F N "delay_us" 1 588 ""
V L "time" 1 588 "int16" `435 
F B "delay_us" 1 588 "void(int16 time)" `434  "#use rs232() Prototypes:"
F N "putchar" 1 591 ""
V L "cdata" 1 591 "sint8" `437 
F B "putchar" 1 591 "void(sint8 cdata)" `436 
F N "putchar" 1 592 ""
V L "cdata" 1 592 "sint8" `439 
V L "stream" 1 592 "int8" `440 
F B "putchar" 1 592 "void(sint8 cdata,int8 stream)" `438 
F N "puts" 1 593 ""
V L "string" 1 593 "*sint8" `442 
F B "puts" 1 593 "void(*sint8 string)" `441 
F N "puts" 1 594 ""
V L "string" 1 594 "*sint8" `444 
V L "stream" 1 594 "int8" `445 
F B "puts" 1 594 "void(*sint8 string,int8 stream)" `443 
F N "getch" 1 595 ""
F B "getch" 1 595 "sint8()" `446 
F N "getch" 1 596 ""
V L "stream" 1 596 "int8" `448 
F B "getch" 1 596 "sint8(int8 stream)" `447 
F N "gets" 1 597 ""
V L "string" 1 597 "*sint8" `450 
F B "gets" 1 597 "void(*sint8 string)" `449 
F N "gets" 1 598 ""
V L "string" 1 598 "*sint8" `452 
V L "stream" 1 598 "int8" `453 
F B "gets" 1 598 "void(*sint8 string,int8 stream)" `451 
F N "kbhit" 1 599 ""
F B "kbhit" 1 599 "int8()" `454 
F N "kbhit" 1 600 ""
V L "stream" 1 600 "int8" `456 
F B "kbhit" 1 600 "int8(int8 stream)" `455 
F N "printf" 1 601 ""
V L "string" 1 601 "*sint8" `458 
F B "printf" 1 601 "void(*sint8 string,*int8 _VA_LIST)" `457 
F N "fprintf" 1 602 ""
V L "stream" 1 602 "int8" `461 
V L "string" 1 602 "*sint8" `462 
F B "fprintf" 1 602 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `460 
F N "putc_send" 1 603 ""
F B "putc_send" 1 603 "void()" `464 
F N "fputc_send" 1 604 ""
V L "stream" 1 604 "int8" `466 
F B "fputc_send" 1 604 "void(int8 stream)" `465 
F N "rcv_buffer_full" 1 605 ""
F B "rcv_buffer_full" 1 605 "int8()" `467 
F N "rcv_buffer_full" 1 606 ""
V L "stream" 1 606 "int8" `469 
F B "rcv_buffer_full" 1 606 "int8(int8 stream)" `468 
F N "rcv_buffer_bytes" 1 607 ""
F B "rcv_buffer_bytes" 1 607 "int16()" `470 
F N "rcv_buffer_bytes" 1 608 ""
V L "stream" 1 608 "int8" `472 
F B "rcv_buffer_bytes" 1 608 "int16(int8 stream)" `471 
F N "tx_buffer_full" 1 609 ""
F B "tx_buffer_full" 1 609 "int8()" `473 
F N "tx_buffer_full" 1 610 ""
V L "stream" 1 610 "int8" `475 
F B "tx_buffer_full" 1 610 "int8(int8 stream)" `474 
F N "tx_buffer_bytes" 1 611 ""
F B "tx_buffer_bytes" 1 611 "int16()" `476 
F N "tx_buffer_bytes" 1 612 ""
V L "stream" 1 612 "int8" `478 
F B "tx_buffer_bytes" 1 612 "int16(int8 stream)" `477 
F N "linbus_header" 1 613 ""
V L "identifier" 1 613 "int8" `480 
F B "linbus_header" 1 613 "int8(int8 identifier)" `479 
F N "linbus_header" 1 614 ""
V L "stream" 1 614 "int8" `482 
V L "identifier" 1 614 "int8" `483 
F B "linbus_header" 1 614 "int8(int8 stream,int8 identifier)" `481 
F N "linbus_header_hit" 1 615 ""
F B "linbus_header_hit" 1 615 "int8()" `484 
F N "linbus_header_hit" 1 616 ""
V L "stream" 1 616 "int8" `486 
F B "linbus_header_hit" 1 616 "int8(int8 stream)" `485 
F N "linbus_header_get" 1 617 ""
F B "linbus_header_get" 1 617 "int8()" `487 
F N "linbus_header_get" 1 618 ""
V L "stream" 1 618 "int8" `489 
F B "linbus_header_get" 1 618 "int8(int8 stream)" `488 
F N "linbus_rx_response" 1 619 ""
V L "DataPtr" 1 619 "*int8" `491 
V L "count" 1 619 "int8" `492 
F B "linbus_rx_response" 1 619 "int8(*int8 DataPtr,int8 count)" `490 
F N "linbus_rx_response" 1 620 ""
V L "stream" 1 620 "int8" `494 
V L "DataPtr" 1 620 "*int8" `495 
V L "count" 1 620 "int8" `496 
F B "linbus_rx_response" 1 620 "int8(int8 stream,*int8 DataPtr,int8 count)" `493 
F N "linbus_tx_response" 1 621 ""
V L "DataPtr" 1 621 "*int8" `498 
V L "count" 1 621 "int8" `499 
F B "linbus_tx_response" 1 621 "void(*int8 DataPtr,int8 count)" `497 
F N "linbus_tx_response" 1 622 ""
V L "stream" 1 622 "int8" `501 
V L "DataPtr" 1 622 "*int8" `502 
V L "count" 1 622 "int8" `503 
F B "linbus_tx_response" 1 622 "void(int8 stream,*int8 DataPtr,int8 count)" `500 
F N "linbus_checksum_type" 1 623 ""
V L "type" 1 623 "int8" `505 
F B "linbus_checksum_type" 1 623 "void(int8 type)" `504 
F N "linbus_checksum_type" 1 624 ""
V L "stream" 1 624 "int8" `507 
V L "type" 1 624 "int8" `508 
F B "linbus_checksum_type" 1 624 "void(int8 stream,int8 type)" `506  "#use i2c() Prototypes:"
F N "i2c_read" 1 627 ""
F B "i2c_read" 1 627 "int8()" `509 
F N "i2c_read" 1 628 ""
V L "ack" 1 628 "int8" `511 
F B "i2c_read" 1 628 "int8(int8 ack)" `510 
F N "i2c_read" 1 629 ""
V L "stream" 1 629 "int8" `513 
V L "ack" 1 629 "int8" `514 
F B "i2c_read" 1 629 "int8(int8 stream,int8 ack)" `512 
F N "i2c_write" 1 630 ""
V L "data" 1 630 "int8" `516 
F B "i2c_write" 1 630 "int8(int8 data)" `515 
F N "i2c_write" 1 631 ""
V L "stream" 1 631 "int8" `518 
V L "data" 1 631 "int8" `519 
F B "i2c_write" 1 631 "int8(int8 stream,int8 data)" `517 
F N "i2c_start" 1 632 ""
F B "i2c_start" 1 632 "void()" `520 
F N "i2c_start" 1 633 ""
V L "stream" 1 633 "int8" `522 
F B "i2c_start" 1 633 "void(int8 stream)" `521 
F N "i2c_start" 1 634 ""
V L "stream" 1 634 "int8" `524 
V L "restart" 1 634 "int8" `525 
F B "i2c_start" 1 634 "void(int8 stream,int8 restart)" `523 
F N "i2c_stop" 1 635 ""
F B "i2c_stop" 1 635 "void()" `526 
F N "i2c_stop" 1 636 ""
V L "stream" 1 636 "int8" `528 
F B "i2c_stop" 1 636 "void(int8 stream)" `527 
F N "i2c_isr_state" 1 637 ""
F B "i2c_isr_state" 1 637 "sint8()" `529 
F N "i2c_slaveaddr" 1 638 ""
V L "addr" 1 638 "int8" `531 
F B "i2c_slaveaddr" 1 638 "void(int8 addr)" `530 
F N "i2c_slaveaddr" 1 639 ""
V L "stream" 1 639 "int8" `533 
V L "addr" 1 639 "int8" `534 
F B "i2c_slaveaddr" 1 639 "void(int8 stream,int8 addr)" `532 
F N "i2c_poll" 1 640 ""
F B "i2c_poll" 1 640 "int8()" `535 
F N "i2c_poll" 1 641 ""
V L "stream" 1 641 "int8" `537 
F B "i2c_poll" 1 641 "int8(int8 stream)" `536 
F N "i2c_init" 1 642 ""
V L "baud" 1 642 "int32" `539 
F B "i2c_init" 1 642 "void(int32 baud)" `538 
F N "i2c_init" 1 643 ""
V L "stream" 1 643 "int8" `541 
V L "baud" 1 643 "int32" `542 
F B "i2c_init" 1 643 "void(int8 stream,int32 baud)" `540 
F N "i2c_transfer" 1 644 ""
V L "address" 1 644 "int8" `544 
V L "wData" 1 644 "*int8" `545 
V L "wCount" 1 644 "int8" `546 
F B "i2c_transfer" 1 644 "int8(int8 address,*int8 wData,int8 wCount)" `543 
F N "i2c_transfer" 1 645 ""
V L "address" 1 645 "int8" `548 
V L "wData" 1 645 "*int8" `549 
V L "wCount" 1 645 "int8" `550 
V L "rData" 1 645 "*int8" `551 
V L "rCount" 1 645 "*int8" `552 
F B "i2c_transfer" 1 645 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `547 
F N "i2c_transfer" 1 646 ""
V L "stream" 1 646 "int8" `554 
V L "address" 1 646 "int8" `555 
V L "wData" 1 646 "*int8" `556 
V L "wCount" 1 646 "int8" `557 
F B "i2c_transfer" 1 646 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `553 
F N "i2c_transfer" 1 647 ""
V L "stream" 1 647 "int8" `559 
V L "address" 1 647 "int8" `560 
V L "wData" 1 647 "*int8" `561 
V L "wCount" 1 647 "int8" `562 
V L "rData" 1 647 "*int8" `563 
V L "rCount" 1 647 "*int8" `564 
F B "i2c_transfer" 1 647 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `558 
F N "i2c_transfer_out" 1 648 ""
V L "address" 1 648 "int8" `566 
V L "wData" 1 648 "*int8" `567 
V L "wCount" 1 648 "int8" `568 
F B "i2c_transfer_out" 1 648 "int8(int8 address,*int8 wData,int8 wCount)" `565 
F N "i2c_transfer_out" 1 649 ""
V L "stream" 1 649 "int8" `570 
V L "address" 1 649 "int8" `571 
V L "wData" 1 649 "*int8" `572 
V L "wCount" 1 649 "int8" `573 
F B "i2c_transfer_out" 1 649 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `569 
F N "i2c_transfer_in" 1 650 ""
V L "address" 1 650 "int8" `575 
V L "rData" 1 650 "*int8" `576 
V L "rCount" 1 650 "int8" `577 
F B "i2c_transfer_in" 1 650 "int8(int8 address,*int8 rData,int8 rCount)" `574 
F N "i2c_transfer_in" 1 651 ""
V L "stream" 1 651 "int8" `579 
V L "address" 1 651 "int8" `580 
V L "rData" 1 651 "*int8" `581 
V L "rCount" 1 651 "int8" `582 
F B "i2c_transfer_in" 1 651 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `578  "#use spi() Prototypes:"
F N "spi_xfer" 1 654 ""
F B "spi_xfer" 1 654 "int8()" `583 
F N "spi_xfer" 1 655 ""
f G "spi_xfer" 1 655 "int16(int8 data)" `584 
F N "spi_xfer" 1 656 ""
f G "spi_xfer" 1 656 "int32(int8 data)" `584 
F N "spi_xfer" 1 657 ""
V L "data" 1 657 "int8" `585 
F B "spi_xfer" 1 657 "int8(int8 data)" `584 
F N "spi_xfer" 1 658 ""
V L "data" 1 658 "int16" `587 
F B "spi_xfer" 1 658 "int16(int16 data)" `586 
F N "spi_xfer" 1 659 ""
V L "data" 1 659 "int32" `589 
F B "spi_xfer" 1 659 "int32(int32 data)" `588 
F N "spi_xfer" 1 660 ""
V L "stream" 1 660 "int8" `591 
V L "data" 1 660 "int8" `592 
F B "spi_xfer" 1 660 "int8(int8 stream,int8 data)" `590 
F N "spi_xfer" 1 661 ""
V L "stream" 1 661 "int8" `594 
V L "data" 1 661 "int16" `595 
F B "spi_xfer" 1 661 "int16(int8 stream,int16 data)" `593 
F N "spi_xfer" 1 662 ""
V L "stream" 1 662 "int8" `597 
V L "data" 1 662 "int32" `598 
F B "spi_xfer" 1 662 "int32(int8 stream,int32 data)" `596 
F N "spi_xfer" 1 663 ""
V L "stream" 1 663 "int8" `600 
V L "data" 1 663 "int8" `601 
V L "bits" 1 663 "int8" `602 
F B "spi_xfer" 1 663 "int8(int8 stream,int8 data,int8 bits)" `599 
F N "spi_xfer" 1 664 ""
V L "stream" 1 664 "int8" `604 
V L "data" 1 664 "int16" `605 
V L "bits" 1 664 "int8" `606 
F B "spi_xfer" 1 664 "int16(int8 stream,int16 data,int8 bits)" `603 
F N "spi_xfer" 1 665 ""
V L "stream" 1 665 "int8" `608 
V L "data" 1 665 "int32" `609 
V L "bits" 1 665 "int8" `610 
F B "spi_xfer" 1 665 "int32(int8 stream,int32 data,int8 bits)" `607 
F N "spi_init" 1 666 ""
V L "baud" 1 666 "int32" `612 
F B "spi_init" 1 666 "void(int32 baud)" `611 
F N "spi_init" 1 667 ""
V L "stream" 1 667 "int8" `614 
V L "baud" 1 667 "int32" `615 
F B "spi_init" 1 667 "void(int8 stream,int32 baud)" `613 
F N "spi_speed" 1 668 ""
V L "baud" 1 668 "int32" `617 
F B "spi_speed" 1 668 "void(int32 baud)" `616 
F N "spi_speed" 1 669 ""
V L "stream" 1 669 "int8" `619 
V L "baud" 1 669 "int32" `620 
F B "spi_speed" 1 669 "void(int8 stream,int32 baud)" `618 
F N "spi_speed" 1 670 ""
V L "stream" 1 670 "int8" `622 
V L "baud" 1 670 "int32" `623 
V L "clock" 1 670 "int32" `624 
F B "spi_speed" 1 670 "void(int8 stream,int32 baud,int32 clock)" `621 
F N "spi_prewrite" 1 671 ""
V L "data" 1 671 "int8" `626 
F B "spi_prewrite" 1 671 "void(int8 data)" `625 
F N "spi_prewrite" 1 672 ""
V L "data" 1 672 "int16" `628 
F B "spi_prewrite" 1 672 "void(int16 data)" `627 
F N "spi_prewrite" 1 673 ""
V L "data" 1 673 "int32" `630 
F B "spi_prewrite" 1 673 "void(int32 data)" `629 
F N "spi_prewrite" 1 674 ""
V L "??65535" 1 674 "int8" `632 
V L "data" 1 674 "int8" `633 
F B "spi_prewrite" 1 674 "void(int8 ,int8 data)" `631 
F N "spi_prewrite" 1 675 ""
V L "??65535" 1 675 "int8" `635 
V L "data" 1 675 "int16" `636 
F B "spi_prewrite" 1 675 "void(int8 ,int16 data)" `634 
F N "spi_prewrite" 1 676 ""
V L "??65535" 1 676 "int8" `638 
V L "data" 1 676 "int32" `639 
F B "spi_prewrite" 1 676 "void(int8 ,int32 data)" `637 
F N "spi_xfer_in" 1 677 ""
F B "spi_xfer_in" 1 677 "int8()" `640 
F N "spi_xfer_in" 1 678 ""
f G "spi_xfer_in" 1 678 "int16(int8 bits)" `641 
F N "spi_xfer_in" 1 679 ""
f G "spi_xfer_in" 1 679 "int32(int8 bits)" `641 
F N "spi_xfer_in" 1 680 ""
V L "bits" 1 680 "int8" `642 
F B "spi_xfer_in" 1 680 "int8(int8 bits)" `641 
F N "spi_xfer_in" 1 681 ""
V L "bits" 1 681 "int8" `644 
f G "spi_xfer_in" 1 681 "int16(int8 bits,int8 bits)" `643 
F N "spi_xfer_in" 1 682 ""
V L "bits" 1 682 "int8" `644 
f G "spi_xfer_in" 1 682 "int32(int8 bits,int8 bits)" `643 
F N "spi_xfer_in" 1 683 ""
V L "stream" 1 683 "int8" `644 
V L "bits" 1 683 "int8" `645 
F B "spi_xfer_in" 1 683 "int8(int8 stream,int8 bits)" `643 
F N "spi_xfer_in" 1 684 ""
V L "stream" 1 684 "int8" `644 
V L "bits" 1 684 "int8" `648 
f G "spi_xfer_in" 1 684 "int16(int8 stream,int8 bits,int16 count)" `646 
F N "spi_xfer_in" 1 685 ""
V L "stream" 1 685 "int8" `644 
V L "bits" 1 685 "int8" `648 
f G "spi_xfer_in" 1 685 "int32(int8 stream,int8 bits,int16 count)" `646 
F N "spi_transfer" 1 686 ""
V L "wData" 1 686 "*int8" `647 
V L "rData" 1 686 "*int8" `648 
V L "count" 1 686 "int16" `649 
F B "spi_transfer" 1 686 "void(*int8 wData,*int8 rData,int16 count)" `646 
F N "spi_transfer" 1 687 ""
V L "stream" 1 687 "int8" `651 
V L "wData" 1 687 "*int8" `652 
V L "rData" 1 687 "*int8" `653 
V L "count" 1 687 "int16" `654 
F B "spi_transfer" 1 687 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `650 
F N "spi_transfer_write" 1 688 ""
V L "wData" 1 688 "*int8" `656 
V L "count" 1 688 "int16" `657 
F B "spi_transfer_write" 1 688 "void(*int8 wData,int16 count)" `655 
F N "spi_transfer_write" 1 689 ""
V L "stream" 1 689 "int8" `659 
V L "wData" 1 689 "*int8" `660 
V L "count" 1 689 "int16" `661 
F B "spi_transfer_write" 1 689 "void(int8 stream,*int8 wData,int16 count)" `658 
F N "spi_transfer_read" 1 690 ""
V L "rData" 1 690 "*int8" `663 
V L "count" 1 690 "int16" `664 
F B "spi_transfer_read" 1 690 "void(*int8 rData,int16 count)" `662 
F N "spi_transfer_read" 1 691 ""
V L "stream" 1 691 "int8" `666 
V L "rData" 1 691 "*int8" `667 
V L "count" 1 691 "int16" `668 
F B "spi_transfer_read" 1 691 "void(int8 stream,*int8 rData,int16 count)" `665  "#use rtos() Prototypes:"
F N "rtos_run" 1 694 ""
F B "rtos_run" 1 694 "void()" `669 
F N "rtos_yield" 1 695 ""
F B "rtos_yield" 1 695 "void()" `670 
F N "rtos_enable" 1 696 ""
V L "task" 1 696 "int8" `672 
F B "rtos_enable" 1 696 "void(int8 task)" `671 
F N "rtos_disable" 1 697 ""
V L "task" 1 697 "int8" `674 
F B "rtos_disable" 1 697 "void(int8 task)" `673 
F N "rtos_terminate" 1 698 ""
F B "rtos_terminate" 1 698 "void()" `675 
F N "rtos_await" 1 699 ""
V L "flag" 1 699 "int8" `677 
F B "rtos_await" 1 699 "void(int8 flag)" `676 
F N "rtos_wait" 1 700 ""
V L "sem" 1 700 "int8" `679 
F B "rtos_wait" 1 700 "void(int8 sem)" `678 
F N "rtos_signal" 1 701 ""
V L "sem" 1 701 "int8" `681 
F B "rtos_signal" 1 701 "void(int8 sem)" `680 
F N "rtos_msg_send" 1 702 ""
V L "task" 1 702 "int8" `683 
V L "msg" 1 702 "int8" `684 
F B "rtos_msg_send" 1 702 "void(int8 task,int8 msg)" `682 
F N "rtos_msg_read" 1 703 ""
F B "rtos_msg_read" 1 703 "int8()" `685 
F N "rtos_msg_poll" 1 704 ""
F B "rtos_msg_poll" 1 704 "int8()" `686 
F N "rtos_overrun" 1 705 ""
V L "task" 1 705 "int8" `688 
F B "rtos_overrun" 1 705 "int8(int8 task)" `687 
F N "rtos_stats" 1 706 ""
V L "task" 1 706 "int8" `690 
V L "stat" 1 706 "*int8" `691 
F B "rtos_stats" 1 706 "void(int8 task,*int8 stat)" `689  "#use timer() Prototypes:"
F N "get_ticks" 1 709 ""
F B "get_ticks" 1 709 "int8()" `692 
F N "get_ticks" 1 710 ""
f G "get_ticks" 1 710 "int16(int8 stream)" `693 
F N "get_ticks" 1 711 ""
f G "get_ticks" 1 711 "int32(int8 stream)" `693 
F N "get_ticks" 1 712 ""
f G "get_ticks" 1 712 "?(int8 stream)" `693 
F N "get_ticks" 1 713 ""
V L "stream" 1 713 "int8" `694 
F B "get_ticks" 1 713 "int8(int8 stream)" `693 
F N "get_ticks" 1 714 ""
V L "stream" 1 714 "int8" `696 
f G "get_ticks" 1 714 "int16(int8 stream)" `695 
F N "get_ticks" 1 715 ""
V L "stream" 1 715 "int8" `696 
f G "get_ticks" 1 715 "int32(int8 stream)" `695 
F N "get_ticks" 1 716 ""
V L "stream" 1 716 "int8" `696 
f G "get_ticks" 1 716 "?(int8 stream)" `695 
F N "set_ticks" 1 717 ""
V L "value" 1 717 "int8" `696 
F B "set_ticks" 1 717 "void(int8 value)" `695 
F N "set_ticks" 1 718 ""
V L "value" 1 718 "int16" `698 
F B "set_ticks" 1 718 "void(int16 value)" `697 
F N "set_ticks" 1 719 ""
V L "value" 1 719 "int32" `700 
F B "set_ticks" 1 719 "void(int32 value)" `699 
F N "set_ticks" 1 720 ""
V L "value" 1 720 "?" `702 
F B "set_ticks" 1 720 "void(? value)" `701 
F N "set_ticks" 1 721 ""
V L "stream" 1 721 "int8" `704 
V L "value" 1 721 "int8" `705 
F B "set_ticks" 1 721 "void(int8 stream,int8 value)" `703 
F N "set_ticks" 1 722 ""
V L "stream" 1 722 "int8" `707 
V L "value" 1 722 "int16" `708 
F B "set_ticks" 1 722 "void(int8 stream,int16 value)" `706 
F N "set_ticks" 1 723 ""
V L "stream" 1 723 "int8" `710 
V L "value" 1 723 "int32" `711 
F B "set_ticks" 1 723 "void(int8 stream,int32 value)" `709 
F N "set_ticks" 1 724 ""
V L "stream" 1 724 "int8" `713 
V L "value" 1 724 "?" `714 
F B "set_ticks" 1 724 "void(int8 stream,? value)" `712  "#use pwm() Prototypes:"
F N "pwm_on" 1 727 ""
F B "pwm_on" 1 727 "void()" `715 
F N "pwm_on" 1 728 ""
V L "stream" 1 728 "int8" `717 
F B "pwm_on" 1 728 "void(int8 stream)" `716 
F N "pwm_off" 1 729 ""
F B "pwm_off" 1 729 "void()" `718 
F N "pwm_off" 1 730 ""
V L "stream" 1 730 "int8" `720 
F B "pwm_off" 1 730 "void(int8 stream)" `719 
F N "pwm_set_duty" 1 731 ""
V L "duty" 1 731 "int16" `722 
F B "pwm_set_duty" 1 731 "void(int16 duty)" `721 
F N "pwm_set_duty" 1 732 ""
V L "stream" 1 732 "int8" `724 
V L "duty" 1 732 "int16" `725 
F B "pwm_set_duty" 1 732 "void(int8 stream,int16 duty)" `723 
F N "pwm_set_duty_percent" 1 733 ""
V L "percent" 1 733 "int16" `727 
F B "pwm_set_duty_percent" 1 733 "void(int16 percent)" `726 
F N "pwm_set_duty_percent" 1 734 ""
V L "stream" 1 734 "int8" `729 
V L "percent" 1 734 "int16" `730 
F B "pwm_set_duty_percent" 1 734 "void(int8 stream,int16 percent)" `728 
F N "pwm_set_frequency" 1 735 ""
V L "frequency" 1 735 "int32" `732 
F B "pwm_set_frequency" 1 735 "void(int32 frequency)" `731 
F N "pwm_set_frequency" 1 736 ""
V L "stream" 1 736 "int8" `734 
V L "frequency" 1 736 "int32" `735 
F B "pwm_set_frequency" 1 736 "void(int8 stream,int32 frequency)" `733 
F N "pwm_get_duty_period" 1 737 ""
F B "pwm_get_duty_period" 1 737 "int16()" `736 
F N "pwm_get_duty_period" 1 738 ""
V L "stream" 1 738 "int8" `738 
F B "pwm_get_duty_period" 1 738 "int16(int8 stream)" `737  "#use capture() Prototypes:"
F N "get_capture_time" 1 741 ""
F B "get_capture_time" 1 741 "int16()" `739 
F N "get_capture_time" 1 742 ""
V L "stream" 1 742 "int8" `741 
F B "get_capture_time" 1 742 "int16(int8 stream)" `740 
F N "get_capture_event" 1 743 ""
F B "get_capture_event" 1 743 "int8()" `742 
F N "get_capture_event" 1 744 ""
V L "stream" 1 744 "int8" `744 
F B "get_capture_event" 1 744 "int8(int8 stream)" `743  "Environment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
F N "goto_address" 1 753 ""
V L "address" 1 753 "int16" `746 
F B "goto_address" 1 753 "void(int16 address)" `745 
F N "label_address" 1 754 ""
V L "label" 1 754 "int16" `748 
F B "label_address" 1 754 "int16(int16 label)" `747  "Program Memory Prototypes:"
F N "read_program_memory" 1 757 ""
V L "address" 1 757 "int16" `750 
V L "DataPtr" 1 757 "*int8" `751 
V L "count" 1 757 "int16" `752 
F B "read_program_memory" 1 757 "void(int16 address,*int8 DataPtr,int16 count)" `749 
F N "erase_program_memory" 1 758 ""
V L "address" 1 758 "int16" `754 
F B "erase_program_memory" 1 758 "void(int16 address)" `753 
F N "write_program_memory" 1 759 ""
V L "address" 1 759 "int16" `756 
V L "DataPtr" 1 759 "*int8" `757 
V L "count" 1 759 "int16" `758 
F B "write_program_memory" 1 759 "void(int16 address,*int8 DataPtr,int16 count)" `755 
F N "read_configuration_memory" 1 760 ""
V L "DataPtr" 1 760 "*int8" `760 
V L "count" 1 760 "int8" `761 
F B "read_configuration_memory" 1 760 "void(*int8 DataPtr,int8 count)" `759 
F N "write_configuration_memory" 1 761 ""
V L "DataPtr" 1 761 "*int8" `763 
V L "count" 1 761 "int8" `764 
F B "write_configuration_memory" 1 761 "void(*int8 DataPtr,int8 count)" `762  "INT"
c L "write_configuration_memory" 1 1 4 "FUNCTION"
F N "enable_interrupts" 1 768 ""
V L "interrupt" 1 768 "int16" `766 
F B "enable_interrupts" 1 768 "void(int16 interrupt)" `765 
F N "disable_interrupts" 1 769 ""
V L "interrupt" 1 769 "int16" `768 
F B "disable_interrupts" 1 769 "void(int16 interrupt)" `767 
F N "clear_interrupt" 1 770 ""
V L "interrupt" 1 770 "int16" `770 
F B "clear_interrupt" 1 770 "void(int16 interrupt)" `769 
F N "interrupt_active" 1 771 ""
V L "interrupt" 1 771 "int16" `772 
F B "interrupt_active" 1 771 "int8(int16 interrupt)" `771 
F N "interrupt_enabled" 1 772 ""
V L "interrupt" 1 772 "int16" `774 
F B "interrupt_enabled" 1 772 "int8(int16 interrupt)" `773 
F N "ext_int_edge" 1 773 ""
V L "source" 1 773 "int8" `776 
V L "edge" 1 773 "int8" `777 
F B "ext_int_edge" 1 773 "void(int8 source,int8 edge)" `775 
F N "jump_to_isr" 1 774 ""
V L "address" 1 774 "int16" `779 
F B "jump_to_isr" 1 774 "void(int16 address)" `778  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 776 "0x40"
D G "H_TO_L" 1 777 "0"
D G "INTR_GLOBAL" 1 781 "0x0800"
D G "GLOBAL" 1 782 "0x0800" "For compatibility with PIC16/18"
D G "INTR_NORMAL" 1 783 "0x1000"
D G "INTR_ALTERNATE" 1 784 "0x2000"
D G "INTR_LEVEL0" 1 785 "0x3000"
D G "INTR_LEVEL1" 1 786 "0x3001"
D G "INTR_LEVEL2" 1 787 "0x3002"
D G "INTR_LEVEL3" 1 788 "0x3003"
D G "INTR_LEVEL4" 1 789 "0x3004"
D G "INTR_LEVEL5" 1 790 "0x3005"
D G "INTR_LEVEL6" 1 791 "0x3006"
D G "INTR_LEVEL7" 1 792 "0x3007"
D G "INTR_CN_PIN" 1 808 "0x8000" "or in a PIN_xx constant (enable/disable only)"
D G "INT_OSCFAIL" 1 810 "1"
D G "INT_ADDRERR" 1 811 "2"
D G "INT_STACKERR" 1 812 "3"
D G "INT_MATHERR" 1 813 "4"
D G "INT_EXT0" 1 814 "6"
D G "INT_IC1" 1 815 "7"
D G "INT_OC1" 1 816 "8"
D G "INT_TIMER1" 1 817 "9"
D G "INT_IC2" 1 818 "70"
D G "INT_OC2" 1 819 "71"
D G "INT_TIMER2" 1 820 "72"
D G "INT_TIMER3" 1 821 "73"
D G "INT_SPI1E" 1 822 "74"
D G "INT_SPI1" 1 823 "75"
D G "INT_RDA" 1 824 "76"
D G "INT_TBE" 1 825 "77"
D G "INT_ADC1" 1 826 "78"
D G "INT_SI2C" 1 827 "81"
D G "INT_MI2C" 1 828 "82"
D G "INT_CNI" 1 829 "84"
D G "INT_EXT1" 1 830 "85"
D G "INT_IC7" 1 831 "87"
D G "INT_IC8" 1 832 "88"
D G "INT_EXT2" 1 833 "94"
D G "INT_PWM1" 1 834 "110"
D G "INT_QEI" 1 835 "123"
D G "INT_PWM2" 1 836 "127"
D G "INT_FAULTA" 1 837 "128"
D G "INT_UART1E" 1 838 "130"
D G "INT_FAULTA2" 1 839 "139"
D G "INT_DAC1R" 1 840 "177"
D G "INT_DAC1L" 1 841 "178"
C L "jump_to_isr" 0 4 2 "FUNCTION"
D G "MATH_H" 2 30 ""
D G "PI" 2 35 "3.1415926535897932"
D G "SQRT2" 2 38 "1.4142135623730950"
C L "jump_to_isr" 2 2 3 "FUNCTION"
F N "CEIL_FLOOR" 2 45 ""
V L "x" 2 45 "float" `785 
V L "n" 2 45 "int8" `786 
F G "CEIL_FLOOR" 2 46 "float(float x,int8 n)" `784 
V L "y" 2 47 "float" `787 
V L "res" 2 47 "float" `788 
V L "l" 2 48 "int16" `789 
V L "s" 2 49 "int1" `790 
C L "CEIL_FLOOR" 2 2 2 "FUNCTION"
F N "CEIL_FLOOR" 2 96 ""
V L "x" 2 96 "?" `805 
V L "n" 2 96 "int8" `806 
F G "CEIL_FLOOR" 2 97 "?(? x,int8 n)" `804 
V L "y" 2 98 "?" `807 
V L "res" 2 98 "?" `808 
V L "l" 2 99 "int32" `809 
V L "s" 2 100 "int1" `810 
C L "CEIL_FLOOR" 2 2 1 "FUNCTION"
F N "CEIL_FLOOR" 2 149 ""
V L "x" 2 149 "?" `825 
V L "n" 2 149 "int8" `826 
F G "CEIL_FLOOR" 2 150 "?(? x,int8 n)" `824 
V L "y" 2 151 "?" `827 
V L "res" 2 151 "?" `828 
V L "l" 2 152 "?" `829 
V L "s" 2 153 "int1" `830 
C L "floor" 2 2 3 "FUNCTION"
F N "floor" 2 207 ""
V L "x" 2 207 "float" `849 
F G "floor" 2 208 "float(float x)" `848 
C L "floor" 2 2 2 "FUNCTION"
F N "floor" 2 214 ""
V L "x" 2 214 "?" `851 
F G "floor" 2 215 "?(? x)" `850 
C L "floor" 2 2 1 "FUNCTION"
F N "floor" 2 220 ""
V L "x" 2 220 "?" `853 
F G "floor" 2 221 "?(? x)" `852 
C L "ceil" 2 2 3 "FUNCTION"
F N "ceil" 2 233 ""
V L "x" 2 233 "float" `855 
F G "ceil" 2 234 "float(float x)" `854 
C L "ceil" 2 2 2 "FUNCTION"
F N "ceil" 2 240 ""
V L "x" 2 240 "?" `857 
F G "ceil" 2 241 "?(? x)" `856 
C L "ceil" 2 2 1 "FUNCTION"
F N "ceil" 2 246 ""
V L "x" 2 246 "?" `859 
F G "ceil" 2 247 "?(? x)" `858 
D G "fabs" 2 259 "abs"
C L "fmod" 2 2 6 "FUNCTION"
F N "fmod" 2 271 ""
V L "x" 2 271 "float" `861 
V L "y" 2 271 "float" `862 
F G "fmod" 2 272 "float(float x,float y)" `860 
V L "i" 2 273 "float" `863 
C L "fmod" 2 2 2 "FUNCTION"
F N "fmod" 2 291 ""
V L "x" 2 291 "?" `868 
V L "y" 2 291 "?" `869 
F G "fmod" 2 292 "?(? x,? y)" `867 
V L "i" 2 293 "?" `870 
C L "fmod" 2 2 1 "FUNCTION"
F N "fmod" 2 309 ""
V L "x" 2 309 "?" `875 
V L "y" 2 309 "?" `876 
F G "fmod" 2 310 "?(? x,? y)" `874 
V L "i" 2 311 "?" `877 
D G "LN2" 2 334 "0.6931471805599453"
D G "LN2_INV" 2 335 "1.4426950408889634073"
V G "pe" 2 337 "[6]" `882 
F N "exp" 2 341 ""
V L "x" 2 341 "float" `885 
F G "exp" 2 342 "float(float x)" `884 
V L "y" 2 343 "float" `886 
V L "res" 2 343 "float" `887 
V L "r" 2 343 "float" `888 
V L "data1" 2 345 "sint8" `889 
V L "n" 2 347 "sint8" `890 
V L "s" 2 348 "int1" `891 
C L "exp" 2 2 1 "FUNCTION"
C L "exp" 2 2 2 "FUNCTION"
F N "exp" 2 400 ""
V L "x" 2 400 "?" `895 
F G "exp" 2 401 "?(? x)" `894 
V L "y" 2 402 "?" `896 
V L "res" 2 402 "?" `897 
V L "r" 2 402 "?" `898 
V L "data1" 2 403 "sint8" `899 
V L "n" 2 404 "sint8" `900 
V L "s" 2 405 "int1" `901 
V G "pe_64" 2 449 "[12]" `905 
F N "exp" 2 456 ""
V L "x" 2 456 "?" `908 
F G "exp" 2 457 "?(? x)" `907 
V L "y" 2 458 "?" `909 
V L "res" 2 458 "?" `910 
V L "r" 2 458 "?" `911 
V L "data1" 2 459 "int16" `912 
V L "data2" 2 459 "int16" `913 
V L "p" 2 460 "*int16" `914 
V L "n" 2 461 "sint16" `915 
V L "s" 2 462 "int1" `916 
V G "pl" 2 525 "[4]" `918 
V G "ql" 2 526 "[4]" `921 
C L "log" 2 2 3 "FUNCTION"
F N "log" 2 534 ""
V L "x" 2 534 "float" `924 
F G "log" 2 535 "float(float x)" `923 
V L "y" 2 536 "float" `925 
V L "res" 2 536 "float" `926 
V L "r" 2 536 "float" `927 
V L "y2" 2 536 "float" `928 
V L "data1" 2 538 "int8" `929 
V L "data2" 2 538 "int8" `930 
V L "n" 2 540 "sint8" `931 
C L "log" 2 2 1 "FUNCTION"
V G "pl_64" 2 610 "[4]" `933 
V G "ql_64" 2 613 "[4]" `936 
F N "log" 2 616 ""
V L "x" 2 616 "?" `939 
F G "log" 2 617 "?(? x)" `938 
V L "y" 2 618 "?" `940 
V L "res" 2 618 "?" `941 
V L "r" 2 618 "?" `942 
V L "y2" 2 618 "?" `943 
V L "data1" 2 619 "int8" `944 
V L "data2" 2 619 "int8" `945 
V L "n" 2 620 "sint8" `946 
F N "log" 2 684 ""
V L "x" 2 684 "?" `948 
F G "log" 2 685 "?(? x)" `947 
V L "y" 2 686 "?" `949 
V L "res" 2 686 "?" `950 
V L "r" 2 686 "?" `951 
V L "y2" 2 686 "?" `952 
V L "data1" 2 687 "int16" `953 
V L "data2" 2 687 "int16" `954 
V L "p" 2 688 "*int16" `955 
V L "n" 2 689 "sint16" `956 
D G "LN10" 2 758 "2.3025850929940456"
D G "LN10_INV" 2 759 "0.4342944819032518276"
C L "log10" 2 2 3 "FUNCTION"
F N "log10" 2 767 ""
V L "x" 2 767 "float" `958 
F G "log10" 2 768 "float(float x)" `957 
V L "r" 2 769 "float" `959 
C L "log10" 2 2 2 "FUNCTION"
F N "log10" 2 779 ""
V L "x" 2 779 "?" `961 
F G "log10" 2 780 "?(? x)" `960 
V L "r" 2 781 "?" `962 
C L "log10" 2 2 1 "FUNCTION"
F N "log10" 2 789 ""
V L "x" 2 789 "?" `964 
F G "log10" 2 790 "?(? x)" `963 
V L "r" 2 791 "?" `965 
C L "modf" 2 2 6 "FUNCTION"
F N "modf" 2 808 ""
V L "value" 2 808 "float" `967 
V L "iptr" 2 808 "*float" `968 
F G "modf" 2 809 "float(float value,*float iptr)" `966 
C L "modf" 2 2 2 "FUNCTION"
F N "modf" 2 816 ""
V L "value" 2 816 "?" `970 
V L "iptr" 2 816 "??0 *" `971 
F G "modf" 2 817 "?(? value,??0 * iptr)" `969 
C L "modf" 2 2 1 "FUNCTION"
F N "modf" 2 822 ""
V L "value" 2 822 "?" `973 
V L "iptr" 2 822 "??0 *" `974 
F G "modf" 2 823 "?(? value,??0 * iptr)" `972 
C L "pwr" 2 2 4 "FUNCTION"
F N "pwr" 2 836 ""
V L "x" 2 836 "float" `976 
V L "y" 2 836 "float" `977 
F G "pwr" 2 837 "float(float x,float y)" `975 
C L "pwr" 2 2 2 "FUNCTION"
F N "pwr" 2 855 ""
V L "x" 2 855 "?" `979 
V L "y" 2 855 "?" `980 
F G "pwr" 2 856 "?(? x,? y)" `978 
C L "pwr" 2 2 1 "FUNCTION"
F N "pwr" 2 872 ""
V L "x" 2 872 "?" `982 
V L "y" 2 872 "?" `983 
F G "pwr" 2 873 "?(? x,? y)" `981 
C L "pow" 2 2 5 "FUNCTION"
F N "pow" 2 899 ""
V L "x" 2 899 "float" `985 
V L "y" 2 899 "float" `986 
F G "pow" 2 900 "float(float x,float y)" `984 
C L "pow" 2 2 2 "FUNCTION"
F N "pow" 2 918 ""
V L "x" 2 918 "?" `988 
V L "y" 2 918 "?" `989 
F G "pow" 2 919 "?(? x,? y)" `987 
C L "pow" 2 2 1 "FUNCTION"
F N "pow" 2 936 ""
V L "x" 2 936 "?" `991 
V L "y" 2 936 "?" `992 
F G "pow" 2 937 "?(? x,? y)" `990 
C L "sqrt" 2 2 3 "FUNCTION"
F N "sqrt" 2 960 ""
V L "x" 2 960 "float" `994 
F G "sqrt" 2 961 "float(float x)" `993 
V L "y" 2 962 "float" `995 
V L "res" 2 962 "float" `996 
V L "data1" 2 964 "int16" `997 
V L "data2" 2 964 "int16" `998 
C L "sqrt" 2 2 2 "FUNCTION"
F N "sqrt" 2 1033 ""
V L "x" 2 1033 "?" `1000 
F G "sqrt" 2 1034 "?(? x)" `999 
V L "y" 2 1035 "?" `1001 
V L "res" 2 1035 "?" `1002 
V L "data1" 2 1036 "int16" `1003 
V L "data2" 2 1036 "int16" `1004 
V L "p" 2 1037 "*int8" `1005 
C L "sqrt" 2 2 1 "FUNCTION"
F N "sqrt" 2 1100 ""
V L "x" 2 1100 "?" `1007 
F G "sqrt" 2 1101 "?(? x)" `1006 
V L "y" 2 1102 "?" `1008 
V L "res" 2 1102 "?" `1009 
V L "p" 2 1103 "*int16" `1010 
V L "temp1" 2 1104 "int16" `1011 
V L "temp2" 2 1104 "int16" `1012 
D G "PI_DIV_BY_TWO_INV" 2 1156 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 2 1160 "1.5707963267948966"
D G "TWOBYPI" 2 1164 "0.6366197723675813"
C L "cos" 2 2 3 "FUNCTION"
F N "cos" 2 1172 ""
V L "x" 2 1172 "float" `1014 
F G "cos" 2 1173 "float(float x)" `1013 
V L "y" 2 1174 "float" `1015 
V L "t" 2 1174 "float" `1016 
V L "t2" 2 1174 "float" `1017 
V L "quad" 2 1175 "int8" `1018 
V L "i" 2 1175 "int8" `1019 
V L "frac" 2 1176 "float" `1020 
V L "p" 2 1177 "float[5]" `1021  "by the series definition for cosine"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 2 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 2 "FUNCTION"
F N "cos" 2 1218 ""
V L "x" 2 1218 "?" `1023 
F G "cos" 2 1219 "?(? x)" `1022 
V L "y" 2 1220 "?" `1024 
V L "t" 2 1220 "?" `1025 
V L "t2" 2 1220 "?" `1026 
V L "quad" 2 1221 "int8" `1027 
V L "i" 2 1221 "int8" `1028 
V L "frac" 2 1222 "?" `1029 
V L "p" 2 1223 "?[6]" `1030  "by the series definition for cosine"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
F N "cos" 2 1260 ""
V L "x" 2 1260 "?" `1032 
F G "cos" 2 1261 "?(? x)" `1031 
V L "y" 2 1262 "?" `1033 
V L "t" 2 1262 "?" `1034 
V L "t2" 2 1262 "?" `1035 
V L "quad" 2 1263 "int8" `1036 
V L "i" 2 1263 "int8" `1037 
V L "frac" 2 1264 "?" `1038 
V L "p_64" 2 1265 "?[9]" `1039  "by the series definition for cosine"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "sin" 2 2 3 "FUNCTION"
F N "sin" 2 1311 ""
V L "x" 2 1311 "float" `1041 
F G "sin" 2 1312 "float(float x)" `1040 
C L "sin" 2 2 2 "FUNCTION"
F N "sin" 2 1319 ""
V L "x" 2 1319 "?" `1043 
F G "sin" 2 1320 "?(? x)" `1042 
C L "sin" 2 2 1 "FUNCTION"
F N "sin" 2 1325 ""
V L "x" 2 1325 "?" `1045 
F G "sin" 2 1326 "?(? x)" `1044 
C L "tan" 2 2 3 "FUNCTION"
F N "tan" 2 1337 ""
V L "x" 2 1337 "float" `1047 
F G "tan" 2 1338 "float(float x)" `1046 
V L "c" 2 1339 "float" `1048 
V L "s" 2 1339 "float" `1049 
C L "tan" 2 2 2 "FUNCTION"
F N "tan" 2 1351 ""
V L "x" 2 1351 "?" `1051 
F G "tan" 2 1352 "?(? x)" `1050 
V L "c" 2 1353 "?" `1052 
V L "s" 2 1353 "?" `1053 
C L "tan" 2 2 1 "FUNCTION"
F N "tan" 2 1364 ""
V L "x" 2 1364 "?" `1055 
F G "tan" 2 1365 "?(? x)" `1054 
V L "c" 2 1366 "?" `1056 
V L "s" 2 1366 "?" `1057 
V G "pas" 2 1377 "[3]" `1059 
V G "qas" 2 1378 "[3]" `1062 
F N "ASIN_COS" 2 1380 ""
V L "x" 2 1380 "float" `1065 
V L "n" 2 1380 "int8" `1066 
F G "ASIN_COS" 2 1381 "float(float x,int8 n)" `1064 
V L "y" 2 1382 "float" `1067 
V L "res" 2 1382 "float" `1068 
V L "r" 2 1382 "float" `1069 
V L "y2" 2 1382 "float" `1070 
V L "s" 2 1383 "int1" `1071 
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 2 "FUNCTION"
F N "ASIN_COS" 2 1429 ""
V L "x" 2 1429 "?" `1073 
V L "n" 2 1429 "int8" `1074 
F G "ASIN_COS" 2 1430 "?(? x,int8 n)" `1072 
V L "y" 2 1431 "?" `1075 
V L "res" 2 1431 "?" `1076 
V L "r" 2 1431 "?" `1077 
V L "y2" 2 1431 "?" `1078 
V L "s" 2 1432 "int1" `1079 
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 1 "FUNCTION"
V G "pas_64" 2 1475 "?[5]" `1080 
V G "qas_64" 2 1478 "?[5]" `1081 
F N "ASIN_COS" 2 1481 ""
V L "x" 2 1481 "?" `1083 
V L "n" 2 1481 "int8" `1084 
F G "ASIN_COS" 2 1482 "?(? x,int8 n)" `1082 
V L "y" 2 1483 "?" `1085 
V L "res" 2 1483 "?" `1086 
V L "r" 2 1483 "?" `1087 
V L "y2" 2 1483 "?" `1088 
V L "s" 2 1484 "int1" `1089 
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "asin" 2 2 3 "FUNCTION"
F N "asin" 2 1538 ""
V L "x" 2 1538 "float" `1091 
F G "asin" 2 1539 "float(float x)" `1090 
V L "r" 2 1540 "float" `1092 
C L "asin" 2 2 2 "FUNCTION"
F N "asin" 2 1548 ""
V L "x" 2 1548 "?" `1094 
F G "asin" 2 1549 "?(? x)" `1093 
V L "r" 2 1550 "?" `1095 
C L "asin" 2 2 1 "FUNCTION"
F N "asin" 2 1557 ""
V L "x" 2 1557 "?" `1097 
F G "asin" 2 1558 "?(? x)" `1096 
V L "r" 2 1559 "?" `1098 
C L "acos" 2 2 3 "FUNCTION"
F N "acos" 2 1572 ""
V L "x" 2 1572 "float" `1100 
F G "acos" 2 1573 "float(float x)" `1099 
V L "r" 2 1574 "float" `1101 
C L "acos" 2 2 2 "FUNCTION"
F N "acos" 2 1582 ""
V L "x" 2 1582 "?" `1103 
F G "acos" 2 1583 "?(? x)" `1102 
V L "r" 2 1584 "?" `1104 
C L "acos" 2 2 1 "FUNCTION"
F N "acos" 2 1591 ""
V L "x" 2 1591 "?" `1106 
F G "acos" 2 1592 "?(? x)" `1105 
V L "r" 2 1593 "?" `1107 
V G "pat" 2 1600 "[4]" `1109 
V G "qat" 2 1601 "[4]" `1112 
C L "atan" 2 2 3 "FUNCTION"
F N "atan" 2 1609 ""
V L "x" 2 1609 "float" `1115 
F G "atan" 2 1610 "float(float x)" `1114 
V L "y" 2 1611 "float" `1116 
V L "res" 2 1611 "float" `1117 
V L "r" 2 1611 "float" `1118 
V L "s" 2 1612 "int1" `1119 
V L "flag" 2 1612 "int1" `1120 
C L "atan" 2 2 1 "FUNCTION"
C L "atan" 2 2 2 "FUNCTION"
F N "atan" 2 1651 ""
V L "x" 2 1651 "?" `1122 
F G "atan" 2 1652 "?(? x)" `1121 
V L "y" 2 1653 "?" `1123 
V L "res" 2 1653 "?" `1124 
V L "r" 2 1653 "?" `1125 
V L "s" 2 1654 "int1" `1126 
V L "flag" 2 1654 "int1" `1127 
C L "atan" 2 2 1 "FUNCTION"
V G "pat_64" 2 1691 "?[6]" `1128 
V G "qat_64" 2 1694 "?[6]" `1129 
C L "atan" 2 2 1 "FUNCTION"
F N "atan" 2 1697 ""
V L "x" 2 1697 "?" `1131 
F G "atan" 2 1698 "?(? x)" `1130 
V L "y" 2 1699 "?" `1132 
V L "y2" 2 1699 "?" `1133 
V L "res" 2 1699 "?" `1134 
V L "r" 2 1699 "?" `1135 
V L "s" 2 1700 "int1" `1136 
V L "flag" 2 1700 "int1" `1137 
C L "atan" 2 2 1 "FUNCTION"
C L "atan2" 2 2 5 "FUNCTION"
F N "atan2" 2 1752 ""
V L "y" 2 1752 "float" `1139 
V L "x" 2 1752 "float" `1140 
F G "atan2" 2 1753 "float(float y,float x)" `1138 
V L "z" 2 1754 "float" `1141 
V L "sign" 2 1755 "int1" `1142 
V L "quad" 2 1756 "int8" `1143 
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 2 "FUNCTION"
F N "atan2" 2 1824 ""
V L "y" 2 1824 "?" `1145 
V L "x" 2 1824 "?" `1146 
F G "atan2" 2 1825 "?(? y,? x)" `1144 
V L "z" 2 1826 "?" `1147 
V L "sign" 2 1827 "int1" `1148 
V L "quad" 2 1828 "int8" `1149 
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
F N "atan2" 2 1894 ""
V L "y" 2 1894 "?" `1151 
V L "x" 2 1894 "?" `1152 
F G "atan2" 2 1895 "?(? y,? x)" `1150 
V L "z" 2 1896 "?" `1153 
V L "sign" 2 1897 "int1" `1154 
V L "quad" 2 1898 "int8" `1155 
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
C L "cosh" 2 2 5 "FUNCTION"
F N "cosh" 2 1974 ""
V L "x" 2 1974 "float" `1157 
F G "cosh" 2 1975 "float(float x)" `1156 
C L "cosh" 2 2 2 "FUNCTION"
F N "cosh" 2 1981 ""
V L "x" 2 1981 "?" `1159 
F G "cosh" 2 1982 "?(? x)" `1158 
C L "cosh" 2 2 1 "FUNCTION"
F N "cosh" 2 1987 ""
V L "x" 2 1987 "?" `1161 
F G "cosh" 2 1988 "?(? x)" `1160 
C L "sinh" 2 2 4 "FUNCTION"
F N "sinh" 2 2001 ""
V L "x" 2 2001 "float" `1163 
F G "sinh" 2 2002 "float(float x)" `1162 
C L "sinh" 2 2 2 "FUNCTION"
F N "sinh" 2 2009 ""
V L "x" 2 2009 "?" `1165 
F G "sinh" 2 2010 "?(? x)" `1164 
C L "sinh" 2 2 1 "FUNCTION"
F N "sinh" 2 2016 ""
V L "x" 2 2016 "?" `1167 
F G "sinh" 2 2017 "?(? x)" `1166 
C L "tanh" 2 2 4 "FUNCTION"
F N "tanh" 2 2031 ""
V L "x" 2 2031 "float" `1169 
F G "tanh" 2 2032 "float(float x)" `1168 
C L "tanh" 2 2 2 "FUNCTION"
F N "tanh" 2 2038 ""
V L "x" 2 2038 "?" `1171 
F G "tanh" 2 2039 "?(? x)" `1170 
C L "tanh" 2 2 1 "FUNCTION"
F N "tanh" 2 2044 ""
V L "x" 2 2044 "?" `1173 
F G "tanh" 2 2045 "?(? x)" `1172 
D G "LOG2" 2 2061 ".30102999566398119521"
D G "LOG2_INV" 2 2062 "3.32192809488736234787"
F N "frexp" 2 2063 ""
V L "x" 2 2063 "float" `1175 
V L "exp" 2 2063 "*sint8" `1176 
F G "frexp" 2 2064 "float(float x,*sint8 exp)" `1174 
V L "res" 2 2065 "float" `1177 
V L "sign" 2 2066 "int1" `1178 
C L "frexp" 2 2 2 "FUNCTION"
F N "frexp" 2 2110 ""
V L "x" 2 2110 "?" `1180 
V L "exp" 2 2110 "*sint8" `1181 
F G "frexp" 2 2111 "?(? x,*sint8 exp)" `1179 
V L "res" 2 2112 "?" `1182 
V L "sign" 2 2113 "int1" `1183 
C L "frexp" 2 2 1 "FUNCTION"
F N "frexp" 2 2155 ""
V L "x" 2 2155 "?" `1185 
V L "exp" 2 2155 "*sint8" `1186 
F G "frexp" 2 2156 "?(? x,*sint8 exp)" `1184 
V L "res" 2 2157 "?" `1187 
V L "sign" 2 2158 "int1" `1188 
C L "ldexp" 2 2 4 "FUNCTION"
F N "ldexp" 2 2208 ""
V L "value" 2 2208 "float" `1192 
V L "exp" 2 2208 "sint8" `1193 
F G "ldexp" 2 2209 "float(float value,sint8 exp)" `1191 
C L "ldexp" 2 2 2 "FUNCTION"
F N "ldexp" 2 2216 ""
V L "value" 2 2216 "?" `1195 
V L "exp" 2 2216 "sint8" `1196 
F G "ldexp" 2 2217 "?(? value,sint8 exp)" `1194 
C L "ldexp" 2 2 1 "FUNCTION"
F N "ldexp" 2 2221 ""
V L "value" 2 2221 "?" `1198 
V L "exp" 2 2221 "sint8" `1199 
F G "ldexp" 2 2222 "?(? value,sint8 exp)" `1197 
D G "P1TCON" 0 10 "0x01C0"
D G "P1TMR" 0 11 "0x01C2"
D G "P1TPER" 0 12 "0x01C4"
D G "P1SECMP" 0 13 "0x01C6"
D G "PWM1CON1" 0 14 "0x01C8"
D G "PWM1CON2" 0 15 "0x01CA"
D G "P1DTCON1" 0 16 "0x01CC"
D G "P1DTCON2" 0 17 "0x01CE"
D G "P1FLTACON" 0 18 "0x01D0"
D G "P1OVDCON" 0 19 "0x01D4"
D G "P1DC1" 0 20 "0x01D6"
D G "P1DC2" 0 21 "0x01D8"
D G "P1DC3" 0 22 "0x01DA"
D G "IPC14" 0 23 "0x00C0"
D G "CLKDIV" 0 24 "0x0744"
D G "PLLFBD" 0 25 "0x0746"
D G "Tick_Out" 0 28 "PIN_B0"
D G "Sync_Out" 0 31 "PIN_A4"
D G "Shut_Down" 0 32 "PIN_A1"
D G "Div_pin" 0 33 "PIN_B2"
D G "voltage_offset" 0 35 "624" "1248"
D G "low_duty_limit" 0 36 "32"
D G "high_duty_limit" 0 37 "1217"
D G "SLOPE" 0 38 "2.7"
D G "break_level" 0 40 "5"
D G "sustain_level" 0 41 "200"
D G "break_amplitude" 0 42 "0"
D G "pedestal_amplitude" 0 43 "10"
D G "peak_amplitude" 0 44 "550"
D G "throttle_PIN" 0 46 "PIN_B1"
D G "Voltage_Current_PIN" 0 48 "PIN_B11"
V G "max_samples" 0 53 "int16" `1200 
V G "duty" 0 54 "int16[3]" `1202 
V G "sample" 0 54 "int16" `1203 
V G "sine_table" 0 55 "sint16[30]" `1204 
V G "sine_index" 0 56 "int16" `1205 
V G "phase_angle" 0 56 "int16[3]" `1206 
V G "theeta" 0 57 "?" `1207 
V G "reference" 0 58 "sint32[3]" `1208 
V G "tick" 0 60 "int1" `1209 
V G "peak_voltage" 0 61 "sint16" `1210 
V G "max_freq" 0 62 "int16" `1211 
V G "per_clock_tick" 0 63 "?" `1213 
V G "timer_table" 0 64 "int16[251]" `1215 
V G "gain_table" 0 65 "int16[256]" `1216 
V G "raw_adc" 0 66 "int16" `1217 
V G "throttle_level" 0 67 "sint16" `1218 
V G "freq" 0 68 "int16" `1219 
V G "temp" 0 69 "int16" `1220 
V G "tick_count" 0 71 "sint8" `1221 
F N "timer_reload" 0 73 ""
f G "timer_reload" 0 73 "void()" `1222 
F N "voltage_gain" 0 74 ""
f G "voltage_gain" 0 74 "void()" `1223 
F N "RDA_isr" 0 77 ""
F G "RDA_isr" 0 78 "void()" `1224  "!     if(U1STA.URXDA == 1)"
C L "RDA_isr" 0 29 6 "FUNCTION"
F N "TBE_isr" 0 88 ""
F G "TBE_isr" 0 89 "void()" `1225  "IFS0.U1TXIF = 0; // Clear TX Interrupt flag"
C L "TBE_isr" 0 29 1 "FUNCTION"
F N "UART1E_isr" 0 94 ""
F G "UART1E_isr" 0 95 "void()" `1226  "Must clear the overrun error to keep UART receiving *"
C L "UART1E_isr" 0 29 1 "FUNCTION"
C L "UART1E_isr" 0 29 1 "FUNCTION"
F N "EXT0_isr" 0 104 ""
F G "EXT0_isr" 0 105 "void()" `1227 
F N "timer2_isr" 0 109 ""
F G "timer2_isr" 0 110 "void()" `1228 
F N "PWM1_isr" 0 116 ""
F G "PWM1_isr" 0 117 "void()" `1229  "!    output_bit(throttle_PIN , 1);"
C L "PWM1_isr" 0 29 2 "FUNCTION"
C L "PWM1_isr" 0 29 1 "FUNCTION"
C L "PWM1_isr" 0 29 1 "FUNCTION"
F N "timer1_isr" 0 150 ""
F G "timer1_isr" 0 151 "void()" `1230  "!   output_toggle(TOGGLE_PIN);"
C L "timer1_isr" 0 29 1 "FUNCTION"
V L "i" 0 161 "sint16" `1231 
C L "timer1_isr" 0 29 2 "FUNCTION"
C L "timer1_isr" 0 29 4 "FUNCTION"
F N "initMCPWM" 0 208 ""
f G "initMCPWM" 0 208 "void()" `1235 
F N "fill_sine_table" 0 209 ""
f G "fill_sine_table" 0 209 "void()" `1236 
F N "MAIN" 0 210 ""
F G "MAIN" 0 211 "void()" `1237 
C L "MAIN" 0 29 13 "FUNCTION"
C L "MAIN" 0 29 2 "FUNCTION"
C L "MAIN" 0 29 2 "FUNCTION"
C L "MAIN" 0 29 1 "FUNCTION"
C L "MAIN" 0 29 1 "FUNCTION"
C L "MAIN" 0 29 1 "FUNCTION"
C L "MAIN" 0 29 1 "FUNCTION"
C L "MAIN" 0 29 1 "FUNCTION"
C L "MAIN" 0 29 2 "FUNCTION"
C L "MAIN" 0 29 1 "FUNCTION"
C L "MAIN" 0 29 1 "FUNCTION"
C L "MAIN" 0 29 2 "FUNCTION"
C L "MAIN" 0 29 18 "FUNCTION"
F N "initMCPWM" 0 307 ""
F G "initMCPWM" 0 308 "void()" `1235 
C L "initMCPWM" 0 310 1 "*"
C L "initMCPWM" 0 310 1 "FUNCTION"
C L "initMCPWM" 0 310 1 "FUNCTION"
C L "initMCPWM" 0 310 1 "FUNCTION"
F N "fill_sine_table" 0 325 ""
F G "fill_sine_table" 0 326 "void()" `1236 
F N "timer_reload" 0 334 ""
F G "timer_reload" 0 335 "void()" `1222 
V L "intr_per_sample" 0 336 "?" `1240 
V L "sample" 0 338 "sint16" `1241 
F N "voltage_gain" 0 346 ""
F G "voltage_gain" 0 347 "void()" `1223 
V L "i" 0 348 "sint16" `1242 
V L "i" 0 352 "sint16" `1243 
V L "i" 0 360 "sint16" `1244 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "real_address" 1 0
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "dsp_a" 1 2
F B "dsp_b" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 4
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_pullup" 1 2
F B "pin_select" 2 4
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "pll_locked" 0 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "set_analog_pins" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_qei" 1 4
F B "qei_set_count" 1 2
F B "qei_get_count" 0 1
F B "qei_status" 0 1
F B "setup_motor_pwm" 2 5
F B "set_motor_unit" 5 0
F B "set_motor_pwm_duty" 3 0
F B "set_motor_pwm_event" 2 3
F B "get_motor_pwm_count" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
